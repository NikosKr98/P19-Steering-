
P19-STEERING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006774  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006928  08006928  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006928  08006928  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006928  08006928  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000147c  20000068  08006998  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08006998  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fb4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bfe  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c56  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ecf  00000000  00000000  000368b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b37  00000000  00000000  00050785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093619  00000000  00000000  000642bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b8  00000000  00000000  000f78d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fc290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	0800686c 	.word	0x0800686c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	0800686c 	.word	0x0800686c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <ReadInputs>:

//Private Functions Declaration
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);


void ReadInputs(InputStruct *inputs){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]

	tInputsTimer = HAL_GetTick();
 8000fd0:	f001 fcbe 	bl	8002950 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4ab4      	ldr	r2, [pc, #720]	; (80012a8 <ReadInputs+0x2e0>)
 8000fd8:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog & Digital Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);
 8000fda:	4bb4      	ldr	r3, [pc, #720]	; (80012ac <ReadInputs+0x2e4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000fe6:	48b2      	ldr	r0, [pc, #712]	; (80012b0 <ReadInputs+0x2e8>)
 8000fe8:	f000 fbac 	bl	8001744 <MyHalfBufferAverage>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	821a      	strh	r2, [r3, #16]
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);
 8000ff4:	4bad      	ldr	r3, [pc, #692]	; (80012ac <ReadInputs+0x2e4>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001000:	48ab      	ldr	r0, [pc, #684]	; (80012b0 <ReadInputs+0x2e8>)
 8001002:	f000 fb9f 	bl	8001744 <MyHalfBufferAverage>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	825a      	strh	r2, [r3, #18]
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);
 800100e:	4ba7      	ldr	r3, [pc, #668]	; (80012ac <ReadInputs+0x2e4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	2302      	movs	r3, #2
 8001016:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800101a:	48a5      	ldr	r0, [pc, #660]	; (80012b0 <ReadInputs+0x2e8>)
 800101c:	f000 fb92 	bl	8001744 <MyHalfBufferAverage>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	829a      	strh	r2, [r3, #20]
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <ReadInputs+0x2e4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	2303      	movs	r3, #3
 8001030:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001034:	489e      	ldr	r0, [pc, #632]	; (80012b0 <ReadInputs+0x2e8>)
 8001036:	f000 fb85 	bl	8001744 <MyHalfBufferAverage>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	82da      	strh	r2, [r3, #22]

	//Voltage Conversion
	inputs->VSIUAnalog01 = (float)(inputs->NADCChannel01Raw * 3.3 / 4095.0);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8a1b      	ldrh	r3, [r3, #16]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9d4 	bl	80003f4 <__aeabi_i2d>
 800104c:	a392      	add	r3, pc, #584	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa39 	bl	80004c8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	a390      	add	r3, pc, #576	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fb5a 	bl	800071c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fc64 	bl	800093c <__aeabi_d2f>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
	inputs->VSIUAnalog02 = (float)(inputs->NADCChannel02Raw * 3.3 / 4095.0);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8a5b      	ldrh	r3, [r3, #18]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9b8 	bl	80003f4 <__aeabi_i2d>
 8001084:	a384      	add	r3, pc, #528	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fa1d 	bl	80004c8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a382      	add	r3, pc, #520	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fb3e 	bl	800071c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc48 	bl	800093c <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
	inputs->VSIUAnalog03 = (float)(inputs->NADCChannel03Raw * 3.3 / 4095.0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8a9b      	ldrh	r3, [r3, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f99c 	bl	80003f4 <__aeabi_i2d>
 80010bc:	a376      	add	r3, pc, #472	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa01 	bl	80004c8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a374      	add	r3, pc, #464	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fb22 	bl	800071c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc2c 	bl	800093c <__aeabi_d2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
	inputs->VSIUAnalog04 = (float)(inputs->NADCChannel04Raw * 3.3 / 4095.0);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8adb      	ldrh	r3, [r3, #22]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f980 	bl	80003f4 <__aeabi_i2d>
 80010f4:	a368      	add	r3, pc, #416	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	a366      	add	r3, pc, #408	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb06 	bl	800071c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fc10 	bl	800093c <__aeabi_d2f>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60da      	str	r2, [r3, #12]

	//Digital Read (we invert the logic to read 1 when it goes to GND, because of the pull ups)
	inputs->BSIUDIN01 = !HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001122:	2104      	movs	r1, #4
 8001124:	4863      	ldr	r0, [pc, #396]	; (80012b4 <ReadInputs+0x2ec>)
 8001126:	f003 fbd7 	bl	80048d8 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	761a      	strb	r2, [r3, #24]
	inputs->BSIUDIN02 = !HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800113c:	2102      	movs	r1, #2
 800113e:	485d      	ldr	r0, [pc, #372]	; (80012b4 <ReadInputs+0x2ec>)
 8001140:	f003 fbca 	bl	80048d8 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	765a      	strb	r2, [r3, #25]
	inputs->BSIUDIN03 = !HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 8001156:	2101      	movs	r1, #1
 8001158:	4856      	ldr	r0, [pc, #344]	; (80012b4 <ReadInputs+0x2ec>)
 800115a:	f003 fbbd 	bl	80048d8 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	769a      	strb	r2, [r3, #26]
	inputs->BSIUDIN04 = !HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 8001170:	2108      	movs	r1, #8
 8001172:	4850      	ldr	r0, [pc, #320]	; (80012b4 <ReadInputs+0x2ec>)
 8001174:	f003 fbb0 	bl	80048d8 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	76da      	strb	r2, [r3, #27]
	inputs->BSIUDIN05 = !HAL_GPIO_ReadPin(DIN05_GPIO_Port, DIN05_Pin);
 800118a:	2110      	movs	r1, #16
 800118c:	4849      	ldr	r0, [pc, #292]	; (80012b4 <ReadInputs+0x2ec>)
 800118e:	f003 fba3 	bl	80048d8 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	771a      	strb	r2, [r3, #28]
	inputs->BSIUDIN06 = !HAL_GPIO_ReadPin(DIN06_GPIO_Port, DIN06_Pin);
 80011a4:	2120      	movs	r1, #32
 80011a6:	4843      	ldr	r0, [pc, #268]	; (80012b4 <ReadInputs+0x2ec>)
 80011a8:	f003 fb96 	bl	80048d8 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	775a      	strb	r2, [r3, #29]
	inputs->BSIUDIN07 = !HAL_GPIO_ReadPin(DIN07_GPIO_Port, DIN07_Pin);
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	483c      	ldr	r0, [pc, #240]	; (80012b4 <ReadInputs+0x2ec>)
 80011c2:	f003 fb89 	bl	80048d8 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	779a      	strb	r2, [r3, #30]
	inputs->BSIUDIN08 = !HAL_GPIO_ReadPin(DIN08_GPIO_Port, DIN08_Pin);
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	4836      	ldr	r0, [pc, #216]	; (80012b4 <ReadInputs+0x2ec>)
 80011dc:	f003 fb7c 	bl	80048d8 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	77da      	strb	r2, [r3, #31]

	// Digital Outputs
	inputs->BSIUDO01Demand = BDO01Demand;
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <ReadInputs+0x2f0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
	inputs->BSIUDO02Demand = BDO02Demand;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <ReadInputs+0x2f4>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	inputs->BSIUDO03Demand = BDO03Demand;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <ReadInputs+0x2f8>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	inputs->BSIUDO04Demand = BDO04Demand;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <ReadInputs+0x2fc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	// ---------------------------------------------------------------------------------------------------
	//Clutch Paddle

	inputs->VrClutchPaddle = inputs->VSIUAnalog01;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28

	//Mapping
	inputs->BrClutchPaddleInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddle, &(inputs->rClutchPaddleRaw), VrCLUTCH_MARGIN_MIN, VrCLUTCH_MARGIN_MAX);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	332c      	adds	r3, #44	; 0x2c
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <ReadInputs+0x300>)
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	4924      	ldr	r1, [pc, #144]	; (80012c8 <ReadInputs+0x300>)
 8001238:	9100      	str	r1, [sp, #0]
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <ReadInputs+0x304>)
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fcf1 	bl	8001c24 <My2DMapInterpolate>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Conversion from Float to int8_t
	inputs->rClutchPaddle = (int8_t)round(inputs->rClutchPaddleRaw);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f8e1 	bl	8000418 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f005 fabf 	bl	80067e0 <round>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fb3f 	bl	80008ec <__aeabi_d2iz>
 800126e:	4603      	mov	r3, r0
 8001270:	b25a      	sxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	//Clamping
	inputs->rClutchPaddle = CLAMP(inputs->rClutchPaddle, CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800127e:	2b67      	cmp	r3, #103	; 0x67
 8001280:	dc26      	bgt.n	80012d0 <ReadInputs+0x308>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001288:	f06f 0203 	mvn.w	r2, #3
 800128c:	4293      	cmp	r3, r2
 800128e:	bfb8      	it	lt
 8001290:	4613      	movlt	r3, r2
 8001292:	b25a      	sxtb	r2, r3
 8001294:	e01d      	b.n	80012d2 <ReadInputs+0x30a>
 8001296:	bf00      	nop
 8001298:	66666666 	.word	0x66666666
 800129c:	400a6666 	.word	0x400a6666
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40affe00 	.word	0x40affe00
 80012a8:	20000084 	.word	0x20000084
 80012ac:	200000b8 	.word	0x200000b8
 80012b0:	20000284 	.word	0x20000284
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	200000b0 	.word	0x200000b0
 80012bc:	200000b2 	.word	0x200000b2
 80012c0:	200000b1 	.word	0x200000b1
 80012c4:	200000b3 	.word	0x200000b3
 80012c8:	3dcccccd 	.word	0x3dcccccd
 80012cc:	080068a4 	.word	0x080068a4
 80012d0:	2268      	movs	r2, #104	; 0x68
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSIUAnalog04 * VSUPPLY_DIVIDER_GAIN;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4994      	ldr	r1, [pc, #592]	; (8001530 <ReadInputs+0x568>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fc8a 	bl	8000bf8 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	649a      	str	r2, [r3, #72]	; 0x48

	// ---------------------------------------------------------------------------------------------------
	// SIU Inputs

	// Up Shift Button
	if(inputs->BSIUDIN01 && tUpButtonTimer < tInputsTimer && !inputs->BUpShiftButtonState) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01c      	beq.n	800132e <ReadInputs+0x366>
 80012f4:	4b8f      	ldr	r3, [pc, #572]	; (8001534 <ReadInputs+0x56c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b8f      	ldr	r3, [pc, #572]	; (8001538 <ReadInputs+0x570>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d216      	bcs.n	800132e <ReadInputs+0x366>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001306:	2b00      	cmp	r3, #0
 8001308:	d111      	bne.n	800132e <ReadInputs+0x366>
		inputs->BUpShiftButtonState = 1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->BUpShiftButtonPressed = 1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		tUpButtonTimer = tInputsTimer;
 800131a:	4b87      	ldr	r3, [pc, #540]	; (8001538 <ReadInputs+0x570>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a85      	ldr	r2, [pc, #532]	; (8001534 <ReadInputs+0x56c>)
 8001320:	6013      	str	r3, [r2, #0]
		tUpButtonTimer += UP_BUTTON_DEBOUNCE;
 8001322:	4b84      	ldr	r3, [pc, #528]	; (8001534 <ReadInputs+0x56c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3332      	adds	r3, #50	; 0x32
 8001328:	4a82      	ldr	r2, [pc, #520]	; (8001534 <ReadInputs+0x56c>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e014      	b.n	8001358 <ReadInputs+0x390>
	}
	else if(!inputs->BSIUDIN01 && inputs->BUpShiftButtonState) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d110      	bne.n	8001358 <ReadInputs+0x390>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <ReadInputs+0x390>
		inputs->BUpShiftButtonState = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->BUpShiftButtonPressed = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		tUpButtonStuckTimmer = tInputsTimer;
 8001350:	4b79      	ldr	r3, [pc, #484]	; (8001538 <ReadInputs+0x570>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a79      	ldr	r2, [pc, #484]	; (800153c <ReadInputs+0x574>)
 8001356:	6013      	str	r3, [r2, #0]
	}
	// Auto reset Strategy
	if(inputs->BUpShiftButtonPressed && (tUpButtonTimer + UP_BUTTON_RESET_TIMEOUT) < tInputsTimer) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <ReadInputs+0x3b2>
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <ReadInputs+0x56c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <ReadInputs+0x570>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d203      	bcs.n	800137a <ReadInputs+0x3b2>
		inputs->BUpShiftButtonPressed = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
	// Stuck Detection
	if(inputs->BUpShiftButtonState && (tUpButtonTimer + UP_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00b      	beq.n	800139c <ReadInputs+0x3d4>
 8001384:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <ReadInputs+0x56c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f203 729e 	addw	r2, r3, #1950	; 0x79e
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <ReadInputs+0x570>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d203      	bcs.n	800139c <ReadInputs+0x3d4>
		inputs->BUpShiftButtonInError = 1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	if(!inputs->BUpShiftButtonState && (tUpButtonStuckTimmer + UP_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10b      	bne.n	80013be <ReadInputs+0x3f6>
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <ReadInputs+0x574>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f203 729e 	addw	r2, r3, #1950	; 0x79e
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <ReadInputs+0x570>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d203      	bcs.n	80013be <ReadInputs+0x3f6>
		inputs->BUpShiftButtonInError = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	// Down Shift Button
	if(inputs->BSIUDIN02 && tDnButtonTimer < tInputsTimer && !inputs->BDnShiftButtonState) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01c      	beq.n	8001400 <ReadInputs+0x438>
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <ReadInputs+0x578>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <ReadInputs+0x570>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d216      	bcs.n	8001400 <ReadInputs+0x438>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <ReadInputs+0x438>
		inputs->BDnShiftButtonState = 1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		inputs->BDnShiftButtonPressed = 1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tDnButtonTimer = tInputsTimer;
 80013ec:	4b52      	ldr	r3, [pc, #328]	; (8001538 <ReadInputs+0x570>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a53      	ldr	r2, [pc, #332]	; (8001540 <ReadInputs+0x578>)
 80013f2:	6013      	str	r3, [r2, #0]
		tDnButtonTimer += DN_BUTTON_DEBOUNCE;
 80013f4:	4b52      	ldr	r3, [pc, #328]	; (8001540 <ReadInputs+0x578>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3332      	adds	r3, #50	; 0x32
 80013fa:	4a51      	ldr	r2, [pc, #324]	; (8001540 <ReadInputs+0x578>)
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e010      	b.n	8001422 <ReadInputs+0x45a>
	}
	else if(!inputs->BSIUDIN02 && inputs->BDnShiftButtonState) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e5b      	ldrb	r3, [r3, #25]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10c      	bne.n	8001422 <ReadInputs+0x45a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <ReadInputs+0x45a>
		inputs->BDnShiftButtonState = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		inputs->BDnShiftButtonPressed = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	// Auto reset Strategy
	if(inputs->BDnShiftButtonPressed && (tDnButtonTimer + DN_BUTTON_RESET_TIMEOUT) < tInputsTimer) {
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <ReadInputs+0x47c>
 800142c:	4b44      	ldr	r3, [pc, #272]	; (8001540 <ReadInputs+0x578>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <ReadInputs+0x570>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d203      	bcs.n	8001444 <ReadInputs+0x47c>
		inputs->BDnShiftButtonPressed = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	// Stuck Detection
	if(inputs->BDnShiftButtonState && (tDnButtonTimer + DN_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <ReadInputs+0x49e>
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <ReadInputs+0x578>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f203 729e 	addw	r2, r3, #1950	; 0x79e
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <ReadInputs+0x570>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d203      	bcs.n	8001466 <ReadInputs+0x49e>
		inputs->BDnShiftButtonInError = 1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
	if(!inputs->BDnShiftButtonState && (tDnButtonStuckTimmer + DN_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10b      	bne.n	8001488 <ReadInputs+0x4c0>
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <ReadInputs+0x57c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f203 729e 	addw	r2, r3, #1950	; 0x79e
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <ReadInputs+0x570>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d203      	bcs.n	8001488 <ReadInputs+0x4c0>
		inputs->BDnShiftButtonInError = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	// Button A
	if(inputs->BSIUDIN03 && tButtonATimer < tInputsTimer && !inputs->BButtonAState) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e9b      	ldrb	r3, [r3, #26]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01c      	beq.n	80014ca <ReadInputs+0x502>
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <ReadInputs+0x580>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <ReadInputs+0x570>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d216      	bcs.n	80014ca <ReadInputs+0x502>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d111      	bne.n	80014ca <ReadInputs+0x502>
		inputs->BButtonAState = 1;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		inputs->BButtonAPressed = 1;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		tButtonATimer = tInputsTimer;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <ReadInputs+0x570>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <ReadInputs+0x580>)
 80014bc:	6013      	str	r3, [r2, #0]
		tButtonATimer += BUTTON_A_DEBOUNCE;
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <ReadInputs+0x580>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3364      	adds	r3, #100	; 0x64
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <ReadInputs+0x580>)
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e010      	b.n	80014ec <ReadInputs+0x524>
	}
	else if(!inputs->BSIUDIN03 && inputs->BButtonAState) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7e9b      	ldrb	r3, [r3, #26]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <ReadInputs+0x524>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <ReadInputs+0x524>
		inputs->BButtonAState = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		inputs->BButtonAPressed = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

	// Button B
	if(inputs->BSIUDIN04 && tButtonBTimer < tInputsTimer && !inputs->BButtonBState) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7edb      	ldrb	r3, [r3, #27]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d02d      	beq.n	8001550 <ReadInputs+0x588>
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <ReadInputs+0x584>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <ReadInputs+0x570>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d227      	bcs.n	8001550 <ReadInputs+0x588>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d122      	bne.n	8001550 <ReadInputs+0x588>
		inputs->BButtonBState = 1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		inputs->BButtonBPressed = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		tButtonBTimer = tInputsTimer;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <ReadInputs+0x570>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <ReadInputs+0x584>)
 8001520:	6013      	str	r3, [r2, #0]
		tButtonBTimer += BUTTON_B_DEBOUNCE;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <ReadInputs+0x584>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3364      	adds	r3, #100	; 0x64
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <ReadInputs+0x584>)
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e021      	b.n	8001572 <ReadInputs+0x5aa>
 800152e:	bf00      	nop
 8001530:	3e6c4ef9 	.word	0x3e6c4ef9
 8001534:	20000088 	.word	0x20000088
 8001538:	20000084 	.word	0x20000084
 800153c:	2000008c 	.word	0x2000008c
 8001540:	20000090 	.word	0x20000090
 8001544:	20000094 	.word	0x20000094
 8001548:	20000098 	.word	0x20000098
 800154c:	2000009c 	.word	0x2000009c
	}
	else if(!inputs->BSIUDIN04 && inputs->BButtonBState) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7edb      	ldrb	r3, [r3, #27]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <ReadInputs+0x5aa>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <ReadInputs+0x5aa>
		inputs->BButtonBState = 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		inputs->BButtonBPressed = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	// Button C
	if(inputs->BSIUDIN05 && tButtonCTimer < tInputsTimer && !inputs->BButtonCState) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7f1b      	ldrb	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <ReadInputs+0x5ec>
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <ReadInputs+0x744>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b64      	ldr	r3, [pc, #400]	; (8001710 <ReadInputs+0x748>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d216      	bcs.n	80015b4 <ReadInputs+0x5ec>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <ReadInputs+0x5ec>
		inputs->BButtonCState = 1;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		inputs->BButtonCPressed = 1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		tButtonCTimer = tInputsTimer;
 80015a0:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <ReadInputs+0x748>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a59      	ldr	r2, [pc, #356]	; (800170c <ReadInputs+0x744>)
 80015a6:	6013      	str	r3, [r2, #0]
		tButtonCTimer += BUTTON_C_DEBOUNCE;
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <ReadInputs+0x744>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3364      	adds	r3, #100	; 0x64
 80015ae:	4a57      	ldr	r2, [pc, #348]	; (800170c <ReadInputs+0x744>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e010      	b.n	80015d6 <ReadInputs+0x60e>
	}
	else if(!inputs->BSIUDIN05 && inputs->BButtonCState) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7f1b      	ldrb	r3, [r3, #28]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <ReadInputs+0x60e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <ReadInputs+0x60e>
		inputs->BButtonCState = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		inputs->BButtonCPressed = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// Button D
	if(inputs->BSIUDIN06 && tButtonDTimer < tInputsTimer && !inputs->BButtonDState) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7f5b      	ldrb	r3, [r3, #29]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01c      	beq.n	8001618 <ReadInputs+0x650>
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <ReadInputs+0x74c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <ReadInputs+0x748>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d216      	bcs.n	8001618 <ReadInputs+0x650>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <ReadInputs+0x650>
		inputs->BButtonDState = 1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		inputs->BButtonDPressed = 1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tButtonDTimer = tInputsTimer;
 8001604:	4b42      	ldr	r3, [pc, #264]	; (8001710 <ReadInputs+0x748>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <ReadInputs+0x74c>)
 800160a:	6013      	str	r3, [r2, #0]
		tButtonDTimer += BUTTON_D_DEBOUNCE;
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <ReadInputs+0x74c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3364      	adds	r3, #100	; 0x64
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <ReadInputs+0x74c>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e010      	b.n	800163a <ReadInputs+0x672>
	}
	else if(!inputs->BSIUDIN06 && inputs->BButtonDState) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f5b      	ldrb	r3, [r3, #29]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <ReadInputs+0x672>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <ReadInputs+0x672>
		inputs->BButtonDState = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		inputs->BButtonDPressed = 0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	// Button E
	if(inputs->BSIUDIN07 && tButtonETimer < tInputsTimer && !inputs->BButtonEState) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7f9b      	ldrb	r3, [r3, #30]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01c      	beq.n	800167c <ReadInputs+0x6b4>
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <ReadInputs+0x750>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <ReadInputs+0x748>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d216      	bcs.n	800167c <ReadInputs+0x6b4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <ReadInputs+0x6b4>
		inputs->BButtonEState = 1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		inputs->BButtonEPressed = 1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tButtonETimer = tInputsTimer;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <ReadInputs+0x748>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <ReadInputs+0x750>)
 800166e:	6013      	str	r3, [r2, #0]
		tButtonETimer += BUTTON_E_DEBOUNCE;
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <ReadInputs+0x750>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3364      	adds	r3, #100	; 0x64
 8001676:	4a28      	ldr	r2, [pc, #160]	; (8001718 <ReadInputs+0x750>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e010      	b.n	800169e <ReadInputs+0x6d6>
	}
	else if(!inputs->BSIUDIN07 && inputs->BButtonEState) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7f9b      	ldrb	r3, [r3, #30]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <ReadInputs+0x6d6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <ReadInputs+0x6d6>
		inputs->BButtonEState = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		inputs->BButtonEPressed = 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	// Button F
	if(inputs->BSIUDIN08 && tButtonFTimer < tInputsTimer && !inputs->BButtonFState) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7fdb      	ldrb	r3, [r3, #31]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01c      	beq.n	80016e0 <ReadInputs+0x718>
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <ReadInputs+0x754>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <ReadInputs+0x748>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d216      	bcs.n	80016e0 <ReadInputs+0x718>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <ReadInputs+0x718>
		inputs->BButtonFState = 1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		inputs->BButtonFPressed = 1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		tButtonFTimer = tInputsTimer;
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <ReadInputs+0x748>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <ReadInputs+0x754>)
 80016d2:	6013      	str	r3, [r2, #0]
		tButtonFTimer += BUTTON_F_DEBOUNCE;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <ReadInputs+0x754>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3364      	adds	r3, #100	; 0x64
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <ReadInputs+0x754>)
 80016dc:	6013      	str	r3, [r2, #0]
		inputs->BButtonFState = 0;
		inputs->BButtonFPressed = 0;
	}

	// ---------------------------------------------------------------------------------------------------
}
 80016de:	e010      	b.n	8001702 <ReadInputs+0x73a>
	else if(!inputs->BSIUDIN08 && inputs->BButtonFState) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7fdb      	ldrb	r3, [r3, #31]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10c      	bne.n	8001702 <ReadInputs+0x73a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <ReadInputs+0x73a>
		inputs->BButtonFState = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		inputs->BButtonFPressed = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000a0 	.word	0x200000a0
 8001710:	20000084 	.word	0x20000084
 8001714:	200000a4 	.word	0x200000a4
 8001718:	200000a8 	.word	0x200000a8
 800171c:	200000ac 	.word	0x200000ac

08001720 <InitInputs>:


void InitInputs(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <InitInputs+0x1c>)
 8001726:	f001 fd03 	bl	8003130 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800172a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800172e:	4904      	ldr	r1, [pc, #16]	; (8001740 <InitInputs+0x20>)
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <InitInputs+0x1c>)
 8001732:	f001 fa13 	bl	8002b5c <HAL_ADC_Start_DMA>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000c8 	.word	0x200000c8
 8001740:	20000284 	.word	0x20000284

08001744 <MyHalfBufferAverage>:


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	807b      	strh	r3, [r7, #2]
 8001756:	460b      	mov	r3, r1
 8001758:	707b      	strb	r3, [r7, #1]
 800175a:	4613      	mov	r3, r2
 800175c:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8001762:	787b      	ldrb	r3, [r7, #1]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <MyHalfBufferAverage+0x28>
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	e000      	b.n	800176e <MyHalfBufferAverage+0x2a>
 800176c:	2300      	movs	r3, #0
 800176e:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8001776:	2300      	movs	r3, #0
 8001778:	827b      	strh	r3, [r7, #18]
 800177a:	e010      	b.n	800179e <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 800177c:	8a7b      	ldrh	r3, [r7, #18]
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	783b      	ldrb	r3, [r7, #0]
 8001782:	441a      	add	r2, r3
 8001784:	8a3b      	ldrh	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8001798:	8a7b      	ldrh	r3, [r7, #18]
 800179a:	3301      	adds	r3, #1
 800179c:	827b      	strh	r3, [r7, #18]
 800179e:	8a7a      	ldrh	r2, [r7, #18]
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3ea      	bcc.n	800177c <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	b29b      	uxth	r3, r3

}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	f107 0214 	add.w	r2, r7, #20
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f002 f8a8 	bl	800392a <HAL_CAN_GetRxMessage>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <CAN_RX+0x80>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <CAN_RX+0x80>)
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	e023      	b.n	8001838 <CAN_RX+0x78>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80017f6:	d11e      	bne.n	8001836 <CAN_RX+0x76>

	 case SIU_RX_ID :

		 BDO01Demand = (RxBuffer[0] >> 0) & 0x01;
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <CAN_RX+0x84>)
 8001802:	701a      	strb	r2, [r3, #0]
		 BDO02Demand = (RxBuffer[0] >> 1) & 0x01;
 8001804:	7b3b      	ldrb	r3, [r7, #12]
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <CAN_RX+0x88>)
 8001812:	701a      	strb	r2, [r3, #0]
		 BDO03Demand = (RxBuffer[0] >> 2) & 0x01;
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <CAN_RX+0x8c>)
 8001822:	701a      	strb	r2, [r3, #0]
		 BDO04Demand = (RxBuffer[0] >> 3) & 0x01;
 8001824:	7b3b      	ldrb	r3, [r7, #12]
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <CAN_RX+0x90>)
 8001832:	701a      	strb	r2, [r3, #0]

		 break;
 8001834:	e000      	b.n	8001838 <CAN_RX+0x78>

	 default:
		 break;
 8001836:	bf00      	nop
	 }
}
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200000b6 	.word	0x200000b6
 8001844:	200000b0 	.word	0x200000b0
 8001848:	200000b2 	.word	0x200000b2
 800184c:	200000b1 	.word	0x200000b1
 8001850:	200000b3 	.word	0x200000b3

08001854 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffae 	bl	80017c0 <CAN_RX>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8001874:	2101      	movs	r1, #1
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <CAN_RX>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_CAN_ErrorCallback+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_CAN_ErrorCallback+0x20>)
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	200000b4 	.word	0x200000b4

080018a8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d107      	bne.n	80018c8 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f083 0301 	eor.w	r3, r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80018c6:	701a      	strb	r2, [r3, #0]
	}
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200000c8 	.word	0x200000c8
 80018d8:	200000b8 	.word	0x200000b8

080018dc <InitOutput>:

uint32_t nCanTxErrorCount=0;
uint32_t nCanOldestMailbox=4, nCanSecondOldestMailbox=2, nCanYoungestMailbox=1;


void InitOutput() {
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <Output>:
void Output(InputStruct* inputs) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

	// Digital Outputs
	HAL_GPIO_WritePin(DO01_GPIO_Port, DO01_Pin, inputs->BSIUDO01Demand);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fc:	4884      	ldr	r0, [pc, #528]	; (8001b10 <Output+0x228>)
 80018fe:	f003 f802 	bl	8004906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, inputs->BSIUDO02Demand);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	4880      	ldr	r0, [pc, #512]	; (8001b10 <Output+0x228>)
 8001910:	f002 fff9 	bl	8004906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, inputs->BSIUDO03Demand);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800191a:	461a      	mov	r2, r3
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	487b      	ldr	r0, [pc, #492]	; (8001b10 <Output+0x228>)
 8001922:	f002 fff0 	bl	8004906 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO04_GPIO_Port, DO04_Pin, inputs->BSIUDO04Demand);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001932:	4877      	ldr	r0, [pc, #476]	; (8001b10 <Output+0x228>)
 8001934:	f002 ffe7 	bl	8004906 <HAL_GPIO_WritePin>


	// CAN
	CANTxBuffer[0] = 0;
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <Output+0x22c>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BUpShiftButtonInError 	& 0x01) << 0;
 800193e:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <Output+0x22c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b25a      	sxtb	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194a:	b25b      	sxtb	r3, r3
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b25b      	sxtb	r3, r3
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b6e      	ldr	r3, [pc, #440]	; (8001b14 <Output+0x22c>)
 800195a:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BDnShiftButtonInError 	& 0x01) << 1;
 800195c:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <Output+0x22c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25a      	sxtb	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b25b      	sxtb	r3, r3
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	b25b      	sxtb	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b25b      	sxtb	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b66      	ldr	r3, [pc, #408]	; (8001b14 <Output+0x22c>)
 800197a:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							  	& 0x01) << 2;
 800197c:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <Output+0x22c>)
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <Output+0x22c>)
 8001982:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 3;
 8001984:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <Output+0x22c>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <Output+0x22c>)
 800198a:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							    & 0x01) << 4;
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <Output+0x22c>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <Output+0x22c>)
 8001992:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 5;
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <Output+0x22c>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <Output+0x22c>)
 800199a:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BrClutchPaddleInError	& 0x01) << 6;
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <Output+0x22c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25a      	sxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a8:	019b      	lsls	r3, r3, #6
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <Output+0x22c>)
 80019ba:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 7;
 80019bc:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <Output+0x22c>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <Output+0x22c>)
 80019c2:	701a      	strb	r2, [r3, #0]

	CANTxBuffer[1] = 0;
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <Output+0x22c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BUpShiftButtonPressed 	& 0x01) << 0;
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <Output+0x22c>)
 80019cc:	785b      	ldrb	r3, [r3, #1]
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <Output+0x22c>)
 80019e6:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BDnShiftButtonPressed 	& 0x01) << 1;
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <Output+0x22c>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <Output+0x22c>)
 8001a06:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonAPressed  		& 0x01) << 2;
 8001a08:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <Output+0x22c>)
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	b25a      	sxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <Output+0x22c>)
 8001a26:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonBPressed 			& 0x01) << 3;
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <Output+0x22c>)
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	b25a      	sxtb	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <Output+0x22c>)
 8001a46:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonCPressed   		& 0x01) << 4;
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <Output+0x22c>)
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <Output+0x22c>)
 8001a66:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonDPressed			& 0x01) << 5;
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <Output+0x22c>)
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	b25a      	sxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <Output+0x22c>)
 8001a86:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonEPressed			& 0x01) << 6;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <Output+0x22c>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001a94:	019b      	lsls	r3, r3, #6
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <Output+0x22c>)
 8001aa6:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonFPressed			& 0x01) << 7;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <Output+0x22c>)
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab4:	01db      	lsls	r3, r3, #7
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <Output+0x22c>)
 8001ac0:	705a      	strb	r2, [r3, #1]

	CANTxBuffer[2] = inputs->rClutchPaddle;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <Output+0x22c>)
 8001acc:	709a      	strb	r2, [r3, #2]

	uint16_t VSupplyCAN = (uint16_t)(inputs->VSupply * 1000);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	4911      	ldr	r1, [pc, #68]	; (8001b18 <Output+0x230>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f88f 	bl	8000bf8 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fa51 	bl	8000f84 <__aeabi_f2uiz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	81fb      	strh	r3, [r7, #14]

	CANTxBuffer[3] = (VSupplyCAN & 0xFF00) >> 8;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <Output+0x22c>)
 8001af0:	70da      	strb	r2, [r3, #3]
	CANTxBuffer[4] = (VSupplyCAN & 0x00FF) >> 0;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <Output+0x22c>)
 8001af8:	711a      	strb	r2, [r3, #4]

	CAN_TX(SHIFTER_TX_ID, 8, CANTxBuffer);
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <Output+0x22c>)
 8001afc:	2108      	movs	r1, #8
 8001afe:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001b02:	f000 f80b 	bl	8001b1c <CAN_TX>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	200000bc 	.word	0x200000bc
 8001b18:	447a0000 	.word	0x447a0000

08001b1c <CAN_TX>:


void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	460b      	mov	r3, r1
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <CAN_TX+0xc4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	33c8      	adds	r3, #200	; 0xc8
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 8001b44:	bf00      	nop
 8001b46:	4827      	ldr	r0, [pc, #156]	; (8001be4 <CAN_TX+0xc8>)
 8001b48:	f001 febb 	bl	80038c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <CAN_TX+0x42>
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <CAN_TX+0xc4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8f3      	bhi.n	8001b46 <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8001b5e:	4821      	ldr	r0, [pc, #132]	; (8001be4 <CAN_TX+0xc8>)
 8001b60:	f001 feaf 	bl	80038c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <CAN_TX+0xcc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <CAN_TX+0xc8>)
 8001b72:	f001 fe62 	bl	800383a <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	f107 0114 	add.w	r1, r7, #20
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <CAN_TX+0xc8>)
 8001b82:	f001 fd8b 	bl	800369c <HAL_CAN_AddTxMessage>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 8001b8c:	4817      	ldr	r0, [pc, #92]	; (8001bec <CAN_TX+0xd0>)
 8001b8e:	f000 f835 	bl	8001bfc <print>
		nCanTxErrorCount++;
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <CAN_TX+0xd4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <CAN_TX+0xd4>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e01c      	b.n	8001bd8 <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <CAN_TX+0xd8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d017      	beq.n	8001bd8 <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <CAN_TX+0xdc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d00b      	beq.n	8001bca <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <CAN_TX+0xdc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <CAN_TX+0xcc>)
 8001bb8:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <CAN_TX+0xd8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <CAN_TX+0xdc>)
 8001bc0:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <CAN_TX+0xd8>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e006      	b.n	8001bd8 <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <CAN_TX+0xd8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <CAN_TX+0xdc>)
 8001bd0:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <CAN_TX+0xd8>)
 8001bd6:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001ac 	.word	0x200001ac
 8001be4:	2000013c 	.word	0x2000013c
 8001be8:	20000000 	.word	0x20000000
 8001bec:	08006884 	.word	0x08006884
 8001bf0:	200000c4 	.word	0x200000c4
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8001bfc:	b40f      	push	{r0, r1, r2, r3}
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b09a      	sub	sp, #104	; 0x68
 8001c02:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8001c04:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c08:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c10:	4618      	mov	r0, r3
 8001c12:	f004 f949 	bl	8005ea8 <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 8001c16:	bf00      	nop
 8001c18:	3768      	adds	r7, #104	; 0x68
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c20:	b004      	add	sp, #16
 8001c22:	4770      	bx	lr

08001c24 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	68fe      	ldr	r6, [r7, #12]
 8001c34:	1e73      	subs	r3, r6, #1
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	4632      	mov	r2, r6
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	016b      	lsls	r3, r5, #5
 8001c4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001c4e:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fec4 	bl	80009e4 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff f967 	bl	8000f34 <__aeabi_fcmplt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8001c6c:	4633      	mov	r3, r6
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	601a      	str	r2, [r3, #0]
		return 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07b      	b.n	8001d76 <My2DMapInterpolate+0x152>
	}
	if(input > map[0][size-1] + maxMargin) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe feac 	bl	80009e8 <__addsf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff f96b 	bl	8000f70 <__aeabi_fcmpgt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8001ca0:	4633      	mov	r3, r6
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	3a01      	subs	r2, #1
 8001cac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
		return 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e05e      	b.n	8001d76 <My2DMapInterpolate+0x152>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size--; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e00e      	b.n	8001cdc <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f932 	bl	8000f34 <__aeabi_fcmplt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <My2DMapInterpolate+0xc6>
	for(i=0; i<size--; i++) {
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	60fa      	str	r2, [r7, #12]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbea      	blt.n	8001cbe <My2DMapInterpolate+0x9a>
 8001ce8:	e000      	b.n	8001cec <My2DMapInterpolate+0xc8>
			break;
 8001cea:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe fe70 	bl	80009e4 <__aeabi_fsub>
 8001d04:	4603      	mov	r3, r0
 8001d06:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8001d08:	4633      	mov	r3, r6
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	3201      	adds	r2, #1
 8001d14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d18:	4633      	mov	r3, r6
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	4413      	add	r3, r2
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe fe5c 	bl	80009e4 <__aeabi_fsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8001d30:	4633      	mov	r3, r6
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	4413      	add	r3, r2
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d46:	4619      	mov	r1, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fe4b 	bl	80009e4 <__aeabi_fsub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe ff50 	bl	8000bf8 <__aeabi_fmul>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe ffff 	bl	8000d60 <__aeabi_fdiv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7fe fe3e 	bl	80009e8 <__addsf3>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	601a      	str	r2, [r3, #0]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d84:	f3bf 8f4f 	dsb	sy
}
 8001d88:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <__NVIC_SystemReset+0x24>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d92:	4904      	ldr	r1, [pc, #16]	; (8001da4 <__NVIC_SystemReset+0x24>)
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_SystemReset+0x28>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d9a:	f3bf 8f4f 	dsb	sy
}
 8001d9e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <__NVIC_SystemReset+0x20>
 8001da4:	e000ed00 	.word	0xe000ed00
 8001da8:	05fa0004 	.word	0x05fa0004

08001dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db0:	f000 fd76 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db4:	f000 f832 	bl	8001e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db8:	f000 fac8 	bl	800234c <MX_GPIO_Init>
  MX_DMA_Init();
 8001dbc:	f000 faa8 	bl	8002310 <MX_DMA_Init>
  MX_TIM2_Init();
 8001dc0:	f000 f9e0 	bl	8002184 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001dc4:	f000 f886 	bl	8001ed4 <MX_ADC1_Init>
  MX_CAN_Init();
 8001dc8:	f000 f8ee 	bl	8001fa8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001dcc:	f000 fa76 	bl	80022bc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001dd0:	f000 f988 	bl	80020e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001dd4:	f000 fa24 	bl	8002220 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <main+0x60>)
 8001dda:	f003 fb79 	bl	80054d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <main+0x64>)
 8001de0:	f003 fbc0 	bl	8005564 <HAL_TIM_Base_Start_IT>

  InitInputs();
 8001de4:	f7ff fc9c 	bl	8001720 <InitInputs>
  InitOutput();
 8001de8:	f7ff fd78 	bl	80018dc <InitOutput>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BCycleTimerFlag) {
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <main+0x68>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0fa      	beq.n	8001dec <main+0x40>
		  BCycleTimerFlag = 0;
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <main+0x68>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
		  ReadInputs(&Inputs);
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <main+0x6c>)
 8001dfe:	f7ff f8e3 	bl	8000fc8 <ReadInputs>
		  Output(&Inputs);
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <main+0x6c>)
 8001e04:	f7ff fd70 	bl	80018e8 <Output>
	  if(BCycleTimerFlag) {
 8001e08:	e7f0      	b.n	8001dec <main+0x40>
 8001e0a:	bf00      	nop
 8001e0c:	20000164 	.word	0x20000164
 8001e10:	200001f4 	.word	0x200001f4
 8001e14:	20001344 	.word	0x20001344
 8001e18:	20001348 	.word	0x20001348

08001e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b094      	sub	sp, #80	; 0x50
 8001e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e26:	2228      	movs	r2, #40	; 0x28
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 f846 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fd60 	bl	8004938 <HAL_RCC_OscConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e7e:	f000 fad7 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e82:	230f      	movs	r3, #15
 8001e84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 ffcc 	bl	8004e3c <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001eaa:	f000 fac1 	bl	8002430 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001eb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f94c 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ec6:	f000 fab3 	bl	8002430 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <MX_ADC1_Init+0xd0>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f00:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f0e:	2204      	movs	r2, #4
 8001f10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f14:	f000 fd4a 	bl	80029ac <HAL_ADC_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f1e:	f000 fa87 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	481b      	ldr	r0, [pc, #108]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f34:	f000 ff02 	bl	8002d3c <HAL_ADC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f000 fa77 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f46:	2302      	movs	r3, #2
 8001f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f50:	f000 fef4 	bl	8002d3c <HAL_ADC_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001f5a:	f000 fa69 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f62:	2303      	movs	r3, #3
 8001f64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f6c:	f000 fee6 	bl	8002d3c <HAL_ADC_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f76:	f000 fa5b 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_ADC1_Init+0xcc>)
 8001f88:	f000 fed8 	bl	8002d3c <HAL_ADC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001f92:	f000 fa4d 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000c8 	.word	0x200000c8
 8001fa4:	40012400 	.word	0x40012400

08001fa8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b094      	sub	sp, #80	; 0x50
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001fae:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <MX_CAN_Init+0x134>)
 8001fb0:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <MX_CAN_Init+0x138>)
 8001fb2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001fb4:	4b49      	ldr	r3, [pc, #292]	; (80020dc <MX_CAN_Init+0x134>)
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <MX_CAN_Init+0x134>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fc0:	4b46      	ldr	r3, [pc, #280]	; (80020dc <MX_CAN_Init+0x134>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <MX_CAN_Init+0x134>)
 8001fc8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001fcc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <MX_CAN_Init+0x134>)
 8001fd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fd4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <MX_CAN_Init+0x134>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <MX_CAN_Init+0x134>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <MX_CAN_Init+0x134>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <MX_CAN_Init+0x134>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <MX_CAN_Init+0x134>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <MX_CAN_Init+0x134>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001ffa:	4838      	ldr	r0, [pc, #224]	; (80020dc <MX_CAN_Init+0x134>)
 8001ffc:	f001 f946 	bl	800328c <HAL_CAN_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002006:	f000 fa13 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // SIU RECEIVE
     CAN_FilterTypeDef FilterConfig1;
     FilterConfig1.FilterIdHigh = SIU_RX_ID << 5 ;
 800200a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
     FilterConfig1.FilterIdLow = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
     FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8002014:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002018:	633b      	str	r3, [r7, #48]	; 0x30
     FilterConfig1.FilterMaskIdLow = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
     FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800201e:	2300      	movs	r3, #0
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
     FilterConfig1.FilterBank = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
     FilterConfig1.SlaveStartFilterBank = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
     FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 800202a:	2300      	movs	r3, #0
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
     FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 800202e:	2301      	movs	r3, #1
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
     FilterConfig1.FilterActivation = ENABLE;
 8002032:	2301      	movs	r3, #1
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8002036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800203a:	4619      	mov	r1, r3
 800203c:	4827      	ldr	r0, [pc, #156]	; (80020dc <MX_CAN_Init+0x134>)
 800203e:	f001 fa20 	bl	8003482 <HAL_CAN_ConfigFilter>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_CAN_Init+0xa4>
   	  Error_Handler();
 8002048:	f000 f9f2 	bl	8002430 <Error_Handler>
   	}

     CAN_FilterTypeDef FilterConfig11;
     FilterConfig11.FilterIdHigh = SIU_RX_ID << 5 ;
 800204c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002050:	603b      	str	r3, [r7, #0]
     FilterConfig11.FilterIdLow = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
     FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8002056:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800205a:	60bb      	str	r3, [r7, #8]
     FilterConfig11.FilterMaskIdLow = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
     FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
     FilterConfig11.FilterBank = 1;
 8002064:	2301      	movs	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
     FilterConfig11.SlaveStartFilterBank = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
     FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
     FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002070:	2301      	movs	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
     FilterConfig11.FilterActivation = ENABLE;
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002078:	463b      	mov	r3, r7
 800207a:	4619      	mov	r1, r3
 800207c:	4817      	ldr	r0, [pc, #92]	; (80020dc <MX_CAN_Init+0x134>)
 800207e:	f001 fa00 	bl	8003482 <HAL_CAN_ConfigFilter>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_CAN_Init+0xe4>
   	  Error_Handler();
 8002088:	f000 f9d2 	bl	8002430 <Error_Handler>
   	}

     // we activate the notifications (interrupts) for FIFO0
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800208c:	2102      	movs	r1, #2
 800208e:	4813      	ldr	r0, [pc, #76]	; (80020dc <MX_CAN_Init+0x134>)
 8002090:	f001 fd6c 	bl	8003b6c <HAL_CAN_ActivateNotification>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_CAN_Init+0xf6>
  	   Error_Handler();
 800209a:	f000 f9c9 	bl	8002430 <Error_Handler>
   	}
     // we activate the notifications (interrupts) for FIFO1
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800209e:	2110      	movs	r1, #16
 80020a0:	480e      	ldr	r0, [pc, #56]	; (80020dc <MX_CAN_Init+0x134>)
 80020a2:	f001 fd63 	bl	8003b6c <HAL_CAN_ActivateNotification>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_CAN_Init+0x108>
  	   Error_Handler();
 80020ac:	f000 f9c0 	bl	8002430 <Error_Handler>
   	}
     // we activate the notifications (interrupts) for all error codes
     if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 80020b0:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <MX_CAN_Init+0x134>)
 80020b6:	f001 fd59 	bl	8003b6c <HAL_CAN_ActivateNotification>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_CAN_Init+0x11c>
  	   Error_Handler();
 80020c0:	f000 f9b6 	bl	8002430 <Error_Handler>
     }
     // we start the CAN
     if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_CAN_Init+0x134>)
 80020c6:	f001 faa5 	bl	8003614 <HAL_CAN_Start>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_CAN_Init+0x12c>
   	  Error_Handler();
 80020d0:	f000 f9ae 	bl	8002430 <Error_Handler>
     }
  /* USER CODE END CAN_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	3750      	adds	r7, #80	; 0x50
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000013c 	.word	0x2000013c
 80020e0:	40006400 	.word	0x40006400

080020e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_TIM1_Init+0x98>)
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <MX_TIM1_Init+0x9c>)
 8002104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM1_Init+0x98>)
 8002108:	2247      	movs	r2, #71	; 0x47
 800210a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_TIM1_Init+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM1_Init+0x98>)
 8002114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_TIM1_Init+0x98>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_TIM1_Init+0x98>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM1_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <MX_TIM1_Init+0x98>)
 800212e:	f003 f97f 	bl	8005430 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002138:	f000 f97a 	bl	8002430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM1_Init+0x98>)
 800214a:	f003 fb65 	bl	8005818 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002154:	f000 f96c 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_TIM1_Init+0x98>)
 8002166:	f003 fd3b 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002170:	f000 f95e 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000164 	.word	0x20000164
 8002180:	40012c00 	.word	0x40012c00

08002184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <MX_TIM2_Init+0x98>)
 80021a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <MX_TIM2_Init+0x98>)
 80021aa:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80021ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_TIM2_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <MX_TIM2_Init+0x98>)
 80021b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_TIM2_Init+0x98>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <MX_TIM2_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <MX_TIM2_Init+0x98>)
 80021cc:	f003 f930 	bl	8005430 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021d6:	f000 f92b 	bl	8002430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	4619      	mov	r1, r3
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <MX_TIM2_Init+0x98>)
 80021e8:	f003 fb16 	bl	8005818 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021f2:	f000 f91d 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <MX_TIM2_Init+0x98>)
 8002204:	f003 fcec 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800220e:	f000 f90f 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001ac 	.word	0x200001ac

08002220 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002234:	463b      	mov	r3, r7
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_TIM3_Init+0x94>)
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <MX_TIM3_Init+0x98>)
 8002240:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <MX_TIM3_Init+0x94>)
 8002244:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_TIM3_Init+0x94>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_TIM3_Init+0x94>)
 8002252:	2263      	movs	r2, #99	; 0x63
 8002254:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_TIM3_Init+0x94>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <MX_TIM3_Init+0x94>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <MX_TIM3_Init+0x94>)
 8002264:	f003 f8e4 	bl	8005430 <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800226e:	f000 f8df 	bl	8002430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4619      	mov	r1, r3
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <MX_TIM3_Init+0x94>)
 8002280:	f003 faca 	bl	8005818 <HAL_TIM_ConfigClockSource>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800228a:	f000 f8d1 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_TIM3_Init+0x94>)
 800229c:	f003 fca0 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022a6:	f000 f8c3 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200001f4 	.word	0x200001f4
 80022b8:	40000400 	.word	0x40000400

080022bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <MX_USART1_UART_Init+0x50>)
 80022c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022e2:	220c      	movs	r2, #12
 80022e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USART1_UART_Init+0x4c>)
 80022f4:	f003 fce4 	bl	8005cc0 <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022fe:	f000 f897 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000023c 	.word	0x2000023c
 800230c:	40013800 	.word	0x40013800

08002310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_DMA_Init+0x38>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <MX_DMA_Init+0x38>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6153      	str	r3, [r2, #20]
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_DMA_Init+0x38>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	200b      	movs	r0, #11
 8002334:	f001 ff27 	bl	8004186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002338:	200b      	movs	r0, #11
 800233a:	f001 ff40 	bl	80041be <HAL_NVIC_EnableIRQ>

}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <MX_GPIO_Init+0xb4>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <MX_GPIO_Init+0xb4>)
 8002366:	f043 0320 	orr.w	r3, r3, #32
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <MX_GPIO_Init+0xb4>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <MX_GPIO_Init+0xb4>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <MX_GPIO_Init+0xb4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <MX_GPIO_Init+0xb4>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <MX_GPIO_Init+0xb4>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <MX_GPIO_Init+0xb4>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <MX_GPIO_Init+0xb4>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ae:	4815      	ldr	r0, [pc, #84]	; (8002404 <MX_GPIO_Init+0xb8>)
 80023b0:	f002 faa9 	bl	8004906 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO01_Pin|DO02_Pin|DO03_Pin|DO04_Pin
 80023b4:	2200      	movs	r2, #0
 80023b6:	f24f 0120 	movw	r1, #61472	; 0xf020
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <MX_GPIO_Init+0xb8>)
 80023bc:	f002 faa3 	bl	8004906 <HAL_GPIO_WritePin>
                          |DIN06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIN03_Pin DIN02_Pin DIN01_Pin DIN04_Pin
                           DIN05_Pin DIN07_Pin DIN08_Pin */
  GPIO_InitStruct.Pin = DIN03_Pin|DIN02_Pin|DIN01_Pin|DIN04_Pin
 80023c0:	23df      	movs	r3, #223	; 0xdf
 80023c2:	613b      	str	r3, [r7, #16]
                          |DIN05_Pin|DIN07_Pin|DIN08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	480c      	ldr	r0, [pc, #48]	; (8002404 <MX_GPIO_Init+0xb8>)
 80023d4:	f002 f8fc 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO01_Pin DO02_Pin DO03_Pin
                           DO04_Pin DIN06_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO01_Pin|DO02_Pin|DO03_Pin
 80023d8:	f24f 4320 	movw	r3, #62496	; 0xf420
 80023dc:	613b      	str	r3, [r7, #16]
                          |DO04_Pin|DIN06_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	4619      	mov	r1, r3
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <MX_GPIO_Init+0xb8>)
 80023f2:	f002 f8ed 	bl	80045d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40010c00 	.word	0x40010c00

08002408 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
	}
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	200001f4 	.word	0x200001f4
 800242c:	20001344 	.word	0x20001344

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002438:	20c8      	movs	r0, #200	; 0xc8
 800243a:	f000 fa93 	bl	8002964 <HAL_Delay>
	  NVIC_SystemReset();
 800243e:	f7ff fc9f 	bl	8001d80 <__NVIC_SystemReset>
	...

08002444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_MspInit+0x5c>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_MspInit+0x5c>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6193      	str	r3, [r2, #24]
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_MspInit+0x5c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_MspInit+0x5c>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <HAL_MspInit+0x5c>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_MspInit+0x5c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_MspInit+0x60>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_MspInit+0x60>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010000 	.word	0x40010000

080024a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_ADC_MspInit+0xbc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d149      	bne.n	800255c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_ADC_MspInit+0xc0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024f8:	230f      	movs	r3, #15
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fc:	2303      	movs	r3, #3
 80024fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4619      	mov	r1, r3
 8002506:	4819      	ldr	r0, [pc, #100]	; (800256c <HAL_ADC_MspInit+0xc4>)
 8002508:	f002 f862 	bl	80045d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_ADC_MspInit+0xcc>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002536:	2220      	movs	r2, #32
 8002538:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002542:	f001 fe57 	bl	80041f4 <HAL_DMA_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800254c:	f7ff ff70 	bl	8002430 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002554:	621a      	str	r2, [r3, #32]
 8002556:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_ADC_MspInit+0xc8>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40012400 	.word	0x40012400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800
 8002570:	200000f8 	.word	0x200000f8
 8002574:	40020008 	.word	0x40020008

08002578 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a20      	ldr	r2, [pc, #128]	; (8002614 <HAL_CAN_MspInit+0x9c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d139      	bne.n	800260c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 800259e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025a2:	61d3      	str	r3, [r2, #28]
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_CAN_MspInit+0xa0>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0310 	add.w	r3, r7, #16
 80025da:	4619      	mov	r1, r3
 80025dc:	480f      	ldr	r0, [pc, #60]	; (800261c <HAL_CAN_MspInit+0xa4>)
 80025de:	f001 fff7 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4619      	mov	r1, r3
 80025f6:	4809      	ldr	r0, [pc, #36]	; (800261c <HAL_CAN_MspInit+0xa4>)
 80025f8:	f001 ffea 	bl	80045d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	2014      	movs	r0, #20
 8002602:	f001 fdc0 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002606:	2014      	movs	r0, #20
 8002608:	f001 fdd9 	bl	80041be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40006400 	.word	0x40006400
 8002618:	40021000 	.word	0x40021000
 800261c:	40010800 	.word	0x40010800

08002620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_TIM_Base_MspInit+0x8c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10c      	bne.n	800264c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800263c:	6193      	str	r3, [r2, #24]
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800264a:	e02a      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d10c      	bne.n	8002670 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	61d3      	str	r3, [r2, #28]
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
}
 800266e:	e018      	b.n	80026a2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <HAL_TIM_Base_MspInit+0x94>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d113      	bne.n	80026a2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	61d3      	str	r3, [r2, #28]
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_TIM_Base_MspInit+0x90>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	201d      	movs	r0, #29
 8002698:	f001 fd75 	bl	8004186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800269c:	201d      	movs	r0, #29
 800269e:	f001 fd8e 	bl	80041be <HAL_NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40000400 	.word	0x40000400

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <HAL_UART_MspInit+0x8c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d131      	bne.n	800273c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_UART_MspInit+0x90>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <HAL_UART_MspInit+0x94>)
 800271e:	f001 ff57 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <HAL_UART_MspInit+0x94>)
 8002738:	f001 ff4a 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013800 	.word	0x40013800
 8002748:	40021000 	.word	0x40021000
 800274c:	40010800 	.word	0x40010800

08002750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002754:	e7fe      	b.n	8002754 <NMI_Handler+0x4>

08002756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <UsageFault_Handler+0x4>

0800276e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002796:	f000 f8c9 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <DMA1_Channel1_IRQHandler+0x10>)
 80027a6:	f001 fddf 	bl	8004368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200000f8 	.word	0x200000f8

080027b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80027ba:	f001 f9fc 	bl	8003bb6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000013c 	.word	0x2000013c

080027c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM3_IRQHandler+0x10>)
 80027ce:	f002 ff1b 	bl	8005608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200001f4 	.word	0x200001f4

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f003 fb5e 	bl	8005ecc <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	220c      	movs	r2, #12
 8002814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20005000 	.word	0x20005000
 800283c:	00000400 	.word	0x00000400
 8002840:	20001394 	.word	0x20001394
 8002844:	200014e8 	.word	0x200014e8

08002848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <Reset_Handler>:
 8002854:	f7ff fff8 	bl	8002848 <SystemInit>
 8002858:	480b      	ldr	r0, [pc, #44]	; (8002888 <LoopFillZerobss+0xe>)
 800285a:	490c      	ldr	r1, [pc, #48]	; (800288c <LoopFillZerobss+0x12>)
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <LoopFillZerobss+0x16>)
 800285e:	2300      	movs	r3, #0
 8002860:	e002      	b.n	8002868 <LoopCopyDataInit>

08002862 <CopyDataInit>:
 8002862:	58d4      	ldr	r4, [r2, r3]
 8002864:	50c4      	str	r4, [r0, r3]
 8002866:	3304      	adds	r3, #4

08002868 <LoopCopyDataInit>:
 8002868:	18c4      	adds	r4, r0, r3
 800286a:	428c      	cmp	r4, r1
 800286c:	d3f9      	bcc.n	8002862 <CopyDataInit>
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <LoopFillZerobss+0x1a>)
 8002870:	4c09      	ldr	r4, [pc, #36]	; (8002898 <LoopFillZerobss+0x1e>)
 8002872:	2300      	movs	r3, #0
 8002874:	e001      	b.n	800287a <LoopFillZerobss>

08002876 <FillZerobss>:
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	3204      	adds	r2, #4

0800287a <LoopFillZerobss>:
 800287a:	42a2      	cmp	r2, r4
 800287c:	d3fb      	bcc.n	8002876 <FillZerobss>
 800287e:	f003 fb2b 	bl	8005ed8 <__libc_init_array>
 8002882:	f7ff fa93 	bl	8001dac <main>
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000
 800288c:	20000068 	.word	0x20000068
 8002890:	08006930 	.word	0x08006930
 8002894:	20000068 	.word	0x20000068
 8002898:	200014e4 	.word	0x200014e4

0800289c <ADC1_2_IRQHandler>:
 800289c:	e7fe      	b.n	800289c <ADC1_2_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_Init+0x28>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_Init+0x28>)
 80028aa:	f043 0310 	orr.w	r3, r3, #16
 80028ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f001 fc5d 	bl	8004170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	200f      	movs	r0, #15
 80028b8:	f000 f808 	bl	80028cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fdc2 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_InitTick+0x54>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_InitTick+0x58>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fc75 	bl	80041da <HAL_SYSTICK_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00e      	b.n	8002918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d80a      	bhi.n	8002916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f001 fc3d 	bl	8004186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800290c:	4a06      	ldr	r2, [pc, #24]	; (8002928 <HAL_InitTick+0x5c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	2000000c 	.word	0x2000000c
 8002924:	20000014 	.word	0x20000014
 8002928:	20000010 	.word	0x20000010

0800292c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_IncTick+0x1c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_IncTick+0x20>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_IncTick+0x20>)
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	20000014 	.word	0x20000014
 800294c:	20001398 	.word	0x20001398

08002950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTick;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_GetTick+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20001398 	.word	0x20001398

08002964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff fff0 	bl	8002950 <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffe0 	bl	8002950 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000014 	.word	0x20000014

080029ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0be      	b.n	8002b4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fd5c 	bl	80024a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 faf5 	bl	8002fe0 <ADC_ConversionStop_Disable>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 8099 	bne.w	8002b3a <HAL_ADC_Init+0x18e>
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 8095 	bne.w	8002b3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a18:	f023 0302 	bic.w	r3, r3, #2
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7b1b      	ldrb	r3, [r3, #12]
 8002a32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_Init+0xa2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_Init+0xa8>
 8002a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_Init+0xaa>
 8002a54:	2300      	movs	r3, #0
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7d1b      	ldrb	r3, [r3, #20]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d119      	bne.n	8002a98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7b1b      	ldrb	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	035a      	lsls	r2, r3, #13
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e00b      	b.n	8002a98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_ADC_Init+0x1a8>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d003      	beq.n	8002ad2 <HAL_ADC_Init+0x126>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d104      	bne.n	8002adc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	051b      	lsls	r3, r3, #20
 8002ada:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_ADC_Init+0x1ac>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d10b      	bne.n	8002b18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b16:	e018      	b.n	8002b4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f023 0312 	bic.w	r3, r3, #18
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b38:	e007      	b.n	8002b4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	ffe1f7fd 	.word	0xffe1f7fd
 8002b58:	ff1f0efe 	.word	0xff1f0efe

08002b5c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <HAL_ADC_Start_DMA+0x1a8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_ADC_Start_DMA+0x24>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_ADC_Start_DMA+0x1ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_Start_DMA+0x32>
 8002b80:	4b60      	ldr	r3, [pc, #384]	; (8002d04 <HAL_ADC_Start_DMA+0x1a8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 80b3 	bne.w	8002cf4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_Start_DMA+0x40>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0ae      	b.n	8002cfa <HAL_ADC_Start_DMA+0x19e>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f9c1 	bl	8002f2c <ADC_Enable>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 809a 	bne.w	8002cea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4e      	ldr	r2, [pc, #312]	; (8002d08 <HAL_ADC_Start_DMA+0x1ac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x84>
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_ADC_Start_DMA+0x1a8>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d115      	bne.n	8002c0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d026      	beq.n	8002c48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c0a:	e01d      	b.n	8002c48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <HAL_ADC_Start_DMA+0x1a8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_Start_DMA+0xd0>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_ADC_Start_DMA+0x1ac>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10d      	bne.n	8002c48 <HAL_ADC_Start_DMA+0xec>
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_ADC_Start_DMA+0x1a8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f023 0206 	bic.w	r2, r3, #6
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_ADC_Start_DMA+0x1b0>)
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <HAL_ADC_Start_DMA+0x1b4>)
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_ADC_Start_DMA+0x1b8>)
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a18      	ldr	r0, [r3, #32]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	334c      	adds	r3, #76	; 0x4c
 8002cac:	4619      	mov	r1, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f001 faf9 	bl	80042a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002cd4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cd6:	e00f      	b.n	8002cf8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ce6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ce8:	e006      	b.n	8002cf8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002cf2:	e001      	b.n	8002cf8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40012400 	.word	0x40012400
 8002d08:	40012800 	.word	0x40012800
 8002d0c:	08003063 	.word	0x08003063
 8002d10:	080030df 	.word	0x080030df
 8002d14:	080030fb 	.word	0x080030fb

08002d18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x20>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0dc      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x1da>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d81c      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b05      	subs	r3, #5
 8002d7e:	221f      	movs	r2, #31
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	4019      	ands	r1, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
 8002da4:	e03c      	b.n	8002e20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d81c      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b23      	subs	r3, #35	; 0x23
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4019      	ands	r1, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b23      	subs	r3, #35	; 0x23
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
 8002de6:	e01b      	b.n	8002e20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b41      	subs	r3, #65	; 0x41
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4019      	ands	r1, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b41      	subs	r3, #65	; 0x41
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d91c      	bls.n	8002e62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68d9      	ldr	r1, [r3, #12]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6898      	ldr	r0, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	3b1e      	subs	r3, #30
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	e019      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6919      	ldr	r1, [r3, #16]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	2207      	movs	r2, #7
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4019      	ands	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6898      	ldr	r0, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d003      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ea2:	2b11      	cmp	r3, #17
 8002ea4:	d132      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_ADC_ConfigChannel+0x1e4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d125      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d126      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ecc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d11a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_ADC_ConfigChannel+0x1ec>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9a      	lsrs	r2, r3, #18
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x1b2>
 8002efa:	e007      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012400 	.word	0x40012400
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d040      	beq.n	8002fcc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <ADC_Enable+0xac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <ADC_Enable+0xb0>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	0c9b      	lsrs	r3, r3, #18
 8002f66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f68:	e002      	b.n	8002f70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f9      	bne.n	8002f6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f76:	f7ff fceb 	bl	8002950 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f7c:	e01f      	b.n	8002fbe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f7e:	f7ff fce7 	bl	8002950 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d918      	bls.n	8002fbe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d011      	beq.n	8002fbe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d1d8      	bne.n	8002f7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000000c 	.word	0x2000000c
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d12e      	bne.n	8003058 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800300a:	f7ff fca1 	bl	8002950 <HAL_GetTick>
 800300e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003010:	e01b      	b.n	800304a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003012:	f7ff fc9d 	bl	8002950 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d914      	bls.n	800304a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10d      	bne.n	800304a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f043 0210 	orr.w	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e007      	b.n	800305a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d0dc      	beq.n	8003012 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d127      	bne.n	80030cc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003092:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003096:	d115      	bne.n	80030c4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff fe27 	bl	8002d18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030ca:	e004      	b.n	80030d6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fe fbdb 	bl	80018a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff fe02 	bl	8002d2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_ADCEx_Calibration_Start+0x1e>
 800314a:	2302      	movs	r3, #2
 800314c:	e097      	b.n	800327e <HAL_ADCEx_Calibration_Start+0x14e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff42 	bl	8002fe0 <ADC_ConversionStop_Disable>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fee3 	bl	8002f2c <ADC_Enable>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 8081 	bne.w	8003274 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800317a:	f023 0302 	bic.w	r3, r3, #2
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003186:	4b40      	ldr	r3, [pc, #256]	; (8003288 <HAL_ADCEx_Calibration_Start+0x158>)
 8003188:	681c      	ldr	r4, [r3, #0]
 800318a:	2002      	movs	r0, #2
 800318c:	f002 f89a 	bl	80052c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003190:	4603      	mov	r3, r0
 8003192:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003196:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003198:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800319a:	e002      	b.n	80031a2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3b01      	subs	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f9      	bne.n	800319c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031b8:	f7ff fbca 	bl	8002950 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031be:	e01b      	b.n	80031f8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031c0:	f7ff fbc6 	bl	8002950 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b0a      	cmp	r3, #10
 80031cc:	d914      	bls.n	80031f8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f023 0312 	bic.w	r3, r3, #18
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e042      	b.n	800327e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1dc      	bne.n	80031c0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0204 	orr.w	r2, r2, #4
 8003214:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003216:	f7ff fb9b 	bl	8002950 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800321c:	e01b      	b.n	8003256 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800321e:	f7ff fb97 	bl	8002950 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b0a      	cmp	r3, #10
 800322a:	d914      	bls.n	8003256 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	f023 0312 	bic.w	r3, r3, #18
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e013      	b.n	800327e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1dc      	bne.n	800321e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}
 8003286:	bf00      	nop
 8003288:	2000000c 	.word	0x2000000c

0800328c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0ed      	b.n	800347a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff f964 	bl	8002578 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c0:	f7ff fb46 	bl	8002950 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032c6:	e012      	b.n	80032ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032c8:	f7ff fb42 	bl	8002950 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b0a      	cmp	r3, #10
 80032d4:	d90b      	bls.n	80032ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2205      	movs	r2, #5
 80032e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0c5      	b.n	800347a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0e5      	beq.n	80032c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0202 	bic.w	r2, r2, #2
 800330a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800330c:	f7ff fb20 	bl	8002950 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003312:	e012      	b.n	800333a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003314:	f7ff fb1c 	bl	8002950 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d90b      	bls.n	800333a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2205      	movs	r2, #5
 8003332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e09f      	b.n	800347a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e5      	bne.n	8003314 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7e1b      	ldrb	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d108      	bne.n	8003362 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e007      	b.n	8003372 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003370:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7e5b      	ldrb	r3, [r3, #25]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d108      	bne.n	800338c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e007      	b.n	800339c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e9b      	ldrb	r3, [r3, #26]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0220 	bic.w	r2, r2, #32
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7edb      	ldrb	r3, [r3, #27]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0210 	bic.w	r2, r2, #16
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e007      	b.n	80033f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0210 	orr.w	r2, r2, #16
 80033ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7f1b      	ldrb	r3, [r3, #28]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e007      	b.n	800341a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	7f5b      	ldrb	r3, [r3, #29]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0204 	orr.w	r2, r2, #4
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e007      	b.n	8003444 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	1e5a      	subs	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003498:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d003      	beq.n	80034a8 <HAL_CAN_ConfigFilter+0x26>
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	f040 80aa 	bne.w	80035fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d123      	bne.n	800352a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003504:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3248      	adds	r2, #72	; 0x48
 800350a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800351e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003520:	6979      	ldr	r1, [r7, #20]
 8003522:	3348      	adds	r3, #72	; 0x48
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d122      	bne.n	8003578 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	431a      	orrs	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003552:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3248      	adds	r2, #72	; 0x48
 8003558:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800356c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	3348      	adds	r3, #72	; 0x48
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003592:	e007      	b.n	80035a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	431a      	orrs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035be:	e007      	b.n	80035d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e006      	b.n	800360a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d12e      	bne.n	8003686 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003640:	f7ff f986 	bl	8002950 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003646:	e012      	b.n	800366e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003648:	f7ff f982 	bl	8002950 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b0a      	cmp	r3, #10
 8003654:	d90b      	bls.n	800366e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2205      	movs	r2, #5
 8003666:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e012      	b.n	8003694 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e006      	b.n	8003694 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d003      	beq.n	80036c8 <HAL_CAN_AddTxMessage+0x2c>
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f040 80ad 	bne.w	8003822 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8095 	beq.w	8003812 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	0e1b      	lsrs	r3, r3, #24
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036f2:	2201      	movs	r2, #1
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	409a      	lsls	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	6809      	ldr	r1, [r1, #0]
 8003712:	431a      	orrs	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3318      	adds	r3, #24
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	440b      	add	r3, r1
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00f      	b.n	8003740 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800372a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003734:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3318      	adds	r3, #24
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	440b      	add	r3, r1
 800373e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6819      	ldr	r1, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	3318      	adds	r3, #24
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	440b      	add	r3, r1
 8003750:	3304      	adds	r3, #4
 8003752:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	7d1b      	ldrb	r3, [r3, #20]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d111      	bne.n	8003780 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3318      	adds	r3, #24
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6811      	ldr	r1, [r2, #0]
 8003770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3318      	adds	r3, #24
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	440b      	add	r3, r1
 800377c:	3304      	adds	r3, #4
 800377e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3307      	adds	r3, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	061a      	lsls	r2, r3, #24
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3306      	adds	r3, #6
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3305      	adds	r3, #5
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	3204      	adds	r2, #4
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	4610      	mov	r0, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	6811      	ldr	r1, [r2, #0]
 80037a8:	ea43 0200 	orr.w	r2, r3, r0
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3303      	adds	r3, #3
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	061a      	lsls	r2, r3, #24
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3302      	adds	r3, #2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3301      	adds	r3, #1
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	4313      	orrs	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	4610      	mov	r0, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6811      	ldr	r1, [r2, #0]
 80037de:	ea43 0200 	orr.w	r2, r3, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3318      	adds	r3, #24
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6811      	ldr	r1, [r2, #0]
 8003800:	f043 0201 	orr.w	r2, r3, #1
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3318      	adds	r3, #24
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e00e      	b.n	8003830 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e006      	b.n	8003830 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3724      	adds	r7, #36	; 0x24
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d002      	beq.n	8003858 <HAL_CAN_AbortTxRequest+0x1e>
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d128      	bne.n	80038aa <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003870:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388a:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038a4:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e006      	b.n	80038b8 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11d      	bne.n	800391e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3301      	adds	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d003      	beq.n	800394e <HAL_CAN_GetRxMessage+0x24>
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b02      	cmp	r3, #2
 800394a:	f040 8103 	bne.w	8003b54 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10e      	bne.n	8003972 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0f7      	b.n	8003b62 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0e8      	b.n	8003b62 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	331b      	adds	r3, #27
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	4413      	add	r3, r2
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0204 	and.w	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	331b      	adds	r3, #27
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0d5b      	lsrs	r3, r3, #21
 80039be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	331b      	adds	r3, #27
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	4413      	add	r3, r2
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	331b      	adds	r3, #27
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0202 	and.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	331b      	adds	r3, #27
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2208      	movs	r2, #8
 8003a12:	611a      	str	r2, [r3, #16]
 8003a14:	e00b      	b.n	8003a2e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	331b      	adds	r3, #27
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	4413      	add	r3, r2
 8003a22:	3304      	adds	r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	331b      	adds	r3, #27
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	331b      	adds	r3, #27
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	3304      	adds	r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0a1a      	lsrs	r2, r3, #8
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0c1a      	lsrs	r2, r3, #16
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e1a      	lsrs	r2, r3, #24
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	3303      	adds	r3, #3
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0a1a      	lsrs	r2, r3, #8
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	3305      	adds	r3, #5
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0c1a      	lsrs	r2, r3, #16
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3306      	adds	r3, #6
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0e1a      	lsrs	r2, r3, #24
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	3307      	adds	r3, #7
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0220 	orr.w	r2, r2, #32
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	e007      	b.n	8003b50 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0220 	orr.w	r2, r2, #32
 8003b4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e006      	b.n	8003b62 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <HAL_CAN_ActivateNotification+0x1e>
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d109      	bne.n	8003b9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6959      	ldr	r1, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e006      	b.n	8003bac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b08a      	sub	sp, #40	; 0x28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d07c      	beq.n	8003cf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f983 	bl	8003f24 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c1e:	e016      	b.n	8003c4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e00c      	b.n	8003c4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e002      	b.n	8003c4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f986 	bl	8003f5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d024      	beq.n	8003ca2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f962 	bl	8003f36 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c72:	e016      	b.n	8003ca2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e00c      	b.n	8003ca2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e002      	b.n	8003ca2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f965 	bl	8003f6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d024      	beq.n	8003cf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f941 	bl	8003f48 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cc6:	e016      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	e00c      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d004      	beq.n	8003cf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
 8003cee:	e002      	b.n	8003cf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f944 	bl	8003f7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00c      	beq.n	8003d1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2210      	movs	r2, #16
 8003d18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2208      	movs	r2, #8
 8003d34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f92a 	bl	8003f90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd fd7d 	bl	8001854 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2208      	movs	r2, #8
 8003d98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f901 	bl	8003fa2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fd fd57 	bl	800186c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8ea 	bl	8003fb4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8e2 	bl	8003fc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d07b      	beq.n	8003f04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d072      	beq.n	8003efc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d043      	beq.n	8003efc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03e      	beq.n	8003efc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d02b      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x32a>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d82e      	bhi.n	8003eea <HAL_CAN_IRQHandler+0x334>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d022      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0x320>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d82a      	bhi.n	8003eea <HAL_CAN_IRQHandler+0x334>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d019      	beq.n	8003ecc <HAL_CAN_IRQHandler+0x316>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d826      	bhi.n	8003eea <HAL_CAN_IRQHandler+0x334>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d010      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x30c>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d822      	bhi.n	8003eea <HAL_CAN_IRQHandler+0x334>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d002      	beq.n	8003eae <HAL_CAN_IRQHandler+0x2f8>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d005      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003eac:	e01d      	b.n	8003eea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f043 0308 	orr.w	r3, r3, #8
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb6:	e019      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f043 0310 	orr.w	r3, r3, #16
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec0:	e014      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f043 0320 	orr.w	r3, r3, #32
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eca:	e00f      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ed4:	e00a      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ede:	e005      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee8:	e000      	b.n	8003eec <HAL_CAN_IRQHandler+0x336>
            break;
 8003eea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003efa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2204      	movs	r2, #4
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fcb4 	bl	8001884 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <__NVIC_SetPriorityGrouping>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <__NVIC_SetPriorityGrouping+0x44>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800400a:	4a04      	ldr	r2, [pc, #16]	; (800401c <__NVIC_SetPriorityGrouping+0x44>)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	60d3      	str	r3, [r2, #12]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <__NVIC_GetPriorityGrouping>:
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <__NVIC_GetPriorityGrouping+0x18>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	0a1b      	lsrs	r3, r3, #8
 800402a:	f003 0307 	and.w	r3, r3, #7
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <__NVIC_EnableIRQ>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	2b00      	cmp	r3, #0
 800404c:	db0b      	blt.n	8004066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	4906      	ldr	r1, [pc, #24]	; (8004070 <__NVIC_EnableIRQ+0x34>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2001      	movs	r0, #1
 800405e:	fa00 f202 	lsl.w	r2, r0, r2
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	; (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3b01      	subs	r3, #1
 8004138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413c:	d301      	bcc.n	8004142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413e:	2301      	movs	r3, #1
 8004140:	e00f      	b.n	8004162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <SysTick_Config+0x40>)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b01      	subs	r3, #1
 8004148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414a:	210f      	movs	r1, #15
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	f7ff ff90 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <SysTick_Config+0x40>)
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <SysTick_Config+0x40>)
 800415c:	2207      	movs	r2, #7
 800415e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	e000e010 	.word	0xe000e010

08004170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff2d 	bl	8003fd8 <__NVIC_SetPriorityGrouping>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af00      	add	r7, sp, #0
 800418c:	4603      	mov	r3, r0
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004198:	f7ff ff42 	bl	8004020 <__NVIC_GetPriorityGrouping>
 800419c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	6978      	ldr	r0, [r7, #20]
 80041a4:	f7ff ff90 	bl	80040c8 <NVIC_EncodePriority>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff5f 	bl	8004074 <__NVIC_SetPriority>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b082      	sub	sp, #8
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff35 	bl	800403c <__NVIC_EnableIRQ>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ffa2 	bl	800412c <SysTick_Config>
 80041e8:	4603      	mov	r3, r0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e043      	b.n	8004292 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_DMA_Init+0xa8>)
 8004212:	4413      	add	r3, r2
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_DMA_Init+0xac>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_DMA_Init+0xb0>)
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800423e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004242:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800424c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	bffdfff8 	.word	0xbffdfff8
 80042a0:	cccccccd 	.word	0xcccccccd
 80042a4:	40020000 	.word	0x40020000

080042a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_DMA_Start_IT+0x20>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e04b      	b.n	8004360 <HAL_DMA_Start_IT+0xb8>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d13a      	bne.n	8004352 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f937 	bl	8004574 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 020e 	orr.w	r2, r2, #14
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e00f      	b.n	8004340 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 020a 	orr.w	r2, r2, #10
 800433e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e005      	b.n	800435e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2204      	movs	r2, #4
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d04f      	beq.n	8004430 <HAL_DMA_IRQHandler+0xc8>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04a      	beq.n	8004430 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a66      	ldr	r2, [pc, #408]	; (8004558 <HAL_DMA_IRQHandler+0x1f0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d029      	beq.n	8004416 <HAL_DMA_IRQHandler+0xae>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a65      	ldr	r2, [pc, #404]	; (800455c <HAL_DMA_IRQHandler+0x1f4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_DMA_IRQHandler+0xaa>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a63      	ldr	r2, [pc, #396]	; (8004560 <HAL_DMA_IRQHandler+0x1f8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01a      	beq.n	800440c <HAL_DMA_IRQHandler+0xa4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a62      	ldr	r2, [pc, #392]	; (8004564 <HAL_DMA_IRQHandler+0x1fc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d012      	beq.n	8004406 <HAL_DMA_IRQHandler+0x9e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a60      	ldr	r2, [pc, #384]	; (8004568 <HAL_DMA_IRQHandler+0x200>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x98>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5f      	ldr	r2, [pc, #380]	; (800456c <HAL_DMA_IRQHandler+0x204>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d102      	bne.n	80043fa <HAL_DMA_IRQHandler+0x92>
 80043f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043f8:	e00e      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 80043fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043fe:	e00b      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 8004400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004404:	e008      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 8004406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800440a:	e005      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 800440c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004410:	e002      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 8004412:	2340      	movs	r3, #64	; 0x40
 8004414:	e000      	b.n	8004418 <HAL_DMA_IRQHandler+0xb0>
 8004416:	2304      	movs	r3, #4
 8004418:	4a55      	ldr	r2, [pc, #340]	; (8004570 <HAL_DMA_IRQHandler+0x208>)
 800441a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8094 	beq.w	800454e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800442e:	e08e      	b.n	800454e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	2202      	movs	r2, #2
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d056      	beq.n	80044ee <HAL_DMA_IRQHandler+0x186>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d051      	beq.n	80044ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 020a 	bic.w	r2, r2, #10
 8004466:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a38      	ldr	r2, [pc, #224]	; (8004558 <HAL_DMA_IRQHandler+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d029      	beq.n	80044ce <HAL_DMA_IRQHandler+0x166>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a37      	ldr	r2, [pc, #220]	; (800455c <HAL_DMA_IRQHandler+0x1f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMA_IRQHandler+0x162>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a35      	ldr	r2, [pc, #212]	; (8004560 <HAL_DMA_IRQHandler+0x1f8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x15c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_DMA_IRQHandler+0x1fc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d012      	beq.n	80044be <HAL_DMA_IRQHandler+0x156>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a32      	ldr	r2, [pc, #200]	; (8004568 <HAL_DMA_IRQHandler+0x200>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x150>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a31      	ldr	r2, [pc, #196]	; (800456c <HAL_DMA_IRQHandler+0x204>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x14a>
 80044ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044b0:	e00e      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044b6:	e00b      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044bc:	e008      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c2:	e005      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	e002      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044ca:	2320      	movs	r3, #32
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_IRQHandler+0x168>
 80044ce:	2302      	movs	r3, #2
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <HAL_DMA_IRQHandler+0x208>)
 80044d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d034      	beq.n	800454e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044ec:	e02f      	b.n	800454e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	2208      	movs	r2, #8
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_DMA_IRQHandler+0x1e8>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020e 	bic.w	r2, r2, #14
 8004516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	2101      	movs	r1, #1
 8004522:	fa01 f202 	lsl.w	r2, r1, r2
 8004526:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
    }
  }
  return;
 800454e:	bf00      	nop
 8004550:	bf00      	nop
}
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40020008 	.word	0x40020008
 800455c:	4002001c 	.word	0x4002001c
 8004560:	40020030 	.word	0x40020030
 8004564:	40020044 	.word	0x40020044
 8004568:	40020058 	.word	0x40020058
 800456c:	4002006c 	.word	0x4002006c
 8004570:	40020000 	.word	0x40020000

08004574 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	2101      	movs	r1, #1
 800458c:	fa01 f202 	lsl.w	r2, r1, r2
 8004590:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d108      	bne.n	80045b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045b2:	e007      	b.n	80045c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b08b      	sub	sp, #44	; 0x2c
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045da:	2300      	movs	r3, #0
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045de:	2300      	movs	r3, #0
 80045e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e2:	e169      	b.n	80048b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045e4:	2201      	movs	r2, #1
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	f040 8158 	bne.w	80048b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4a9a      	ldr	r2, [pc, #616]	; (8004870 <HAL_GPIO_Init+0x2a0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d05e      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
 800460c:	4a98      	ldr	r2, [pc, #608]	; (8004870 <HAL_GPIO_Init+0x2a0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d875      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 8004612:	4a98      	ldr	r2, [pc, #608]	; (8004874 <HAL_GPIO_Init+0x2a4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d058      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
 8004618:	4a96      	ldr	r2, [pc, #600]	; (8004874 <HAL_GPIO_Init+0x2a4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d86f      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 800461e:	4a96      	ldr	r2, [pc, #600]	; (8004878 <HAL_GPIO_Init+0x2a8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d052      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
 8004624:	4a94      	ldr	r2, [pc, #592]	; (8004878 <HAL_GPIO_Init+0x2a8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d869      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 800462a:	4a94      	ldr	r2, [pc, #592]	; (800487c <HAL_GPIO_Init+0x2ac>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04c      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
 8004630:	4a92      	ldr	r2, [pc, #584]	; (800487c <HAL_GPIO_Init+0x2ac>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d863      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 8004636:	4a92      	ldr	r2, [pc, #584]	; (8004880 <HAL_GPIO_Init+0x2b0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d046      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
 800463c:	4a90      	ldr	r2, [pc, #576]	; (8004880 <HAL_GPIO_Init+0x2b0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d85d      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 8004642:	2b12      	cmp	r3, #18
 8004644:	d82a      	bhi.n	800469c <HAL_GPIO_Init+0xcc>
 8004646:	2b12      	cmp	r3, #18
 8004648:	d859      	bhi.n	80046fe <HAL_GPIO_Init+0x12e>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_GPIO_Init+0x80>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	080046cb 	.word	0x080046cb
 8004654:	080046a5 	.word	0x080046a5
 8004658:	080046b7 	.word	0x080046b7
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046ff 	.word	0x080046ff
 8004664:	080046ff 	.word	0x080046ff
 8004668:	080046ff 	.word	0x080046ff
 800466c:	080046ff 	.word	0x080046ff
 8004670:	080046ff 	.word	0x080046ff
 8004674:	080046ff 	.word	0x080046ff
 8004678:	080046ff 	.word	0x080046ff
 800467c:	080046ff 	.word	0x080046ff
 8004680:	080046ff 	.word	0x080046ff
 8004684:	080046ff 	.word	0x080046ff
 8004688:	080046ff 	.word	0x080046ff
 800468c:	080046ff 	.word	0x080046ff
 8004690:	080046ff 	.word	0x080046ff
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046c1 	.word	0x080046c1
 800469c:	4a79      	ldr	r2, [pc, #484]	; (8004884 <HAL_GPIO_Init+0x2b4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046a2:	e02c      	b.n	80046fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	623b      	str	r3, [r7, #32]
          break;
 80046aa:	e029      	b.n	8004700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	3304      	adds	r3, #4
 80046b2:	623b      	str	r3, [r7, #32]
          break;
 80046b4:	e024      	b.n	8004700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	3308      	adds	r3, #8
 80046bc:	623b      	str	r3, [r7, #32]
          break;
 80046be:	e01f      	b.n	8004700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	330c      	adds	r3, #12
 80046c6:	623b      	str	r3, [r7, #32]
          break;
 80046c8:	e01a      	b.n	8004700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046d2:	2304      	movs	r3, #4
 80046d4:	623b      	str	r3, [r7, #32]
          break;
 80046d6:	e013      	b.n	8004700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046e0:	2308      	movs	r3, #8
 80046e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	611a      	str	r2, [r3, #16]
          break;
 80046ea:	e009      	b.n	8004700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046ec:	2308      	movs	r3, #8
 80046ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	615a      	str	r2, [r3, #20]
          break;
 80046f6:	e003      	b.n	8004700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
          break;
 80046fc:	e000      	b.n	8004700 <HAL_GPIO_Init+0x130>
          break;
 80046fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2bff      	cmp	r3, #255	; 0xff
 8004704:	d801      	bhi.n	800470a <HAL_GPIO_Init+0x13a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	e001      	b.n	800470e <HAL_GPIO_Init+0x13e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2bff      	cmp	r3, #255	; 0xff
 8004714:	d802      	bhi.n	800471c <HAL_GPIO_Init+0x14c>
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	e002      	b.n	8004722 <HAL_GPIO_Init+0x152>
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	3b08      	subs	r3, #8
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	210f      	movs	r1, #15
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	6a39      	ldr	r1, [r7, #32]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	431a      	orrs	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80b1 	beq.w	80048b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004750:	4b4d      	ldr	r3, [pc, #308]	; (8004888 <HAL_GPIO_Init+0x2b8>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4a4c      	ldr	r2, [pc, #304]	; (8004888 <HAL_GPIO_Init+0x2b8>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6193      	str	r3, [r2, #24]
 800475c:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_GPIO_Init+0x2b8>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004768:	4a48      	ldr	r2, [pc, #288]	; (800488c <HAL_GPIO_Init+0x2bc>)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	3302      	adds	r3, #2
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	220f      	movs	r2, #15
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a40      	ldr	r2, [pc, #256]	; (8004890 <HAL_GPIO_Init+0x2c0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_GPIO_Init+0x1ec>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_GPIO_Init+0x2c4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00d      	beq.n	80047b8 <HAL_GPIO_Init+0x1e8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3e      	ldr	r2, [pc, #248]	; (8004898 <HAL_GPIO_Init+0x2c8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <HAL_GPIO_Init+0x1e4>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3d      	ldr	r2, [pc, #244]	; (800489c <HAL_GPIO_Init+0x2cc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d101      	bne.n	80047b0 <HAL_GPIO_Init+0x1e0>
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <HAL_GPIO_Init+0x1ee>
 80047b0:	2304      	movs	r3, #4
 80047b2:	e004      	b.n	80047be <HAL_GPIO_Init+0x1ee>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e002      	b.n	80047be <HAL_GPIO_Init+0x1ee>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_GPIO_Init+0x1ee>
 80047bc:	2300      	movs	r3, #0
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	f002 0203 	and.w	r2, r2, #3
 80047c4:	0092      	lsls	r2, r2, #2
 80047c6:	4093      	lsls	r3, r2
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047ce:	492f      	ldr	r1, [pc, #188]	; (800488c <HAL_GPIO_Init+0x2bc>)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	492c      	ldr	r1, [pc, #176]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	4928      	ldr	r1, [pc, #160]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004800:	4013      	ands	r3, r2
 8004802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d006      	beq.n	800481e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	4922      	ldr	r1, [pc, #136]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
 800481c:	e006      	b.n	800482c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	43db      	mvns	r3, r3
 8004826:	491e      	ldr	r1, [pc, #120]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004828:	4013      	ands	r3, r2
 800482a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4918      	ldr	r1, [pc, #96]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	e006      	b.n	8004854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	43db      	mvns	r3, r3
 800484e:	4914      	ldr	r1, [pc, #80]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004850:	4013      	ands	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d021      	beq.n	80048a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	490e      	ldr	r1, [pc, #56]	; (80048a0 <HAL_GPIO_Init+0x2d0>)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]
 800486c:	e021      	b.n	80048b2 <HAL_GPIO_Init+0x2e2>
 800486e:	bf00      	nop
 8004870:	10320000 	.word	0x10320000
 8004874:	10310000 	.word	0x10310000
 8004878:	10220000 	.word	0x10220000
 800487c:	10210000 	.word	0x10210000
 8004880:	10120000 	.word	0x10120000
 8004884:	10110000 	.word	0x10110000
 8004888:	40021000 	.word	0x40021000
 800488c:	40010000 	.word	0x40010000
 8004890:	40010800 	.word	0x40010800
 8004894:	40010c00 	.word	0x40010c00
 8004898:	40011000 	.word	0x40011000
 800489c:	40011400 	.word	0x40011400
 80048a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_GPIO_Init+0x304>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	4909      	ldr	r1, [pc, #36]	; (80048d4 <HAL_GPIO_Init+0x304>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	3301      	adds	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f47f ae8e 	bne.w	80045e4 <HAL_GPIO_Init+0x14>
  }
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	372c      	adds	r7, #44	; 0x2c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40010400 	.word	0x40010400

080048d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e001      	b.n	80048fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	807b      	strh	r3, [r7, #2]
 8004912:	4613      	mov	r3, r2
 8004914:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004916:	787b      	ldrb	r3, [r7, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800491c:	887a      	ldrh	r2, [r7, #2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004922:	e003      	b.n	800492c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	041a      	lsls	r2, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
	...

08004938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e272      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8087 	beq.w	8004a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004958:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b04      	cmp	r3, #4
 8004962:	d00c      	beq.n	800497e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004964:	4b8f      	ldr	r3, [pc, #572]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b08      	cmp	r3, #8
 800496e:	d112      	bne.n	8004996 <HAL_RCC_OscConfig+0x5e>
 8004970:	4b8c      	ldr	r3, [pc, #560]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d10b      	bne.n	8004996 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497e:	4b89      	ldr	r3, [pc, #548]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d06c      	beq.n	8004a64 <HAL_RCC_OscConfig+0x12c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d168      	bne.n	8004a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e24c      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d106      	bne.n	80049ae <HAL_RCC_OscConfig+0x76>
 80049a0:	4b80      	ldr	r3, [pc, #512]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7f      	ldr	r2, [pc, #508]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e02e      	b.n	8004a0c <HAL_RCC_OscConfig+0xd4>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x98>
 80049b6:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7a      	ldr	r2, [pc, #488]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b78      	ldr	r3, [pc, #480]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a77      	ldr	r2, [pc, #476]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e01d      	b.n	8004a0c <HAL_RCC_OscConfig+0xd4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0xbc>
 80049da:	4b72      	ldr	r3, [pc, #456]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a71      	ldr	r2, [pc, #452]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	4b6f      	ldr	r3, [pc, #444]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a6e      	ldr	r2, [pc, #440]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0xd4>
 80049f4:	4b6b      	ldr	r3, [pc, #428]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a6a      	ldr	r2, [pc, #424]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 80049fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b68      	ldr	r3, [pc, #416]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a67      	ldr	r2, [pc, #412]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fd ff9c 	bl	8002950 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fd ff98 	bl	8002950 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e200      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe4>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fd ff88 	bl	8002950 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fd ff84 	bl	8002950 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1ec      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x10c>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d063      	beq.n	8004b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a72:	4b4c      	ldr	r3, [pc, #304]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a7e:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d11c      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x18c>
 8004a8a:	4b46      	ldr	r3, [pc, #280]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a96:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_RCC_OscConfig+0x176>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d001      	beq.n	8004aae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e1c0      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4939      	ldr	r1, [pc, #228]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	e03a      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004acc:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCC_OscConfig+0x270>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fd ff3d 	bl	8002950 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd ff39 	bl	8002950 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e1a1      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4927      	ldr	r1, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
 8004b0c:	e015      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x270>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fd ff1c 	bl	8002950 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1c:	f7fd ff18 	bl	8002950 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e180      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03a      	beq.n	8004bbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b54:	f7fd fefc 	bl	8002950 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fef8 	bl	8002950 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e160      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f000 face 	bl	800511c <RCC_Delay>
 8004b80:	e01c      	b.n	8004bbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b88:	f7fd fee2 	bl	8002950 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8e:	e00f      	b.n	8004bb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fd fede 	bl	8002950 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d908      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e146      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	42420000 	.word	0x42420000
 8004bac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb0:	4b92      	ldr	r3, [pc, #584]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e9      	bne.n	8004b90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 80a6 	beq.w	8004d16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bce:	4b8b      	ldr	r3, [pc, #556]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	4a87      	ldr	r2, [pc, #540]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	61d3      	str	r3, [r2, #28]
 8004be6:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <HAL_RCC_OscConfig+0x4c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d118      	bne.n	8004c34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c02:	4b7f      	ldr	r3, [pc, #508]	; (8004e00 <HAL_RCC_OscConfig+0x4c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7e      	ldr	r2, [pc, #504]	; (8004e00 <HAL_RCC_OscConfig+0x4c8>)
 8004c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fe9f 	bl	8002950 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fd fe9b 	bl	8002950 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	; 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e103      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x4c8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCC_OscConfig+0x312>
 8004c3c:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	4a6e      	ldr	r2, [pc, #440]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6213      	str	r3, [r2, #32]
 8004c48:	e02d      	b.n	8004ca6 <HAL_RCC_OscConfig+0x36e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x334>
 8004c52:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	6213      	str	r3, [r2, #32]
 8004c5e:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4a66      	ldr	r2, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6213      	str	r3, [r2, #32]
 8004c6a:	e01c      	b.n	8004ca6 <HAL_RCC_OscConfig+0x36e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d10c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x356>
 8004c74:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4a60      	ldr	r2, [pc, #384]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	6213      	str	r3, [r2, #32]
 8004c80:	4b5e      	ldr	r3, [pc, #376]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a5d      	ldr	r2, [pc, #372]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	6213      	str	r3, [r2, #32]
 8004c8c:	e00b      	b.n	8004ca6 <HAL_RCC_OscConfig+0x36e>
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	4a5a      	ldr	r2, [pc, #360]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	6213      	str	r3, [r2, #32]
 8004c9a:	4b58      	ldr	r3, [pc, #352]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4a57      	ldr	r2, [pc, #348]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d015      	beq.n	8004cda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7fd fe4f 	bl	8002950 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fd fe4b 	bl	8002950 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0b1      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0ee      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x37e>
 8004cd8:	e014      	b.n	8004d04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cda:	f7fd fe39 	bl	8002950 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fd fe35 	bl	8002950 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e09b      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ee      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0a:	4b3c      	ldr	r3, [pc, #240]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8087 	beq.w	8004e2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d20:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d061      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d146      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d34:	4b33      	ldr	r3, [pc, #204]	; (8004e04 <HAL_RCC_OscConfig+0x4cc>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fd fe09 	bl	8002950 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fd fe05 	bl	8002950 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e06d      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d68:	d108      	bne.n	8004d7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4921      	ldr	r1, [pc, #132]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7c:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a19      	ldr	r1, [r3, #32]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	491b      	ldr	r1, [pc, #108]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x4cc>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fd fdd9 	bl	8002950 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da2:	f7fd fdd5 	bl	8002950 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e03d      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x46a>
 8004dc0:	e035      	b.n	8004e2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fdc2 	bl	8002950 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd fdbe 	bl	8002950 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e026      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x498>
 8004dee:	e01e      	b.n	8004e2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e019      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40007000 	.word	0x40007000
 8004e04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <HAL_RCC_OscConfig+0x500>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d106      	bne.n	8004e2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000

08004e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0d0      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e50:	4b6a      	ldr	r3, [pc, #424]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d910      	bls.n	8004e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b67      	ldr	r3, [pc, #412]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 0207 	bic.w	r2, r3, #7
 8004e66:	4965      	ldr	r1, [pc, #404]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	4b63      	ldr	r3, [pc, #396]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0b8      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d020      	beq.n	8004ece <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e98:	4b59      	ldr	r3, [pc, #356]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a58      	ldr	r2, [pc, #352]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ea2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eb0:	4b53      	ldr	r3, [pc, #332]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4a52      	ldr	r2, [pc, #328]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004eba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	494d      	ldr	r1, [pc, #308]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d040      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b47      	ldr	r3, [pc, #284]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d115      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e07f      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e073      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0a:	4b3d      	ldr	r3, [pc, #244]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06b      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4936      	ldr	r1, [pc, #216]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f2c:	f7fd fd10 	bl	8002950 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fd fd0c 	bl	8002950 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e053      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d210      	bcs.n	8004f8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	4922      	ldr	r1, [pc, #136]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <HAL_RCC_ClockConfig+0x1c0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e032      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4916      	ldr	r1, [pc, #88]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fb6:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	490e      	ldr	r1, [pc, #56]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fca:	f000 f821 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	490a      	ldr	r1, [pc, #40]	; (8005004 <HAL_RCC_ClockConfig+0x1c8>)
 8004fdc:	5ccb      	ldrb	r3, [r1, r3]
 8004fde:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe2:	4a09      	ldr	r2, [pc, #36]	; (8005008 <HAL_RCC_ClockConfig+0x1cc>)
 8004fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fe6:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_RCC_ClockConfig+0x1d0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd fc6e 	bl	80028cc <HAL_InitTick>

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40022000 	.word	0x40022000
 8005000:	40021000 	.word	0x40021000
 8005004:	080068b4 	.word	0x080068b4
 8005008:	2000000c 	.word	0x2000000c
 800500c:	20000010 	.word	0x20000010

08005010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800502a:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b04      	cmp	r3, #4
 8005038:	d002      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x30>
 800503a:	2b08      	cmp	r3, #8
 800503c:	d003      	beq.n	8005046 <HAL_RCC_GetSysClockFreq+0x36>
 800503e:	e027      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005042:	613b      	str	r3, [r7, #16]
      break;
 8005044:	e027      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	0c9b      	lsrs	r3, r3, #18
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005050:	5cd3      	ldrb	r3, [r2, r3]
 8005052:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d010      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	0c5b      	lsrs	r3, r3, #17
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005072:	fb03 f202 	mul.w	r2, r3, r2
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e004      	b.n	800508a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	613b      	str	r3, [r7, #16]
      break;
 800508e:	e002      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005092:	613b      	str	r3, [r7, #16]
      break;
 8005094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005096:	693b      	ldr	r3, [r7, #16]
}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000
 80050a8:	007a1200 	.word	0x007a1200
 80050ac:	080068cc 	.word	0x080068cc
 80050b0:	080068dc 	.word	0x080068dc
 80050b4:	003d0900 	.word	0x003d0900

080050b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b02      	ldr	r3, [pc, #8]	; (80050c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr
 80050c8:	2000000c 	.word	0x2000000c

080050cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050d0:	f7ff fff2 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050d4:	4602      	mov	r2, r0
 80050d6:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e2:	5ccb      	ldrb	r3, [r1, r3]
 80050e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000
 80050f0:	080068c4 	.word	0x080068c4

080050f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050f8:	f7ff ffde 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	0adb      	lsrs	r3, r3, #11
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	4903      	ldr	r1, [pc, #12]	; (8005118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510a:	5ccb      	ldrb	r3, [r1, r3]
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	080068c4 	.word	0x080068c4

0800511c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <RCC_Delay+0x34>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <RCC_Delay+0x38>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005138:	bf00      	nop
  }
  while (Delay --);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f9      	bne.n	8005138 <RCC_Delay+0x1c>
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	2000000c 	.word	0x2000000c
 8005154:	10624dd3 	.word	0x10624dd3

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d07d      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005178:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10d      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	4b4c      	ldr	r3, [pc, #304]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518e:	61d3      	str	r3, [r2, #28]
 8005190:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d118      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a42      	ldr	r2, [pc, #264]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b8:	f7fd fbca 	bl	8002950 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c0:	f7fd fbc6 	bl	8002950 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e06d      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02e      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d027      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051fc:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800520c:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005212:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd fb95 	bl	8002950 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	e00a      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fd fb91 	bl	8002950 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	; 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d901      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e036      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005240:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ee      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4917      	ldr	r1, [pc, #92]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	4313      	orrs	r3, r2
 800525c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	490b      	ldr	r1, [pc, #44]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	4904      	ldr	r1, [pc, #16]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42420440 	.word	0x42420440

080052c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	f200 808a 	bhi.w	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d045      	beq.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d075      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80052fa:	e082      	b.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80052fc:	4b46      	ldr	r3, [pc, #280]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005302:	4b45      	ldr	r3, [pc, #276]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d07b      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	4a41      	ldr	r2, [pc, #260]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d015      	beq.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0c5b      	lsrs	r3, r3, #17
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005340:	4a38      	ldr	r2, [pc, #224]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	fbb2 f2f3 	udiv	r2, r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e004      	b.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4a34      	ldr	r2, [pc, #208]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800535c:	4b2e      	ldr	r3, [pc, #184]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005368:	d102      	bne.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	61bb      	str	r3, [r7, #24]
      break;
 800536e:	e04a      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	61bb      	str	r3, [r7, #24]
      break;
 800537e:	e042      	b.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005380:	4b25      	ldr	r3, [pc, #148]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005390:	d108      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800539c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e01f      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ae:	d109      	bne.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80053bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e00f      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ce:	d11c      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d016      	beq.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80053dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053e0:	61bb      	str	r3, [r7, #24]
      break;
 80053e2:	e012      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80053e4:	e011      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80053e6:	f7ff fe85 	bl	80050f4 <HAL_RCC_GetPCLK2Freq>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	0b9b      	lsrs	r3, r3, #14
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	3301      	adds	r3, #1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
      break;
 8005400:	e004      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005402:	bf00      	nop
 8005404:	e002      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800540a:	bf00      	nop
    }
  }
  return (frequency);
 800540c:	69bb      	ldr	r3, [r7, #24]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	080068e0 	.word	0x080068e0
 8005420:	080068f0 	.word	0x080068f0
 8005424:	007a1200 	.word	0x007a1200
 8005428:	003d0900 	.word	0x003d0900
 800542c:	aaaaaaab 	.word	0xaaaaaaab

08005430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e041      	b.n	80054c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fd f8e2 	bl	8002620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 fabe 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d001      	beq.n	80054e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e032      	b.n	800554e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a18      	ldr	r2, [pc, #96]	; (8005558 <HAL_TIM_Base_Start+0x88>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIM_Base_Start+0x48>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d009      	beq.n	8005518 <HAL_TIM_Base_Start+0x48>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <HAL_TIM_Base_Start+0x8c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_Base_Start+0x48>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <HAL_TIM_Base_Start+0x90>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d111      	bne.n	800553c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b06      	cmp	r3, #6
 8005528:	d010      	beq.n	800554c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 0201 	orr.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	e007      	b.n	800554c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800

08005564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e03a      	b.n	80055f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIM_Base_Start_IT+0x98>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x58>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x58>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_TIM_Base_Start_IT+0x9c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x58>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <HAL_TIM_Base_Start_IT+0xa0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d111      	bne.n	80055e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d010      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	e007      	b.n	80055f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800

08005608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b02      	cmp	r3, #2
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0202 	mvn.w	r2, #2
 8005634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9b4 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9a7 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f9b6 	bl	80059ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b04      	cmp	r3, #4
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0204 	mvn.w	r2, #4
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f98a 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f97d 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f98c 	bl	80059ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0208 	mvn.w	r2, #8
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2204      	movs	r2, #4
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f960 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f953 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f962 	bl	80059ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b10      	cmp	r3, #16
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0210 	mvn.w	r2, #16
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2208      	movs	r2, #8
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f936 	bl	80059b8 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f929 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f938 	bl	80059ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b01      	cmp	r3, #1
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0201 	mvn.w	r2, #1
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc fe3e 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b80      	cmp	r3, #128	; 0x80
 8005798:	d10e      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a4:	2b80      	cmp	r3, #128	; 0x80
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa7b 	bl	8005cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8fc 	bl	80059dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d10e      	bne.n	8005810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d107      	bne.n	8005810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0220 	mvn.w	r2, #32
 8005808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa46 	bl	8005c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIM_ConfigClockSource+0x1c>
 8005830:	2302      	movs	r3, #2
 8005832:	e0b4      	b.n	800599e <HAL_TIM_ConfigClockSource+0x186>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586c:	d03e      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0xd4>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005872:	f200 8087 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	f000 8086 	beq.w	800598a <HAL_TIM_ConfigClockSource+0x172>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005882:	d87f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b70      	cmp	r3, #112	; 0x70
 8005886:	d01a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xa6>
 8005888:	2b70      	cmp	r3, #112	; 0x70
 800588a:	d87b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b60      	cmp	r3, #96	; 0x60
 800588e:	d050      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x11a>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d877      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b50      	cmp	r3, #80	; 0x50
 8005896:	d03c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xfa>
 8005898:	2b50      	cmp	r3, #80	; 0x50
 800589a:	d873      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d058      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x13a>
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d86f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b30      	cmp	r3, #48	; 0x30
 80058a6:	d064      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d86b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d060      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d867      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d05c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d05a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	e062      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	f000 f968 	bl	8005ba2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      break;
 80058ea:	e04f      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	f000 f951 	bl	8005ba2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e03c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 f8c8 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2150      	movs	r1, #80	; 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f91f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005930:	e02c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f8e6 	bl	8005b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2160      	movs	r1, #96	; 0x60
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f90f 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005950:	e01c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 f8a8 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2140      	movs	r1, #64	; 0x40
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f8ff 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005970:	e00c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 f8f6 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005982:	e003      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e000      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800598a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_Base_SetConfig+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <TIM_Base_SetConfig+0xc0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <TIM_Base_SetConfig+0xbc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <TIM_Base_SetConfig+0xc0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800

08005ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 030a 	bic.w	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	031b      	lsls	r3, r3, #12
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	021a      	lsls	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e046      	b.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d009      	beq.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d10c      	bne.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800

08005c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e042      	b.n	8005d58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fce6 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f82b 	bl	8005d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695a      	ldr	r2, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d9a:	f023 030c 	bic.w	r3, r3, #12
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	430b      	orrs	r3, r1
 8005da6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <UART_SetConfig+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d103      	bne.n	8005dd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7ff f994 	bl	80050f4 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	e002      	b.n	8005dd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7ff f97c 	bl	80050cc <HAL_RCC_GetPCLK1Freq>
 8005dd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009a      	lsls	r2, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <UART_SetConfig+0x118>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	0119      	lsls	r1, r3, #4
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009a      	lsls	r2, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <UART_SetConfig+0x118>)
 8005e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2064      	movs	r0, #100	; 0x64
 8005e16:	fb00 f303 	mul.w	r3, r0, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	3332      	adds	r3, #50	; 0x32
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <UART_SetConfig+0x118>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2c:	4419      	add	r1, r3
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009a      	lsls	r2, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e44:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <UART_SetConfig+0x118>)
 8005e46:	fba3 0302 	umull	r0, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2064      	movs	r0, #100	; 0x64
 8005e4e:	fb00 f303 	mul.w	r3, r0, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <UART_SetConfig+0x118>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	440a      	add	r2, r1
 8005e6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40013800 	.word	0x40013800
 8005e78:	51eb851f 	.word	0x51eb851f

08005e7c <_vsiprintf_r>:
 8005e7c:	b500      	push	{lr}
 8005e7e:	b09b      	sub	sp, #108	; 0x6c
 8005e80:	9100      	str	r1, [sp, #0]
 8005e82:	9104      	str	r1, [sp, #16]
 8005e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	9102      	str	r1, [sp, #8]
 8005e8c:	4905      	ldr	r1, [pc, #20]	; (8005ea4 <_vsiprintf_r+0x28>)
 8005e8e:	9103      	str	r1, [sp, #12]
 8005e90:	4669      	mov	r1, sp
 8005e92:	f000 f995 	bl	80061c0 <_svfiprintf_r>
 8005e96:	2200      	movs	r2, #0
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	b01b      	add	sp, #108	; 0x6c
 8005e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ea2:	bf00      	nop
 8005ea4:	ffff0208 	.word	0xffff0208

08005ea8 <vsiprintf>:
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	460a      	mov	r2, r1
 8005eac:	4601      	mov	r1, r0
 8005eae:	4802      	ldr	r0, [pc, #8]	; (8005eb8 <vsiprintf+0x10>)
 8005eb0:	6800      	ldr	r0, [r0, #0]
 8005eb2:	f7ff bfe3 	b.w	8005e7c <_vsiprintf_r>
 8005eb6:	bf00      	nop
 8005eb8:	20000064 	.word	0x20000064

08005ebc <memset>:
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4402      	add	r2, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <__errno>:
 8005ecc:	4b01      	ldr	r3, [pc, #4]	; (8005ed4 <__errno+0x8>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000064 	.word	0x20000064

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	2600      	movs	r6, #0
 8005edc:	4d0c      	ldr	r5, [pc, #48]	; (8005f10 <__libc_init_array+0x38>)
 8005ede:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	f000 fcc0 	bl	800686c <_init>
 8005eec:	2600      	movs	r6, #0
 8005eee:	4d0a      	ldr	r5, [pc, #40]	; (8005f18 <__libc_init_array+0x40>)
 8005ef0:	4c0a      	ldr	r4, [pc, #40]	; (8005f1c <__libc_init_array+0x44>)
 8005ef2:	1b64      	subs	r4, r4, r5
 8005ef4:	10a4      	asrs	r4, r4, #2
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	08006928 	.word	0x08006928
 8005f14:	08006928 	.word	0x08006928
 8005f18:	08006928 	.word	0x08006928
 8005f1c:	0800692c 	.word	0x0800692c

08005f20 <__retarget_lock_acquire_recursive>:
 8005f20:	4770      	bx	lr

08005f22 <__retarget_lock_release_recursive>:
 8005f22:	4770      	bx	lr

08005f24 <_free_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4605      	mov	r5, r0
 8005f28:	2900      	cmp	r1, #0
 8005f2a:	d040      	beq.n	8005fae <_free_r+0x8a>
 8005f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f30:	1f0c      	subs	r4, r1, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfb8      	it	lt
 8005f36:	18e4      	addlt	r4, r4, r3
 8005f38:	f000 f8dc 	bl	80060f4 <__malloc_lock>
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <_free_r+0x8c>)
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	b933      	cbnz	r3, 8005f50 <_free_r+0x2c>
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	6014      	str	r4, [r2, #0]
 8005f46:	4628      	mov	r0, r5
 8005f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f4c:	f000 b8d8 	b.w	8006100 <__malloc_unlock>
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d908      	bls.n	8005f66 <_free_r+0x42>
 8005f54:	6820      	ldr	r0, [r4, #0]
 8005f56:	1821      	adds	r1, r4, r0
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	bf01      	itttt	eq
 8005f5c:	6819      	ldreq	r1, [r3, #0]
 8005f5e:	685b      	ldreq	r3, [r3, #4]
 8005f60:	1809      	addeq	r1, r1, r0
 8005f62:	6021      	streq	r1, [r4, #0]
 8005f64:	e7ed      	b.n	8005f42 <_free_r+0x1e>
 8005f66:	461a      	mov	r2, r3
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	b10b      	cbz	r3, 8005f70 <_free_r+0x4c>
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	d9fa      	bls.n	8005f66 <_free_r+0x42>
 8005f70:	6811      	ldr	r1, [r2, #0]
 8005f72:	1850      	adds	r0, r2, r1
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d10b      	bne.n	8005f90 <_free_r+0x6c>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	1850      	adds	r0, r2, r1
 8005f7e:	4283      	cmp	r3, r0
 8005f80:	6011      	str	r1, [r2, #0]
 8005f82:	d1e0      	bne.n	8005f46 <_free_r+0x22>
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4408      	add	r0, r1
 8005f8a:	6010      	str	r0, [r2, #0]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	e7da      	b.n	8005f46 <_free_r+0x22>
 8005f90:	d902      	bls.n	8005f98 <_free_r+0x74>
 8005f92:	230c      	movs	r3, #12
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	e7d6      	b.n	8005f46 <_free_r+0x22>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	6054      	str	r4, [r2, #4]
 8005fac:	e7cb      	b.n	8005f46 <_free_r+0x22>
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	200014dc 	.word	0x200014dc

08005fb4 <sbrk_aligned>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4e0e      	ldr	r6, [pc, #56]	; (8005ff0 <sbrk_aligned+0x3c>)
 8005fb8:	460c      	mov	r4, r1
 8005fba:	6831      	ldr	r1, [r6, #0]
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	b911      	cbnz	r1, 8005fc6 <sbrk_aligned+0x12>
 8005fc0:	f000 fbaa 	bl	8006718 <_sbrk_r>
 8005fc4:	6030      	str	r0, [r6, #0]
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 fba5 	bl	8006718 <_sbrk_r>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	d00a      	beq.n	8005fe8 <sbrk_aligned+0x34>
 8005fd2:	1cc4      	adds	r4, r0, #3
 8005fd4:	f024 0403 	bic.w	r4, r4, #3
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	d007      	beq.n	8005fec <sbrk_aligned+0x38>
 8005fdc:	1a21      	subs	r1, r4, r0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fb9a 	bl	8006718 <_sbrk_r>
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d101      	bne.n	8005fec <sbrk_aligned+0x38>
 8005fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fec:	4620      	mov	r0, r4
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	200014e0 	.word	0x200014e0

08005ff4 <_malloc_r>:
 8005ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff8:	1ccd      	adds	r5, r1, #3
 8005ffa:	f025 0503 	bic.w	r5, r5, #3
 8005ffe:	3508      	adds	r5, #8
 8006000:	2d0c      	cmp	r5, #12
 8006002:	bf38      	it	cc
 8006004:	250c      	movcc	r5, #12
 8006006:	2d00      	cmp	r5, #0
 8006008:	4607      	mov	r7, r0
 800600a:	db01      	blt.n	8006010 <_malloc_r+0x1c>
 800600c:	42a9      	cmp	r1, r5
 800600e:	d905      	bls.n	800601c <_malloc_r+0x28>
 8006010:	230c      	movs	r3, #12
 8006012:	2600      	movs	r6, #0
 8006014:	603b      	str	r3, [r7, #0]
 8006016:	4630      	mov	r0, r6
 8006018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060f0 <_malloc_r+0xfc>
 8006020:	f000 f868 	bl	80060f4 <__malloc_lock>
 8006024:	f8d8 3000 	ldr.w	r3, [r8]
 8006028:	461c      	mov	r4, r3
 800602a:	bb5c      	cbnz	r4, 8006084 <_malloc_r+0x90>
 800602c:	4629      	mov	r1, r5
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff ffc0 	bl	8005fb4 <sbrk_aligned>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	4604      	mov	r4, r0
 8006038:	d155      	bne.n	80060e6 <_malloc_r+0xf2>
 800603a:	f8d8 4000 	ldr.w	r4, [r8]
 800603e:	4626      	mov	r6, r4
 8006040:	2e00      	cmp	r6, #0
 8006042:	d145      	bne.n	80060d0 <_malloc_r+0xdc>
 8006044:	2c00      	cmp	r4, #0
 8006046:	d048      	beq.n	80060da <_malloc_r+0xe6>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	4631      	mov	r1, r6
 800604c:	4638      	mov	r0, r7
 800604e:	eb04 0903 	add.w	r9, r4, r3
 8006052:	f000 fb61 	bl	8006718 <_sbrk_r>
 8006056:	4581      	cmp	r9, r0
 8006058:	d13f      	bne.n	80060da <_malloc_r+0xe6>
 800605a:	6821      	ldr	r1, [r4, #0]
 800605c:	4638      	mov	r0, r7
 800605e:	1a6d      	subs	r5, r5, r1
 8006060:	4629      	mov	r1, r5
 8006062:	f7ff ffa7 	bl	8005fb4 <sbrk_aligned>
 8006066:	3001      	adds	r0, #1
 8006068:	d037      	beq.n	80060da <_malloc_r+0xe6>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	442b      	add	r3, r5
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	f8d8 3000 	ldr.w	r3, [r8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d038      	beq.n	80060ea <_malloc_r+0xf6>
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	42a2      	cmp	r2, r4
 800607c:	d12b      	bne.n	80060d6 <_malloc_r+0xe2>
 800607e:	2200      	movs	r2, #0
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	e00f      	b.n	80060a4 <_malloc_r+0xb0>
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	1b52      	subs	r2, r2, r5
 8006088:	d41f      	bmi.n	80060ca <_malloc_r+0xd6>
 800608a:	2a0b      	cmp	r2, #11
 800608c:	d917      	bls.n	80060be <_malloc_r+0xca>
 800608e:	1961      	adds	r1, r4, r5
 8006090:	42a3      	cmp	r3, r4
 8006092:	6025      	str	r5, [r4, #0]
 8006094:	bf18      	it	ne
 8006096:	6059      	strne	r1, [r3, #4]
 8006098:	6863      	ldr	r3, [r4, #4]
 800609a:	bf08      	it	eq
 800609c:	f8c8 1000 	streq.w	r1, [r8]
 80060a0:	5162      	str	r2, [r4, r5]
 80060a2:	604b      	str	r3, [r1, #4]
 80060a4:	4638      	mov	r0, r7
 80060a6:	f104 060b 	add.w	r6, r4, #11
 80060aa:	f000 f829 	bl	8006100 <__malloc_unlock>
 80060ae:	f026 0607 	bic.w	r6, r6, #7
 80060b2:	1d23      	adds	r3, r4, #4
 80060b4:	1af2      	subs	r2, r6, r3
 80060b6:	d0ae      	beq.n	8006016 <_malloc_r+0x22>
 80060b8:	1b9b      	subs	r3, r3, r6
 80060ba:	50a3      	str	r3, [r4, r2]
 80060bc:	e7ab      	b.n	8006016 <_malloc_r+0x22>
 80060be:	42a3      	cmp	r3, r4
 80060c0:	6862      	ldr	r2, [r4, #4]
 80060c2:	d1dd      	bne.n	8006080 <_malloc_r+0x8c>
 80060c4:	f8c8 2000 	str.w	r2, [r8]
 80060c8:	e7ec      	b.n	80060a4 <_malloc_r+0xb0>
 80060ca:	4623      	mov	r3, r4
 80060cc:	6864      	ldr	r4, [r4, #4]
 80060ce:	e7ac      	b.n	800602a <_malloc_r+0x36>
 80060d0:	4634      	mov	r4, r6
 80060d2:	6876      	ldr	r6, [r6, #4]
 80060d4:	e7b4      	b.n	8006040 <_malloc_r+0x4c>
 80060d6:	4613      	mov	r3, r2
 80060d8:	e7cc      	b.n	8006074 <_malloc_r+0x80>
 80060da:	230c      	movs	r3, #12
 80060dc:	4638      	mov	r0, r7
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	f000 f80e 	bl	8006100 <__malloc_unlock>
 80060e4:	e797      	b.n	8006016 <_malloc_r+0x22>
 80060e6:	6025      	str	r5, [r4, #0]
 80060e8:	e7dc      	b.n	80060a4 <_malloc_r+0xb0>
 80060ea:	605b      	str	r3, [r3, #4]
 80060ec:	deff      	udf	#255	; 0xff
 80060ee:	bf00      	nop
 80060f0:	200014dc 	.word	0x200014dc

080060f4 <__malloc_lock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__malloc_lock+0x8>)
 80060f6:	f7ff bf13 	b.w	8005f20 <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	200014d8 	.word	0x200014d8

08006100 <__malloc_unlock>:
 8006100:	4801      	ldr	r0, [pc, #4]	; (8006108 <__malloc_unlock+0x8>)
 8006102:	f7ff bf0e 	b.w	8005f22 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	200014d8 	.word	0x200014d8

0800610c <__ssputs_r>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	461f      	mov	r7, r3
 8006112:	688e      	ldr	r6, [r1, #8]
 8006114:	4682      	mov	sl, r0
 8006116:	42be      	cmp	r6, r7
 8006118:	460c      	mov	r4, r1
 800611a:	4690      	mov	r8, r2
 800611c:	680b      	ldr	r3, [r1, #0]
 800611e:	d82c      	bhi.n	800617a <__ssputs_r+0x6e>
 8006120:	898a      	ldrh	r2, [r1, #12]
 8006122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006126:	d026      	beq.n	8006176 <__ssputs_r+0x6a>
 8006128:	6965      	ldr	r5, [r4, #20]
 800612a:	6909      	ldr	r1, [r1, #16]
 800612c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006130:	eba3 0901 	sub.w	r9, r3, r1
 8006134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006138:	1c7b      	adds	r3, r7, #1
 800613a:	444b      	add	r3, r9
 800613c:	106d      	asrs	r5, r5, #1
 800613e:	429d      	cmp	r5, r3
 8006140:	bf38      	it	cc
 8006142:	461d      	movcc	r5, r3
 8006144:	0553      	lsls	r3, r2, #21
 8006146:	d527      	bpl.n	8006198 <__ssputs_r+0x8c>
 8006148:	4629      	mov	r1, r5
 800614a:	f7ff ff53 	bl	8005ff4 <_malloc_r>
 800614e:	4606      	mov	r6, r0
 8006150:	b360      	cbz	r0, 80061ac <__ssputs_r+0xa0>
 8006152:	464a      	mov	r2, r9
 8006154:	6921      	ldr	r1, [r4, #16]
 8006156:	f000 fafd 	bl	8006754 <memcpy>
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	6126      	str	r6, [r4, #16]
 8006168:	444e      	add	r6, r9
 800616a:	6026      	str	r6, [r4, #0]
 800616c:	463e      	mov	r6, r7
 800616e:	6165      	str	r5, [r4, #20]
 8006170:	eba5 0509 	sub.w	r5, r5, r9
 8006174:	60a5      	str	r5, [r4, #8]
 8006176:	42be      	cmp	r6, r7
 8006178:	d900      	bls.n	800617c <__ssputs_r+0x70>
 800617a:	463e      	mov	r6, r7
 800617c:	4632      	mov	r2, r6
 800617e:	4641      	mov	r1, r8
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	f000 faaf 	bl	80066e4 <memmove>
 8006186:	2000      	movs	r0, #0
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	1b9b      	subs	r3, r3, r6
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	4433      	add	r3, r6
 8006192:	6023      	str	r3, [r4, #0]
 8006194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006198:	462a      	mov	r2, r5
 800619a:	f000 fae9 	bl	8006770 <_realloc_r>
 800619e:	4606      	mov	r6, r0
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d1e0      	bne.n	8006166 <__ssputs_r+0x5a>
 80061a4:	4650      	mov	r0, sl
 80061a6:	6921      	ldr	r1, [r4, #16]
 80061a8:	f7ff febc 	bl	8005f24 <_free_r>
 80061ac:	230c      	movs	r3, #12
 80061ae:	f8ca 3000 	str.w	r3, [sl]
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	e7e9      	b.n	8006194 <__ssputs_r+0x88>

080061c0 <_svfiprintf_r>:
 80061c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	4698      	mov	r8, r3
 80061c6:	898b      	ldrh	r3, [r1, #12]
 80061c8:	4607      	mov	r7, r0
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	460d      	mov	r5, r1
 80061ce:	4614      	mov	r4, r2
 80061d0:	b09d      	sub	sp, #116	; 0x74
 80061d2:	d50e      	bpl.n	80061f2 <_svfiprintf_r+0x32>
 80061d4:	690b      	ldr	r3, [r1, #16]
 80061d6:	b963      	cbnz	r3, 80061f2 <_svfiprintf_r+0x32>
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	f7ff ff0b 	bl	8005ff4 <_malloc_r>
 80061de:	6028      	str	r0, [r5, #0]
 80061e0:	6128      	str	r0, [r5, #16]
 80061e2:	b920      	cbnz	r0, 80061ee <_svfiprintf_r+0x2e>
 80061e4:	230c      	movs	r3, #12
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	e0d0      	b.n	8006390 <_svfiprintf_r+0x1d0>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	616b      	str	r3, [r5, #20]
 80061f2:	2300      	movs	r3, #0
 80061f4:	9309      	str	r3, [sp, #36]	; 0x24
 80061f6:	2320      	movs	r3, #32
 80061f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061fc:	2330      	movs	r3, #48	; 0x30
 80061fe:	f04f 0901 	mov.w	r9, #1
 8006202:	f8cd 800c 	str.w	r8, [sp, #12]
 8006206:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80063a8 <_svfiprintf_r+0x1e8>
 800620a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800620e:	4623      	mov	r3, r4
 8006210:	469a      	mov	sl, r3
 8006212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006216:	b10a      	cbz	r2, 800621c <_svfiprintf_r+0x5c>
 8006218:	2a25      	cmp	r2, #37	; 0x25
 800621a:	d1f9      	bne.n	8006210 <_svfiprintf_r+0x50>
 800621c:	ebba 0b04 	subs.w	fp, sl, r4
 8006220:	d00b      	beq.n	800623a <_svfiprintf_r+0x7a>
 8006222:	465b      	mov	r3, fp
 8006224:	4622      	mov	r2, r4
 8006226:	4629      	mov	r1, r5
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ff6f 	bl	800610c <__ssputs_r>
 800622e:	3001      	adds	r0, #1
 8006230:	f000 80a9 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006236:	445a      	add	r2, fp
 8006238:	9209      	str	r2, [sp, #36]	; 0x24
 800623a:	f89a 3000 	ldrb.w	r3, [sl]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80a1 	beq.w	8006386 <_svfiprintf_r+0x1c6>
 8006244:	2300      	movs	r3, #0
 8006246:	f04f 32ff 	mov.w	r2, #4294967295
 800624a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624e:	f10a 0a01 	add.w	sl, sl, #1
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	9307      	str	r3, [sp, #28]
 8006256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800625a:	931a      	str	r3, [sp, #104]	; 0x68
 800625c:	4654      	mov	r4, sl
 800625e:	2205      	movs	r2, #5
 8006260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006264:	4850      	ldr	r0, [pc, #320]	; (80063a8 <_svfiprintf_r+0x1e8>)
 8006266:	f000 fa67 	bl	8006738 <memchr>
 800626a:	9a04      	ldr	r2, [sp, #16]
 800626c:	b9d8      	cbnz	r0, 80062a6 <_svfiprintf_r+0xe6>
 800626e:	06d0      	lsls	r0, r2, #27
 8006270:	bf44      	itt	mi
 8006272:	2320      	movmi	r3, #32
 8006274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006278:	0711      	lsls	r1, r2, #28
 800627a:	bf44      	itt	mi
 800627c:	232b      	movmi	r3, #43	; 0x2b
 800627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006282:	f89a 3000 	ldrb.w	r3, [sl]
 8006286:	2b2a      	cmp	r3, #42	; 0x2a
 8006288:	d015      	beq.n	80062b6 <_svfiprintf_r+0xf6>
 800628a:	4654      	mov	r4, sl
 800628c:	2000      	movs	r0, #0
 800628e:	f04f 0c0a 	mov.w	ip, #10
 8006292:	9a07      	ldr	r2, [sp, #28]
 8006294:	4621      	mov	r1, r4
 8006296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800629a:	3b30      	subs	r3, #48	; 0x30
 800629c:	2b09      	cmp	r3, #9
 800629e:	d94d      	bls.n	800633c <_svfiprintf_r+0x17c>
 80062a0:	b1b0      	cbz	r0, 80062d0 <_svfiprintf_r+0x110>
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	e014      	b.n	80062d0 <_svfiprintf_r+0x110>
 80062a6:	eba0 0308 	sub.w	r3, r0, r8
 80062aa:	fa09 f303 	lsl.w	r3, r9, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	46a2      	mov	sl, r4
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	e7d2      	b.n	800625c <_svfiprintf_r+0x9c>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	9103      	str	r1, [sp, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bfbb      	ittet	lt
 80062c2:	425b      	neglt	r3, r3
 80062c4:	f042 0202 	orrlt.w	r2, r2, #2
 80062c8:	9307      	strge	r3, [sp, #28]
 80062ca:	9307      	strlt	r3, [sp, #28]
 80062cc:	bfb8      	it	lt
 80062ce:	9204      	strlt	r2, [sp, #16]
 80062d0:	7823      	ldrb	r3, [r4, #0]
 80062d2:	2b2e      	cmp	r3, #46	; 0x2e
 80062d4:	d10c      	bne.n	80062f0 <_svfiprintf_r+0x130>
 80062d6:	7863      	ldrb	r3, [r4, #1]
 80062d8:	2b2a      	cmp	r3, #42	; 0x2a
 80062da:	d134      	bne.n	8006346 <_svfiprintf_r+0x186>
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	3402      	adds	r4, #2
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	9203      	str	r2, [sp, #12]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bfb8      	it	lt
 80062ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80063ac <_svfiprintf_r+0x1ec>
 80062f4:	2203      	movs	r2, #3
 80062f6:	4650      	mov	r0, sl
 80062f8:	7821      	ldrb	r1, [r4, #0]
 80062fa:	f000 fa1d 	bl	8006738 <memchr>
 80062fe:	b138      	cbz	r0, 8006310 <_svfiprintf_r+0x150>
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	eba0 000a 	sub.w	r0, r0, sl
 8006308:	4082      	lsls	r2, r0
 800630a:	4313      	orrs	r3, r2
 800630c:	3401      	adds	r4, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	2206      	movs	r2, #6
 8006316:	4826      	ldr	r0, [pc, #152]	; (80063b0 <_svfiprintf_r+0x1f0>)
 8006318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800631c:	f000 fa0c 	bl	8006738 <memchr>
 8006320:	2800      	cmp	r0, #0
 8006322:	d038      	beq.n	8006396 <_svfiprintf_r+0x1d6>
 8006324:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <_svfiprintf_r+0x1f4>)
 8006326:	bb1b      	cbnz	r3, 8006370 <_svfiprintf_r+0x1b0>
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	3307      	adds	r3, #7
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	3308      	adds	r3, #8
 8006332:	9303      	str	r3, [sp, #12]
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	4433      	add	r3, r6
 8006338:	9309      	str	r3, [sp, #36]	; 0x24
 800633a:	e768      	b.n	800620e <_svfiprintf_r+0x4e>
 800633c:	460c      	mov	r4, r1
 800633e:	2001      	movs	r0, #1
 8006340:	fb0c 3202 	mla	r2, ip, r2, r3
 8006344:	e7a6      	b.n	8006294 <_svfiprintf_r+0xd4>
 8006346:	2300      	movs	r3, #0
 8006348:	f04f 0c0a 	mov.w	ip, #10
 800634c:	4619      	mov	r1, r3
 800634e:	3401      	adds	r4, #1
 8006350:	9305      	str	r3, [sp, #20]
 8006352:	4620      	mov	r0, r4
 8006354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006358:	3a30      	subs	r2, #48	; 0x30
 800635a:	2a09      	cmp	r2, #9
 800635c:	d903      	bls.n	8006366 <_svfiprintf_r+0x1a6>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c6      	beq.n	80062f0 <_svfiprintf_r+0x130>
 8006362:	9105      	str	r1, [sp, #20]
 8006364:	e7c4      	b.n	80062f0 <_svfiprintf_r+0x130>
 8006366:	4604      	mov	r4, r0
 8006368:	2301      	movs	r3, #1
 800636a:	fb0c 2101 	mla	r1, ip, r1, r2
 800636e:	e7f0      	b.n	8006352 <_svfiprintf_r+0x192>
 8006370:	ab03      	add	r3, sp, #12
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	462a      	mov	r2, r5
 8006376:	4638      	mov	r0, r7
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <_svfiprintf_r+0x1f8>)
 800637a:	a904      	add	r1, sp, #16
 800637c:	f3af 8000 	nop.w
 8006380:	1c42      	adds	r2, r0, #1
 8006382:	4606      	mov	r6, r0
 8006384:	d1d6      	bne.n	8006334 <_svfiprintf_r+0x174>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	065b      	lsls	r3, r3, #25
 800638a:	f53f af2d 	bmi.w	80061e8 <_svfiprintf_r+0x28>
 800638e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006390:	b01d      	add	sp, #116	; 0x74
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	ab03      	add	r3, sp, #12
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	462a      	mov	r2, r5
 800639c:	4638      	mov	r0, r7
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <_svfiprintf_r+0x1f8>)
 80063a0:	a904      	add	r1, sp, #16
 80063a2:	f000 f87d 	bl	80064a0 <_printf_i>
 80063a6:	e7eb      	b.n	8006380 <_svfiprintf_r+0x1c0>
 80063a8:	080068f2 	.word	0x080068f2
 80063ac:	080068f8 	.word	0x080068f8
 80063b0:	080068fc 	.word	0x080068fc
 80063b4:	00000000 	.word	0x00000000
 80063b8:	0800610d 	.word	0x0800610d

080063bc <_printf_common>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4616      	mov	r6, r2
 80063c2:	4699      	mov	r9, r3
 80063c4:	688a      	ldr	r2, [r1, #8]
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4607      	mov	r7, r0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bfb8      	it	lt
 80063ce:	4613      	movlt	r3, r2
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d6:	460c      	mov	r4, r1
 80063d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063dc:	b10a      	cbz	r2, 80063e2 <_printf_common+0x26>
 80063de:	3301      	adds	r3, #1
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	0699      	lsls	r1, r3, #26
 80063e6:	bf42      	ittt	mi
 80063e8:	6833      	ldrmi	r3, [r6, #0]
 80063ea:	3302      	addmi	r3, #2
 80063ec:	6033      	strmi	r3, [r6, #0]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	f015 0506 	ands.w	r5, r5, #6
 80063f4:	d106      	bne.n	8006404 <_printf_common+0x48>
 80063f6:	f104 0a19 	add.w	sl, r4, #25
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	6832      	ldr	r2, [r6, #0]
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc2b      	bgt.n	800645c <_printf_common+0xa0>
 8006404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006408:	1e13      	subs	r3, r2, #0
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	bf18      	it	ne
 800640e:	2301      	movne	r3, #1
 8006410:	0692      	lsls	r2, r2, #26
 8006412:	d430      	bmi.n	8006476 <_printf_common+0xba>
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d023      	beq.n	800646a <_printf_common+0xae>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	6922      	ldr	r2, [r4, #16]
 8006426:	f003 0306 	and.w	r3, r3, #6
 800642a:	2b04      	cmp	r3, #4
 800642c:	bf14      	ite	ne
 800642e:	2500      	movne	r5, #0
 8006430:	6833      	ldreq	r3, [r6, #0]
 8006432:	f04f 0600 	mov.w	r6, #0
 8006436:	bf08      	it	eq
 8006438:	68e5      	ldreq	r5, [r4, #12]
 800643a:	f104 041a 	add.w	r4, r4, #26
 800643e:	bf08      	it	eq
 8006440:	1aed      	subeq	r5, r5, r3
 8006442:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006446:	bf08      	it	eq
 8006448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800644c:	4293      	cmp	r3, r2
 800644e:	bfc4      	itt	gt
 8006450:	1a9b      	subgt	r3, r3, r2
 8006452:	18ed      	addgt	r5, r5, r3
 8006454:	42b5      	cmp	r5, r6
 8006456:	d11a      	bne.n	800648e <_printf_common+0xd2>
 8006458:	2000      	movs	r0, #0
 800645a:	e008      	b.n	800646e <_printf_common+0xb2>
 800645c:	2301      	movs	r3, #1
 800645e:	4652      	mov	r2, sl
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d103      	bne.n	8006472 <_printf_common+0xb6>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	3501      	adds	r5, #1
 8006474:	e7c1      	b.n	80063fa <_printf_common+0x3e>
 8006476:	2030      	movs	r0, #48	; 0x30
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006484:	4422      	add	r2, r4
 8006486:	3302      	adds	r3, #2
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648c:	e7c2      	b.n	8006414 <_printf_common+0x58>
 800648e:	2301      	movs	r3, #1
 8006490:	4622      	mov	r2, r4
 8006492:	4649      	mov	r1, r9
 8006494:	4638      	mov	r0, r7
 8006496:	47c0      	blx	r8
 8006498:	3001      	adds	r0, #1
 800649a:	d0e6      	beq.n	800646a <_printf_common+0xae>
 800649c:	3601      	adds	r6, #1
 800649e:	e7d9      	b.n	8006454 <_printf_common+0x98>

080064a0 <_printf_i>:
 80064a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	7e0f      	ldrb	r7, [r1, #24]
 80064a6:	4691      	mov	r9, r2
 80064a8:	2f78      	cmp	r7, #120	; 0x78
 80064aa:	4680      	mov	r8, r0
 80064ac:	460c      	mov	r4, r1
 80064ae:	469a      	mov	sl, r3
 80064b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064b6:	d807      	bhi.n	80064c8 <_printf_i+0x28>
 80064b8:	2f62      	cmp	r7, #98	; 0x62
 80064ba:	d80a      	bhi.n	80064d2 <_printf_i+0x32>
 80064bc:	2f00      	cmp	r7, #0
 80064be:	f000 80d5 	beq.w	800666c <_printf_i+0x1cc>
 80064c2:	2f58      	cmp	r7, #88	; 0x58
 80064c4:	f000 80c1 	beq.w	800664a <_printf_i+0x1aa>
 80064c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064d0:	e03a      	b.n	8006548 <_printf_i+0xa8>
 80064d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064d6:	2b15      	cmp	r3, #21
 80064d8:	d8f6      	bhi.n	80064c8 <_printf_i+0x28>
 80064da:	a101      	add	r1, pc, #4	; (adr r1, 80064e0 <_printf_i+0x40>)
 80064dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e0:	08006539 	.word	0x08006539
 80064e4:	0800654d 	.word	0x0800654d
 80064e8:	080064c9 	.word	0x080064c9
 80064ec:	080064c9 	.word	0x080064c9
 80064f0:	080064c9 	.word	0x080064c9
 80064f4:	080064c9 	.word	0x080064c9
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	080064c9 	.word	0x080064c9
 8006500:	080064c9 	.word	0x080064c9
 8006504:	080064c9 	.word	0x080064c9
 8006508:	080064c9 	.word	0x080064c9
 800650c:	08006653 	.word	0x08006653
 8006510:	08006579 	.word	0x08006579
 8006514:	0800660d 	.word	0x0800660d
 8006518:	080064c9 	.word	0x080064c9
 800651c:	080064c9 	.word	0x080064c9
 8006520:	08006675 	.word	0x08006675
 8006524:	080064c9 	.word	0x080064c9
 8006528:	08006579 	.word	0x08006579
 800652c:	080064c9 	.word	0x080064c9
 8006530:	080064c9 	.word	0x080064c9
 8006534:	08006615 	.word	0x08006615
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006548:	2301      	movs	r3, #1
 800654a:	e0a0      	b.n	800668e <_printf_i+0x1ee>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	0607      	lsls	r7, r0, #24
 8006552:	f103 0104 	add.w	r1, r3, #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	d501      	bpl.n	800655e <_printf_i+0xbe>
 800655a:	681e      	ldr	r6, [r3, #0]
 800655c:	e003      	b.n	8006566 <_printf_i+0xc6>
 800655e:	0646      	lsls	r6, r0, #25
 8006560:	d5fb      	bpl.n	800655a <_printf_i+0xba>
 8006562:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006566:	2e00      	cmp	r6, #0
 8006568:	da03      	bge.n	8006572 <_printf_i+0xd2>
 800656a:	232d      	movs	r3, #45	; 0x2d
 800656c:	4276      	negs	r6, r6
 800656e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006572:	230a      	movs	r3, #10
 8006574:	4859      	ldr	r0, [pc, #356]	; (80066dc <_printf_i+0x23c>)
 8006576:	e012      	b.n	800659e <_printf_i+0xfe>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	6029      	str	r1, [r5, #0]
 8006580:	0605      	lsls	r5, r0, #24
 8006582:	d501      	bpl.n	8006588 <_printf_i+0xe8>
 8006584:	681e      	ldr	r6, [r3, #0]
 8006586:	e002      	b.n	800658e <_printf_i+0xee>
 8006588:	0641      	lsls	r1, r0, #25
 800658a:	d5fb      	bpl.n	8006584 <_printf_i+0xe4>
 800658c:	881e      	ldrh	r6, [r3, #0]
 800658e:	2f6f      	cmp	r7, #111	; 0x6f
 8006590:	bf0c      	ite	eq
 8006592:	2308      	moveq	r3, #8
 8006594:	230a      	movne	r3, #10
 8006596:	4851      	ldr	r0, [pc, #324]	; (80066dc <_printf_i+0x23c>)
 8006598:	2100      	movs	r1, #0
 800659a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800659e:	6865      	ldr	r5, [r4, #4]
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	bfa8      	it	ge
 80065a4:	6821      	ldrge	r1, [r4, #0]
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	bfa4      	itt	ge
 80065aa:	f021 0104 	bicge.w	r1, r1, #4
 80065ae:	6021      	strge	r1, [r4, #0]
 80065b0:	b90e      	cbnz	r6, 80065b6 <_printf_i+0x116>
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	d04b      	beq.n	800664e <_printf_i+0x1ae>
 80065b6:	4615      	mov	r5, r2
 80065b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80065bc:	fb03 6711 	mls	r7, r3, r1, r6
 80065c0:	5dc7      	ldrb	r7, [r0, r7]
 80065c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065c6:	4637      	mov	r7, r6
 80065c8:	42bb      	cmp	r3, r7
 80065ca:	460e      	mov	r6, r1
 80065cc:	d9f4      	bls.n	80065b8 <_printf_i+0x118>
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d10b      	bne.n	80065ea <_printf_i+0x14a>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	07de      	lsls	r6, r3, #31
 80065d6:	d508      	bpl.n	80065ea <_printf_i+0x14a>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	6861      	ldr	r1, [r4, #4]
 80065dc:	4299      	cmp	r1, r3
 80065de:	bfde      	ittt	le
 80065e0:	2330      	movle	r3, #48	; 0x30
 80065e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065ea:	1b52      	subs	r2, r2, r5
 80065ec:	6122      	str	r2, [r4, #16]
 80065ee:	464b      	mov	r3, r9
 80065f0:	4621      	mov	r1, r4
 80065f2:	4640      	mov	r0, r8
 80065f4:	f8cd a000 	str.w	sl, [sp]
 80065f8:	aa03      	add	r2, sp, #12
 80065fa:	f7ff fedf 	bl	80063bc <_printf_common>
 80065fe:	3001      	adds	r0, #1
 8006600:	d14a      	bne.n	8006698 <_printf_i+0x1f8>
 8006602:	f04f 30ff 	mov.w	r0, #4294967295
 8006606:	b004      	add	sp, #16
 8006608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	2778      	movs	r7, #120	; 0x78
 8006616:	4832      	ldr	r0, [pc, #200]	; (80066e0 <_printf_i+0x240>)
 8006618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	061f      	lsls	r7, r3, #24
 8006622:	f851 6b04 	ldr.w	r6, [r1], #4
 8006626:	d402      	bmi.n	800662e <_printf_i+0x18e>
 8006628:	065f      	lsls	r7, r3, #25
 800662a:	bf48      	it	mi
 800662c:	b2b6      	uxthmi	r6, r6
 800662e:	07df      	lsls	r7, r3, #31
 8006630:	bf48      	it	mi
 8006632:	f043 0320 	orrmi.w	r3, r3, #32
 8006636:	6029      	str	r1, [r5, #0]
 8006638:	bf48      	it	mi
 800663a:	6023      	strmi	r3, [r4, #0]
 800663c:	b91e      	cbnz	r6, 8006646 <_printf_i+0x1a6>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f023 0320 	bic.w	r3, r3, #32
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2310      	movs	r3, #16
 8006648:	e7a6      	b.n	8006598 <_printf_i+0xf8>
 800664a:	4824      	ldr	r0, [pc, #144]	; (80066dc <_printf_i+0x23c>)
 800664c:	e7e4      	b.n	8006618 <_printf_i+0x178>
 800664e:	4615      	mov	r5, r2
 8006650:	e7bd      	b.n	80065ce <_printf_i+0x12e>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	6826      	ldr	r6, [r4, #0]
 8006656:	1d18      	adds	r0, r3, #4
 8006658:	6961      	ldr	r1, [r4, #20]
 800665a:	6028      	str	r0, [r5, #0]
 800665c:	0635      	lsls	r5, r6, #24
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	d501      	bpl.n	8006666 <_printf_i+0x1c6>
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	e002      	b.n	800666c <_printf_i+0x1cc>
 8006666:	0670      	lsls	r0, r6, #25
 8006668:	d5fb      	bpl.n	8006662 <_printf_i+0x1c2>
 800666a:	8019      	strh	r1, [r3, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	4615      	mov	r5, r2
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	e7bc      	b.n	80065ee <_printf_i+0x14e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	2100      	movs	r1, #0
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	4628      	mov	r0, r5
 8006682:	f000 f859 	bl	8006738 <memchr>
 8006686:	b108      	cbz	r0, 800668c <_printf_i+0x1ec>
 8006688:	1b40      	subs	r0, r0, r5
 800668a:	6060      	str	r0, [r4, #4]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	2300      	movs	r3, #0
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006696:	e7aa      	b.n	80065ee <_printf_i+0x14e>
 8006698:	462a      	mov	r2, r5
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	47d0      	blx	sl
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0ad      	beq.n	8006602 <_printf_i+0x162>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	079b      	lsls	r3, r3, #30
 80066aa:	d413      	bmi.n	80066d4 <_printf_i+0x234>
 80066ac:	68e0      	ldr	r0, [r4, #12]
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	4298      	cmp	r0, r3
 80066b2:	bfb8      	it	lt
 80066b4:	4618      	movlt	r0, r3
 80066b6:	e7a6      	b.n	8006606 <_printf_i+0x166>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4632      	mov	r2, r6
 80066bc:	4649      	mov	r1, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	47d0      	blx	sl
 80066c2:	3001      	adds	r0, #1
 80066c4:	d09d      	beq.n	8006602 <_printf_i+0x162>
 80066c6:	3501      	adds	r5, #1
 80066c8:	68e3      	ldr	r3, [r4, #12]
 80066ca:	9903      	ldr	r1, [sp, #12]
 80066cc:	1a5b      	subs	r3, r3, r1
 80066ce:	42ab      	cmp	r3, r5
 80066d0:	dcf2      	bgt.n	80066b8 <_printf_i+0x218>
 80066d2:	e7eb      	b.n	80066ac <_printf_i+0x20c>
 80066d4:	2500      	movs	r5, #0
 80066d6:	f104 0619 	add.w	r6, r4, #25
 80066da:	e7f5      	b.n	80066c8 <_printf_i+0x228>
 80066dc:	08006903 	.word	0x08006903
 80066e0:	08006914 	.word	0x08006914

080066e4 <memmove>:
 80066e4:	4288      	cmp	r0, r1
 80066e6:	b510      	push	{r4, lr}
 80066e8:	eb01 0402 	add.w	r4, r1, r2
 80066ec:	d902      	bls.n	80066f4 <memmove+0x10>
 80066ee:	4284      	cmp	r4, r0
 80066f0:	4623      	mov	r3, r4
 80066f2:	d807      	bhi.n	8006704 <memmove+0x20>
 80066f4:	1e43      	subs	r3, r0, #1
 80066f6:	42a1      	cmp	r1, r4
 80066f8:	d008      	beq.n	800670c <memmove+0x28>
 80066fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006702:	e7f8      	b.n	80066f6 <memmove+0x12>
 8006704:	4601      	mov	r1, r0
 8006706:	4402      	add	r2, r0
 8006708:	428a      	cmp	r2, r1
 800670a:	d100      	bne.n	800670e <memmove+0x2a>
 800670c:	bd10      	pop	{r4, pc}
 800670e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006716:	e7f7      	b.n	8006708 <memmove+0x24>

08006718 <_sbrk_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	2300      	movs	r3, #0
 800671c:	4d05      	ldr	r5, [pc, #20]	; (8006734 <_sbrk_r+0x1c>)
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fc f85a 	bl	80027dc <_sbrk>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_sbrk_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_sbrk_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200014d4 	.word	0x200014d4

08006738 <memchr>:
 8006738:	4603      	mov	r3, r0
 800673a:	b510      	push	{r4, lr}
 800673c:	b2c9      	uxtb	r1, r1
 800673e:	4402      	add	r2, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	4618      	mov	r0, r3
 8006744:	d101      	bne.n	800674a <memchr+0x12>
 8006746:	2000      	movs	r0, #0
 8006748:	e003      	b.n	8006752 <memchr+0x1a>
 800674a:	7804      	ldrb	r4, [r0, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	428c      	cmp	r4, r1
 8006750:	d1f6      	bne.n	8006740 <memchr+0x8>
 8006752:	bd10      	pop	{r4, pc}

08006754 <memcpy>:
 8006754:	440a      	add	r2, r1
 8006756:	4291      	cmp	r1, r2
 8006758:	f100 33ff 	add.w	r3, r0, #4294967295
 800675c:	d100      	bne.n	8006760 <memcpy+0xc>
 800675e:	4770      	bx	lr
 8006760:	b510      	push	{r4, lr}
 8006762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006766:	4291      	cmp	r1, r2
 8006768:	f803 4f01 	strb.w	r4, [r3, #1]!
 800676c:	d1f9      	bne.n	8006762 <memcpy+0xe>
 800676e:	bd10      	pop	{r4, pc}

08006770 <_realloc_r>:
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4680      	mov	r8, r0
 8006776:	4614      	mov	r4, r2
 8006778:	460e      	mov	r6, r1
 800677a:	b921      	cbnz	r1, 8006786 <_realloc_r+0x16>
 800677c:	4611      	mov	r1, r2
 800677e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006782:	f7ff bc37 	b.w	8005ff4 <_malloc_r>
 8006786:	b92a      	cbnz	r2, 8006794 <_realloc_r+0x24>
 8006788:	f7ff fbcc 	bl	8005f24 <_free_r>
 800678c:	4625      	mov	r5, r4
 800678e:	4628      	mov	r0, r5
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006794:	f000 f81b 	bl	80067ce <_malloc_usable_size_r>
 8006798:	4284      	cmp	r4, r0
 800679a:	4607      	mov	r7, r0
 800679c:	d802      	bhi.n	80067a4 <_realloc_r+0x34>
 800679e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067a2:	d812      	bhi.n	80067ca <_realloc_r+0x5a>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4640      	mov	r0, r8
 80067a8:	f7ff fc24 	bl	8005ff4 <_malloc_r>
 80067ac:	4605      	mov	r5, r0
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0ed      	beq.n	800678e <_realloc_r+0x1e>
 80067b2:	42bc      	cmp	r4, r7
 80067b4:	4622      	mov	r2, r4
 80067b6:	4631      	mov	r1, r6
 80067b8:	bf28      	it	cs
 80067ba:	463a      	movcs	r2, r7
 80067bc:	f7ff ffca 	bl	8006754 <memcpy>
 80067c0:	4631      	mov	r1, r6
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7ff fbae 	bl	8005f24 <_free_r>
 80067c8:	e7e1      	b.n	800678e <_realloc_r+0x1e>
 80067ca:	4635      	mov	r5, r6
 80067cc:	e7df      	b.n	800678e <_realloc_r+0x1e>

080067ce <_malloc_usable_size_r>:
 80067ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067d2:	1f18      	subs	r0, r3, #4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfbc      	itt	lt
 80067d8:	580b      	ldrlt	r3, [r1, r0]
 80067da:	18c0      	addlt	r0, r0, r3
 80067dc:	4770      	bx	lr
	...

080067e0 <round>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80067e6:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 80067ea:	2a13      	cmp	r2, #19
 80067ec:	460b      	mov	r3, r1
 80067ee:	4605      	mov	r5, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	dc18      	bgt.n	8006826 <round+0x46>
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	da09      	bge.n	800680c <round+0x2c>
 80067f8:	3201      	adds	r2, #1
 80067fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80067fe:	d103      	bne.n	8006808 <round+0x28>
 8006800:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006804:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006808:	2200      	movs	r2, #0
 800680a:	e029      	b.n	8006860 <round+0x80>
 800680c:	4816      	ldr	r0, [pc, #88]	; (8006868 <round+0x88>)
 800680e:	4110      	asrs	r0, r2
 8006810:	4001      	ands	r1, r0
 8006812:	4329      	orrs	r1, r5
 8006814:	d011      	beq.n	800683a <round+0x5a>
 8006816:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800681a:	fa41 f202 	asr.w	r2, r1, r2
 800681e:	4413      	add	r3, r2
 8006820:	ea23 0300 	bic.w	r3, r3, r0
 8006824:	e7f0      	b.n	8006808 <round+0x28>
 8006826:	2a33      	cmp	r2, #51	; 0x33
 8006828:	dd0a      	ble.n	8006840 <round+0x60>
 800682a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800682e:	d104      	bne.n	800683a <round+0x5a>
 8006830:	4602      	mov	r2, r0
 8006832:	f7f9 fc93 	bl	800015c <__adddf3>
 8006836:	4605      	mov	r5, r0
 8006838:	460c      	mov	r4, r1
 800683a:	4628      	mov	r0, r5
 800683c:	4621      	mov	r1, r4
 800683e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006848:	40f8      	lsrs	r0, r7
 800684a:	4228      	tst	r0, r5
 800684c:	d0f5      	beq.n	800683a <round+0x5a>
 800684e:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8006852:	2201      	movs	r2, #1
 8006854:	408a      	lsls	r2, r1
 8006856:	1952      	adds	r2, r2, r5
 8006858:	bf28      	it	cs
 800685a:	3301      	addcs	r3, #1
 800685c:	ea22 0200 	bic.w	r2, r2, r0
 8006860:	4619      	mov	r1, r3
 8006862:	4610      	mov	r0, r2
 8006864:	e7e7      	b.n	8006836 <round+0x56>
 8006866:	bf00      	nop
 8006868:	000fffff 	.word	0x000fffff

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
