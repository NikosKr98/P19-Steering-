
P19-STEERING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006598  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800674c  0800674c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800674c  0800674c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800674c  0800674c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800674c  0800674c  0001674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  20000068  080067bc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014cc  080067bc  000214cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cc0  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd0  00000000  00000000  00031d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c55  00000000  00000000  00035940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ec3  00000000  00000000  00036595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a43  00000000  00000000  00050458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000934db  00000000  00000000  00063e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b4  00000000  00000000  000f7378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fbd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006690 	.word	0x08006690

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006690 	.word	0x08006690

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <ReadInputs>:

//Private Functions Declaration
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);


void ReadInputs(InputStruct *inputs){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]

	tInputsTimer = HAL_GetTick();
 8000fd0:	f001 fbd0 	bl	8002774 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4ab2      	ldr	r2, [pc, #712]	; (80012a0 <ReadInputs+0x2d8>)
 8000fd8:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);
 8000fda:	4bb2      	ldr	r3, [pc, #712]	; (80012a4 <ReadInputs+0x2dc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000fe6:	48b0      	ldr	r0, [pc, #704]	; (80012a8 <ReadInputs+0x2e0>)
 8000fe8:	f000 fb0e 	bl	8001608 <MyHalfBufferAverage>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	821a      	strh	r2, [r3, #16]
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);
 8000ff4:	4bab      	ldr	r3, [pc, #684]	; (80012a4 <ReadInputs+0x2dc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001000:	48a9      	ldr	r0, [pc, #676]	; (80012a8 <ReadInputs+0x2e0>)
 8001002:	f000 fb01 	bl	8001608 <MyHalfBufferAverage>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	825a      	strh	r2, [r3, #18]
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);
 800100e:	4ba5      	ldr	r3, [pc, #660]	; (80012a4 <ReadInputs+0x2dc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	2302      	movs	r3, #2
 8001016:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800101a:	48a3      	ldr	r0, [pc, #652]	; (80012a8 <ReadInputs+0x2e0>)
 800101c:	f000 faf4 	bl	8001608 <MyHalfBufferAverage>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	829a      	strh	r2, [r3, #20]
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);
 8001028:	4b9e      	ldr	r3, [pc, #632]	; (80012a4 <ReadInputs+0x2dc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	2303      	movs	r3, #3
 8001030:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001034:	489c      	ldr	r0, [pc, #624]	; (80012a8 <ReadInputs+0x2e0>)
 8001036:	f000 fae7 	bl	8001608 <MyHalfBufferAverage>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	82da      	strh	r2, [r3, #22]

	//Voltage Conversion
	inputs->VSIUAnalog01 = (float)(inputs->NADCChannel01Raw * 3.3 / 4095.0);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8a1b      	ldrh	r3, [r3, #16]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9d4 	bl	80003f4 <__aeabi_i2d>
 800104c:	a390      	add	r3, pc, #576	; (adr r3, 8001290 <ReadInputs+0x2c8>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa39 	bl	80004c8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	a38e      	add	r3, pc, #568	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fb5a 	bl	800071c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fc64 	bl	800093c <__aeabi_d2f>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
	inputs->VSIUAnalog02 = (float)(inputs->NADCChannel02Raw * 3.3 / 4095.0);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8a5b      	ldrh	r3, [r3, #18]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9b8 	bl	80003f4 <__aeabi_i2d>
 8001084:	a382      	add	r3, pc, #520	; (adr r3, 8001290 <ReadInputs+0x2c8>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fa1d 	bl	80004c8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a380      	add	r3, pc, #512	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fb3e 	bl	800071c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc48 	bl	800093c <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
	inputs->VSIUAnalog03 = (float)(inputs->NADCChannel03Raw * 3.3 / 4095.0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8a9b      	ldrh	r3, [r3, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f99c 	bl	80003f4 <__aeabi_i2d>
 80010bc:	a374      	add	r3, pc, #464	; (adr r3, 8001290 <ReadInputs+0x2c8>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa01 	bl	80004c8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a372      	add	r3, pc, #456	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fb22 	bl	800071c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc2c 	bl	800093c <__aeabi_d2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
	inputs->VSIUAnalog04 = (float)(inputs->NADCChannel04Raw * 3.3 / 4095.0);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8adb      	ldrh	r3, [r3, #22]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f980 	bl	80003f4 <__aeabi_i2d>
 80010f4:	a366      	add	r3, pc, #408	; (adr r3, 8001290 <ReadInputs+0x2c8>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	a364      	add	r3, pc, #400	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb06 	bl	800071c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fc10 	bl	800093c <__aeabi_d2f>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60da      	str	r2, [r3, #12]


	// ---------------------------------------------------------------------------------------------------
	//Clutch Paddle

	inputs->VrClutchPaddle = inputs->VSIUAnalog01;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	61da      	str	r2, [r3, #28]

	//Mapping
	inputs->BrClutchPaddleInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddle, &(inputs->rClutchPaddleRaw), VrCLUTCH_MARGIN_MIN, VrCLUTCH_MARGIN_MAX);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3320      	adds	r3, #32
 8001132:	495e      	ldr	r1, [pc, #376]	; (80012ac <ReadInputs+0x2e4>)
 8001134:	9101      	str	r1, [sp, #4]
 8001136:	495d      	ldr	r1, [pc, #372]	; (80012ac <ReadInputs+0x2e4>)
 8001138:	9100      	str	r1, [sp, #0]
 800113a:	495d      	ldr	r1, [pc, #372]	; (80012b0 <ReadInputs+0x2e8>)
 800113c:	2002      	movs	r0, #2
 800113e:	f000 fc83 	bl	8001a48 <My2DMapInterpolate>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	761a      	strb	r2, [r3, #24]

	// Conversion from Float to int8_t
	inputs->rClutchPaddle = (int8_t)round(inputs->rClutchPaddleRaw);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f962 	bl	8000418 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f005 fa52 	bl	8006604 <round>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fbc0 	bl	80008ec <__aeabi_d2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	b25a      	sxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//Clamping
	inputs->rClutchPaddle = CLAMP(inputs->rClutchPaddle, CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800117c:	2b67      	cmp	r3, #103	; 0x67
 800117e:	dc09      	bgt.n	8001194 <ReadInputs+0x1cc>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001186:	f06f 0203 	mvn.w	r2, #3
 800118a:	4293      	cmp	r3, r2
 800118c:	bfb8      	it	lt
 800118e:	4613      	movlt	r3, r2
 8001190:	b25a      	sxtb	r2, r3
 8001192:	e000      	b.n	8001196 <ReadInputs+0x1ce>
 8001194:	2268      	movs	r2, #104	; 0x68
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSIUAnalog04 * VSUPPLY_DIVIDER_GAIN;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4944      	ldr	r1, [pc, #272]	; (80012b4 <ReadInputs+0x2ec>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fd28 	bl	8000bf8 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c

	// ---------------------------------------------------------------------------------------------------
	// Shifting Inputs

	//Up Button
	if(HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin) == GPIO_PIN_RESET && tUpButtonTimer < tInputsTimer && !inputs->BUpShiftButtonDebounce) {
 80011b0:	2104      	movs	r1, #4
 80011b2:	4841      	ldr	r0, [pc, #260]	; (80012b8 <ReadInputs+0x2f0>)
 80011b4:	f003 faa2 	bl	80046fc <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11c      	bne.n	80011f8 <ReadInputs+0x230>
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <ReadInputs+0x2f4>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <ReadInputs+0x2d8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d216      	bcs.n	80011f8 <ReadInputs+0x230>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d111      	bne.n	80011f8 <ReadInputs+0x230>
		inputs->BUpShiftButtonDebounce = 1;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		inputs->BUpShiftButtonPressed = 1;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		tUpButtonTimer = tInputsTimer;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <ReadInputs+0x2d8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <ReadInputs+0x2f4>)
 80011ea:	6013      	str	r3, [r2, #0]
		tUpButtonTimer += UP_BUTTON_DEBOUNCE;
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <ReadInputs+0x2f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3332      	adds	r3, #50	; 0x32
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <ReadInputs+0x2f4>)
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e025      	b.n	8001244 <ReadInputs+0x27c>
	}
	else if(HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin) == GPIO_PIN_SET && inputs->BUpShiftButtonDebounce) {
 80011f8:	2104      	movs	r1, #4
 80011fa:	482f      	ldr	r0, [pc, #188]	; (80012b8 <ReadInputs+0x2f0>)
 80011fc:	f003 fa7e 	bl	80046fc <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10d      	bne.n	8001222 <ReadInputs+0x25a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <ReadInputs+0x25a>
		inputs->BUpShiftButtonDebounce = 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		inputs->BUpShiftButtonPressed = 0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001220:	e010      	b.n	8001244 <ReadInputs+0x27c>
	}
	else if(inputs->BUpShiftButtonPressed && (tUpButtonTimer + UP_BUTTON_TIMEOUT) < tInputsTimer) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <ReadInputs+0x27c>
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <ReadInputs+0x2f4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <ReadInputs+0x2d8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d203      	bcs.n	8001244 <ReadInputs+0x27c>
		inputs->BUpShiftButtonPressed = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}

	//Down Button
	if(HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin) == GPIO_PIN_RESET && tDnButtonTimer < tInputsTimer && !inputs->BDnShiftButtonDebounce) {
 8001244:	2102      	movs	r1, #2
 8001246:	481c      	ldr	r0, [pc, #112]	; (80012b8 <ReadInputs+0x2f0>)
 8001248:	f003 fa58 	bl	80046fc <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d138      	bne.n	80012c4 <ReadInputs+0x2fc>
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <ReadInputs+0x2f8>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <ReadInputs+0x2d8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d232      	bcs.n	80012c4 <ReadInputs+0x2fc>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001264:	2b00      	cmp	r3, #0
 8001266:	d12d      	bne.n	80012c4 <ReadInputs+0x2fc>
		inputs->BDnShiftButtonDebounce = 1;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inputs->BDnShiftButtonPressed = 1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		tDnButtonTimer = tInputsTimer;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <ReadInputs+0x2d8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <ReadInputs+0x2f8>)
 800127e:	6013      	str	r3, [r2, #0]
		tDnButtonTimer += DN_BUTTON_DEBOUNCE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <ReadInputs+0x2f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3332      	adds	r3, #50	; 0x32
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <ReadInputs+0x2f8>)
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e041      	b.n	8001310 <ReadInputs+0x348>
 800128c:	f3af 8000 	nop.w
 8001290:	66666666 	.word	0x66666666
 8001294:	400a6666 	.word	0x400a6666
 8001298:	00000000 	.word	0x00000000
 800129c:	40affe00 	.word	0x40affe00
 80012a0:	20000084 	.word	0x20000084
 80012a4:	200000ac 	.word	0x200000ac
 80012a8:	20000278 	.word	0x20000278
 80012ac:	3dcccccd 	.word	0x3dcccccd
 80012b0:	080066c8 	.word	0x080066c8
 80012b4:	3e6c4ef9 	.word	0x3e6c4ef9
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	20000088 	.word	0x20000088
 80012c0:	2000008c 	.word	0x2000008c
	}
	else if(HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin) == GPIO_PIN_SET && inputs->BDnShiftButtonDebounce) {
 80012c4:	2102      	movs	r1, #2
 80012c6:	4894      	ldr	r0, [pc, #592]	; (8001518 <ReadInputs+0x550>)
 80012c8:	f003 fa18 	bl	80046fc <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10d      	bne.n	80012ee <ReadInputs+0x326>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <ReadInputs+0x326>
		inputs->BDnShiftButtonDebounce = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inputs->BDnShiftButtonPressed = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80012ec:	e010      	b.n	8001310 <ReadInputs+0x348>
	}
	else if(inputs->BDnShiftButtonPressed && (tDnButtonTimer + DN_BUTTON_TIMEOUT) < tInputsTimer) {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <ReadInputs+0x348>
 80012f8:	4b88      	ldr	r3, [pc, #544]	; (800151c <ReadInputs+0x554>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 8001300:	4b87      	ldr	r3, [pc, #540]	; (8001520 <ReadInputs+0x558>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d203      	bcs.n	8001310 <ReadInputs+0x348>
		inputs->BDnShiftButtonPressed = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// ---------------------------------------------------------------------------------------------------
	// Buttons

	// Button A
	if(HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin) == GPIO_PIN_RESET && tButtonATimer < tInputsTimer && !inputs->BButtonADebounce) {
 8001310:	2101      	movs	r1, #1
 8001312:	4881      	ldr	r0, [pc, #516]	; (8001518 <ReadInputs+0x550>)
 8001314:	f003 f9f2 	bl	80046fc <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11c      	bne.n	8001358 <ReadInputs+0x390>
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <ReadInputs+0x55c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <ReadInputs+0x558>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d216      	bcs.n	8001358 <ReadInputs+0x390>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001330:	2b00      	cmp	r3, #0
 8001332:	d111      	bne.n	8001358 <ReadInputs+0x390>
		inputs->BButtonADebounce = 1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		inputs->BButtonAPressed = 1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		tButtonATimer = tInputsTimer;
 8001344:	4b76      	ldr	r3, [pc, #472]	; (8001520 <ReadInputs+0x558>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a76      	ldr	r2, [pc, #472]	; (8001524 <ReadInputs+0x55c>)
 800134a:	6013      	str	r3, [r2, #0]
		tButtonATimer += BUTTON_A_DEBOUNCE;
 800134c:	4b75      	ldr	r3, [pc, #468]	; (8001524 <ReadInputs+0x55c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3364      	adds	r3, #100	; 0x64
 8001352:	4a74      	ldr	r2, [pc, #464]	; (8001524 <ReadInputs+0x55c>)
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e013      	b.n	8001380 <ReadInputs+0x3b8>
	}
	else if(HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin) == GPIO_PIN_SET && inputs->BButtonADebounce) {
 8001358:	2101      	movs	r1, #1
 800135a:	486f      	ldr	r0, [pc, #444]	; (8001518 <ReadInputs+0x550>)
 800135c:	f003 f9ce 	bl	80046fc <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10c      	bne.n	8001380 <ReadInputs+0x3b8>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <ReadInputs+0x3b8>
		inputs->BButtonADebounce = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		inputs->BButtonAPressed = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	}

	// Button B
	if(HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin) == GPIO_PIN_RESET && tButtonBTimer < tInputsTimer && !inputs->BButtonBDebounce) {
 8001380:	2108      	movs	r1, #8
 8001382:	4865      	ldr	r0, [pc, #404]	; (8001518 <ReadInputs+0x550>)
 8001384:	f003 f9ba 	bl	80046fc <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11c      	bne.n	80013c8 <ReadInputs+0x400>
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <ReadInputs+0x560>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b63      	ldr	r3, [pc, #396]	; (8001520 <ReadInputs+0x558>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d216      	bcs.n	80013c8 <ReadInputs+0x400>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d111      	bne.n	80013c8 <ReadInputs+0x400>
		inputs->BButtonBDebounce = 1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		inputs->BButtonBPressed = 1;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		tButtonBTimer = tInputsTimer;
 80013b4:	4b5a      	ldr	r3, [pc, #360]	; (8001520 <ReadInputs+0x558>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <ReadInputs+0x560>)
 80013ba:	6013      	str	r3, [r2, #0]
		tButtonBTimer += BUTTON_B_DEBOUNCE;
 80013bc:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <ReadInputs+0x560>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3364      	adds	r3, #100	; 0x64
 80013c2:	4a59      	ldr	r2, [pc, #356]	; (8001528 <ReadInputs+0x560>)
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e013      	b.n	80013f0 <ReadInputs+0x428>
	}
	else if(HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin) == GPIO_PIN_SET && inputs->BButtonBDebounce) {
 80013c8:	2108      	movs	r1, #8
 80013ca:	4853      	ldr	r0, [pc, #332]	; (8001518 <ReadInputs+0x550>)
 80013cc:	f003 f996 	bl	80046fc <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10c      	bne.n	80013f0 <ReadInputs+0x428>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <ReadInputs+0x428>
		inputs->BButtonBDebounce = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		inputs->BButtonBPressed = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	// Button C
	if(HAL_GPIO_ReadPin(DIN05_GPIO_Port, DIN05_Pin) == GPIO_PIN_RESET && tButtonCTimer < tInputsTimer && !inputs->BButtonCDebounce) {
 80013f0:	2110      	movs	r1, #16
 80013f2:	4849      	ldr	r0, [pc, #292]	; (8001518 <ReadInputs+0x550>)
 80013f4:	f003 f982 	bl	80046fc <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d11c      	bne.n	8001438 <ReadInputs+0x470>
 80013fe:	4b4b      	ldr	r3, [pc, #300]	; (800152c <ReadInputs+0x564>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <ReadInputs+0x558>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d216      	bcs.n	8001438 <ReadInputs+0x470>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <ReadInputs+0x470>
		inputs->BButtonCDebounce = 1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		inputs->BButtonCPressed = 1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		tButtonCTimer = tInputsTimer;
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <ReadInputs+0x558>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a40      	ldr	r2, [pc, #256]	; (800152c <ReadInputs+0x564>)
 800142a:	6013      	str	r3, [r2, #0]
		tButtonCTimer += BUTTON_C_DEBOUNCE;
 800142c:	4b3f      	ldr	r3, [pc, #252]	; (800152c <ReadInputs+0x564>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3364      	adds	r3, #100	; 0x64
 8001432:	4a3e      	ldr	r2, [pc, #248]	; (800152c <ReadInputs+0x564>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e013      	b.n	8001460 <ReadInputs+0x498>
	}
	else if(HAL_GPIO_ReadPin(DIN05_GPIO_Port, DIN05_Pin) == GPIO_PIN_SET && inputs->BButtonCDebounce) {
 8001438:	2110      	movs	r1, #16
 800143a:	4837      	ldr	r0, [pc, #220]	; (8001518 <ReadInputs+0x550>)
 800143c:	f003 f95e 	bl	80046fc <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d10c      	bne.n	8001460 <ReadInputs+0x498>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <ReadInputs+0x498>
		inputs->BButtonCDebounce = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		inputs->BButtonCPressed = 0;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	// Button D
	if(HAL_GPIO_ReadPin(DIN06_GPIO_Port, DIN06_Pin) == GPIO_PIN_RESET && tButtonDTimer < tInputsTimer && !inputs->BButtonDDebounce) {
 8001460:	2120      	movs	r1, #32
 8001462:	482d      	ldr	r0, [pc, #180]	; (8001518 <ReadInputs+0x550>)
 8001464:	f003 f94a 	bl	80046fc <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11c      	bne.n	80014a8 <ReadInputs+0x4e0>
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <ReadInputs+0x568>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <ReadInputs+0x558>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d216      	bcs.n	80014a8 <ReadInputs+0x4e0>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <ReadInputs+0x4e0>
		inputs->BButtonDDebounce = 1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		inputs->BButtonDPressed = 1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		tButtonDTimer = tInputsTimer;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <ReadInputs+0x558>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a25      	ldr	r2, [pc, #148]	; (8001530 <ReadInputs+0x568>)
 800149a:	6013      	str	r3, [r2, #0]
		tButtonDTimer += BUTTON_D_DEBOUNCE;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <ReadInputs+0x568>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3364      	adds	r3, #100	; 0x64
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <ReadInputs+0x568>)
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e013      	b.n	80014d0 <ReadInputs+0x508>
	}
	else if(HAL_GPIO_ReadPin(DIN06_GPIO_Port, DIN06_Pin) == GPIO_PIN_SET && inputs->BButtonDDebounce) {
 80014a8:	2120      	movs	r1, #32
 80014aa:	481b      	ldr	r0, [pc, #108]	; (8001518 <ReadInputs+0x550>)
 80014ac:	f003 f926 	bl	80046fc <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d10c      	bne.n	80014d0 <ReadInputs+0x508>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <ReadInputs+0x508>
		inputs->BButtonDDebounce = 0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		inputs->BButtonDPressed = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	}

	// Button E
	if(HAL_GPIO_ReadPin(DIN07_GPIO_Port, DIN07_Pin) == GPIO_PIN_RESET && tButtonETimer < tInputsTimer && !inputs->BButtonEDebounce) {
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <ReadInputs+0x550>)
 80014d4:	f003 f912 	bl	80046fc <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d12c      	bne.n	8001538 <ReadInputs+0x570>
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <ReadInputs+0x56c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <ReadInputs+0x558>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d226      	bcs.n	8001538 <ReadInputs+0x570>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d121      	bne.n	8001538 <ReadInputs+0x570>
		inputs->BButtonEDebounce = 1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		inputs->BButtonEPressed = 1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		tButtonETimer = tInputsTimer;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <ReadInputs+0x558>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <ReadInputs+0x56c>)
 800150a:	6013      	str	r3, [r2, #0]
		tButtonETimer += BUTTON_E_DEBOUNCE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <ReadInputs+0x56c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3364      	adds	r3, #100	; 0x64
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <ReadInputs+0x56c>)
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e023      	b.n	8001560 <ReadInputs+0x598>
 8001518:	40010c00 	.word	0x40010c00
 800151c:	2000008c 	.word	0x2000008c
 8001520:	20000084 	.word	0x20000084
 8001524:	20000090 	.word	0x20000090
 8001528:	20000094 	.word	0x20000094
 800152c:	20000098 	.word	0x20000098
 8001530:	2000009c 	.word	0x2000009c
 8001534:	200000a0 	.word	0x200000a0
	}
	else if(HAL_GPIO_ReadPin(DIN07_GPIO_Port, DIN07_Pin) == GPIO_PIN_SET && inputs->BButtonEDebounce) {
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	4827      	ldr	r0, [pc, #156]	; (80015d8 <ReadInputs+0x610>)
 800153c:	f003 f8de 	bl	80046fc <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10c      	bne.n	8001560 <ReadInputs+0x598>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <ReadInputs+0x598>
		inputs->BButtonEDebounce = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		inputs->BButtonEPressed = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	// Button F
	if(HAL_GPIO_ReadPin(DIN08_GPIO_Port, DIN08_Pin) == GPIO_PIN_RESET && tButtonFTimer < tInputsTimer && !inputs->BButtonFDebounce) {
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	481d      	ldr	r0, [pc, #116]	; (80015d8 <ReadInputs+0x610>)
 8001564:	f003 f8ca 	bl	80046fc <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11c      	bne.n	80015a8 <ReadInputs+0x5e0>
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <ReadInputs+0x614>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <ReadInputs+0x618>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d216      	bcs.n	80015a8 <ReadInputs+0x5e0>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <ReadInputs+0x5e0>
		inputs->BButtonFDebounce = 1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		inputs->BButtonFPressed = 1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		tButtonFTimer = tInputsTimer;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <ReadInputs+0x618>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a10      	ldr	r2, [pc, #64]	; (80015dc <ReadInputs+0x614>)
 800159a:	6013      	str	r3, [r2, #0]
		tButtonFTimer += BUTTON_F_DEBOUNCE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <ReadInputs+0x614>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3364      	adds	r3, #100	; 0x64
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <ReadInputs+0x614>)
 80015a4:	6013      	str	r3, [r2, #0]
		inputs->BButtonFPressed = 0;
	}


	// ---------------------------------------------------------------------------------------------------
}
 80015a6:	e013      	b.n	80015d0 <ReadInputs+0x608>
	else if(HAL_GPIO_ReadPin(DIN08_GPIO_Port, DIN08_Pin) == GPIO_PIN_SET && inputs->BButtonFDebounce) {
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <ReadInputs+0x610>)
 80015ac:	f003 f8a6 	bl	80046fc <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10c      	bne.n	80015d0 <ReadInputs+0x608>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <ReadInputs+0x608>
		inputs->BButtonFDebounce = 0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		inputs->BButtonFPressed = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	200000a4 	.word	0x200000a4
 80015e0:	20000084 	.word	0x20000084

080015e4 <InitInputs>:


void InitInputs(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <InitInputs+0x1c>)
 80015ea:	f001 fcb3 	bl	8002f54 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 80015ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80015f2:	4904      	ldr	r1, [pc, #16]	; (8001604 <InitInputs+0x20>)
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <InitInputs+0x1c>)
 80015f6:	f001 f9c3 	bl	8002980 <HAL_ADC_Start_DMA>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000bc 	.word	0x200000bc
 8001604:	20000278 	.word	0x20000278

08001608 <MyHalfBufferAverage>:


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	460b      	mov	r3, r1
 800161c:	707b      	strb	r3, [r7, #1]
 800161e:	4613      	mov	r3, r2
 8001620:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8001626:	787b      	ldrb	r3, [r7, #1]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <MyHalfBufferAverage+0x28>
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	e000      	b.n	8001632 <MyHalfBufferAverage+0x2a>
 8001630:	2300      	movs	r3, #0
 8001632:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	827b      	strh	r3, [r7, #18]
 800163e:	e010      	b.n	8001662 <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 8001640:	8a7b      	ldrh	r3, [r7, #18]
 8001642:	009a      	lsls	r2, r3, #2
 8001644:	783b      	ldrb	r3, [r7, #0]
 8001646:	441a      	add	r2, r3
 8001648:	8a3b      	ldrh	r3, [r7, #16]
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800165c:	8a7b      	ldrh	r3, [r7, #18]
 800165e:	3301      	adds	r3, #1
 8001660:	827b      	strh	r3, [r7, #18]
 8001662:	8a7a      	ldrh	r2, [r7, #18]
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3ea      	bcc.n	8001640 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	b29b      	uxth	r3, r3

}
 8001678:	4618      	mov	r0, r3
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	f107 0214 	add.w	r2, r7, #20
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f002 f858 	bl	800374e <HAL_CAN_GetRxMessage>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d007      	beq.n	80016b4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <CAN_RX+0x40>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <CAN_RX+0x40>)
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	e003      	b.n	80016bc <CAN_RX+0x38>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
	 case SIU_RX_ID :
		 // TODO: TBC...
		 break;

	 default:
		 break;
 80016ba:	bf00      	nop
	 }
}
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200000aa 	.word	0x200000aa

080016c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 80016d0:	2100      	movs	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffd6 	bl	8001684 <CAN_RX>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 80016e8:	2101      	movs	r1, #1
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffca 	bl	8001684 <CAN_RX>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_CAN_ErrorCallback+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_CAN_ErrorCallback+0x20>)
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	200000a8 	.word	0x200000a8

0800171c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d107      	bne.n	800173c <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800173a:	701a      	strb	r2, [r3, #0]
	}
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200000bc 	.word	0x200000bc
 800174c:	200000ac 	.word	0x200000ac

08001750 <InitOutput>:

uint32_t nCanTxErrorCount=0;
uint32_t nCanOldestMailbox=4, nCanSecondOldestMailbox=2, nCanYoungestMailbox=1;


void InitOutput() {
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <Output>:
void Output(InputStruct* inputs) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]


	CANTxBuffer[0] = 0;
 8001764:	4b74      	ldr	r3, [pc, #464]	; (8001938 <Output+0x1dc>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BUpShiftButtonInError 	& 0x01) << 0;
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <Output+0x1dc>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25a      	sxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b25b      	sxtb	r3, r3
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <Output+0x1dc>)
 8001786:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BDnShiftButtonInError 	& 0x01) << 1;
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <Output+0x1dc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25a      	sxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	b25b      	sxtb	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <Output+0x1dc>)
 80017a6:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							  	& 0x01) << 2;
 80017a8:	4b63      	ldr	r3, [pc, #396]	; (8001938 <Output+0x1dc>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <Output+0x1dc>)
 80017ae:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 3;
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <Output+0x1dc>)
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <Output+0x1dc>)
 80017b6:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							    & 0x01) << 4;
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <Output+0x1dc>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <Output+0x1dc>)
 80017be:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 5;
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <Output+0x1dc>)
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <Output+0x1dc>)
 80017c6:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BrClutchPaddleInError	& 0x01) << 6;
 80017c8:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <Output+0x1dc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7e1b      	ldrb	r3, [r3, #24]
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b55      	ldr	r3, [pc, #340]	; (8001938 <Output+0x1dc>)
 80017e4:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 7;
 80017e6:	4b54      	ldr	r3, [pc, #336]	; (8001938 <Output+0x1dc>)
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <Output+0x1dc>)
 80017ec:	701a      	strb	r2, [r3, #0]

	CANTxBuffer[1] = 0;
 80017ee:	4b52      	ldr	r3, [pc, #328]	; (8001938 <Output+0x1dc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BUpShiftButtonPressed 	& 0x01) << 0;
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <Output+0x1dc>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	b25b      	sxtb	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b25b      	sxtb	r3, r3
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <Output+0x1dc>)
 8001810:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BDnShiftButtonPressed 	& 0x01) << 1;
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <Output+0x1dc>)
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	b25a      	sxtb	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	b25b      	sxtb	r3, r3
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	b25b      	sxtb	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <Output+0x1dc>)
 8001830:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonAPressed  		& 0x01) << 2;
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <Output+0x1dc>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b25a      	sxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <Output+0x1dc>)
 8001850:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonBPressed 			& 0x01) << 3;
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <Output+0x1dc>)
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	b25a      	sxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	b25b      	sxtb	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b25b      	sxtb	r3, r3
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <Output+0x1dc>)
 8001870:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonCPressed   		& 0x01) << 4;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <Output+0x1dc>)
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	b25a      	sxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	b25b      	sxtb	r3, r3
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	b25b      	sxtb	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b25b      	sxtb	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <Output+0x1dc>)
 8001890:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonDPressed			& 0x01) << 5;
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <Output+0x1dc>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	b25a      	sxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <Output+0x1dc>)
 80018b0:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonEPressed			& 0x01) << 6;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <Output+0x1dc>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <Output+0x1dc>)
 80018d0:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonFPressed			& 0x01) << 7;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <Output+0x1dc>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018de:	01db      	lsls	r3, r3, #7
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <Output+0x1dc>)
 80018ea:	705a      	strb	r2, [r3, #1]

	CANTxBuffer[2] = inputs->rClutchPaddle;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <Output+0x1dc>)
 80018f6:	709a      	strb	r2, [r3, #2]

	uint16_t VSupplyCAN = (uint16_t)(inputs->VSupply * 1000);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	490f      	ldr	r1, [pc, #60]	; (800193c <Output+0x1e0>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f97a 	bl	8000bf8 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb3c 	bl	8000f84 <__aeabi_f2uiz>
 800190c:	4603      	mov	r3, r0
 800190e:	81fb      	strh	r3, [r7, #14]

	CANTxBuffer[3] = (VSupplyCAN & 0xFF00) >> 8;
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <Output+0x1dc>)
 800191a:	70da      	strb	r2, [r3, #3]
	CANTxBuffer[4] = (VSupplyCAN & 0x00FF) >> 0;
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <Output+0x1dc>)
 8001922:	711a      	strb	r2, [r3, #4]

	CAN_TX(SHIFTER_TX_ID, 8, CANTxBuffer);
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <Output+0x1dc>)
 8001926:	2108      	movs	r1, #8
 8001928:	f44f 7044 	mov.w	r0, #784	; 0x310
 800192c:	f000 f808 	bl	8001940 <CAN_TX>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200000b0 	.word	0x200000b0
 800193c:	447a0000 	.word	0x447a0000

08001940 <CAN_TX>:


void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	460b      	mov	r3, r1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <CAN_TX+0xc4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	33c8      	adds	r3, #200	; 0xc8
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 8001968:	bf00      	nop
 800196a:	4827      	ldr	r0, [pc, #156]	; (8001a08 <CAN_TX+0xc8>)
 800196c:	f001 febb 	bl	80036e6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <CAN_TX+0x42>
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <CAN_TX+0xc4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	429a      	cmp	r2, r3
 8001980:	d8f3      	bhi.n	800196a <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8001982:	4821      	ldr	r0, [pc, #132]	; (8001a08 <CAN_TX+0xc8>)
 8001984:	f001 feaf 	bl	80036e6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <CAN_TX+0xcc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	481c      	ldr	r0, [pc, #112]	; (8001a08 <CAN_TX+0xc8>)
 8001996:	f001 fe62 	bl	800365e <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	f107 0114 	add.w	r1, r7, #20
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <CAN_TX+0xc8>)
 80019a6:	f001 fd8b 	bl	80034c0 <HAL_CAN_AddTxMessage>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <CAN_TX+0xd0>)
 80019b2:	f000 f835 	bl	8001a20 <print>
		nCanTxErrorCount++;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <CAN_TX+0xd4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a15      	ldr	r2, [pc, #84]	; (8001a14 <CAN_TX+0xd4>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e01c      	b.n	80019fc <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <CAN_TX+0xd8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d017      	beq.n	80019fc <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <CAN_TX+0xdc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d00b      	beq.n	80019ee <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <CAN_TX+0xdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <CAN_TX+0xcc>)
 80019dc:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <CAN_TX+0xd8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <CAN_TX+0xdc>)
 80019e4:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <CAN_TX+0xd8>)
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e006      	b.n	80019fc <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <CAN_TX+0xd8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <CAN_TX+0xdc>)
 80019f4:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <CAN_TX+0xd8>)
 80019fa:	6013      	str	r3, [r2, #0]
		}
	}

}
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001a0 	.word	0x200001a0
 8001a08:	20000130 	.word	0x20000130
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	080066a8 	.word	0x080066a8
 8001a14:	200000b8 	.word	0x200000b8
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000004 	.word	0x20000004

08001a20 <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8001a20:	b40f      	push	{r0, r1, r2, r3}
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b09a      	sub	sp, #104	; 0x68
 8001a26:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8001a28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a2c:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 f949 	bl	8005ccc <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 8001a3a:	bf00      	nop
 8001a3c:	3768      	adds	r7, #104	; 0x68
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a44:	b004      	add	sp, #16
 8001a46:	4770      	bx	lr

08001a48 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8001a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	68fe      	ldr	r6, [r7, #12]
 8001a58:	1e73      	subs	r3, r6, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	4632      	mov	r2, r6
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4614      	mov	r4, r2
 8001a62:	461d      	mov	r5, r3
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	016b      	lsls	r3, r5, #5
 8001a6e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a72:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ffb2 	bl	80009e4 <__aeabi_fsub>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fa55 	bl	8000f34 <__aeabi_fcmplt>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8001a90:	4633      	mov	r3, r6
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
		return 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07b      	b.n	8001b9a <My2DMapInterpolate+0x152>
	}
	if(input > map[0][size-1] + maxMargin) {
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe ff9a 	bl	80009e8 <__addsf3>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fa59 	bl	8000f70 <__aeabi_fcmpgt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8001ac4:	4633      	mov	r3, r6
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
		return 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e05e      	b.n	8001b9a <My2DMapInterpolate+0x152>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size--; i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	e00e      	b.n	8001b00 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fa20 	bl	8000f34 <__aeabi_fcmplt>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <My2DMapInterpolate+0xc6>
	for(i=0; i<size--; i++) {
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e5a      	subs	r2, r3, #1
 8001b04:	60fa      	str	r2, [r7, #12]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbea      	blt.n	8001ae2 <My2DMapInterpolate+0x9a>
 8001b0c:	e000      	b.n	8001b10 <My2DMapInterpolate+0xc8>
			break;
 8001b0e:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff5e 	bl	80009e4 <__aeabi_fsub>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8001b2c:	4633      	mov	r3, r6
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	4413      	add	r3, r2
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	3201      	adds	r2, #1
 8001b38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b3c:	4633      	mov	r3, r6
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7fe ff4a 	bl	80009e4 <__aeabi_fsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8001b54:	4633      	mov	r3, r6
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7fe ff39 	bl	80009e4 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f83e 	bl	8000bf8 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6979      	ldr	r1, [r7, #20]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8ed 	bl	8000d60 <__aeabi_fdiv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7fe ff2c 	bl	80009e8 <__addsf3>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	601a      	str	r2, [r3, #0]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ba4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba8:	f3bf 8f4f 	dsb	sy
}
 8001bac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <__NVIC_SystemReset+0x24>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bb6:	4904      	ldr	r1, [pc, #16]	; (8001bc8 <__NVIC_SystemReset+0x24>)
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_SystemReset+0x28>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bbe:	f3bf 8f4f 	dsb	sy
}
 8001bc2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <__NVIC_SystemReset+0x20>
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	05fa0004 	.word	0x05fa0004

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd4:	f000 fd76 	bl	80026c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd8:	f000 f832 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bdc:	f000 fac8 	bl	8002170 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be0:	f000 faa8 	bl	8002134 <MX_DMA_Init>
  MX_TIM2_Init();
 8001be4:	f000 f9e0 	bl	8001fa8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001be8:	f000 f886 	bl	8001cf8 <MX_ADC1_Init>
  MX_CAN_Init();
 8001bec:	f000 f8ee 	bl	8001dcc <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001bf0:	f000 fa76 	bl	80020e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001bf4:	f000 f988 	bl	8001f08 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001bf8:	f000 fa24 	bl	8002044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <main+0x60>)
 8001bfe:	f003 fb79 	bl	80052f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <main+0x64>)
 8001c04:	f003 fbc0 	bl	8005388 <HAL_TIM_Base_Start_IT>

  InitInputs();
 8001c08:	f7ff fcec 	bl	80015e4 <InitInputs>
  InitOutput();
 8001c0c:	f7ff fda0 	bl	8001750 <InitOutput>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BCycleTimerFlag) {
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <main+0x68>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0fa      	beq.n	8001c10 <main+0x40>
		  BCycleTimerFlag = 0;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <main+0x68>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
		  ReadInputs(&Inputs);
 8001c20:	4806      	ldr	r0, [pc, #24]	; (8001c3c <main+0x6c>)
 8001c22:	f7ff f9d1 	bl	8000fc8 <ReadInputs>
		  Output(&Inputs);
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <main+0x6c>)
 8001c28:	f7ff fd98 	bl	800175c <Output>
	  if(BCycleTimerFlag) {
 8001c2c:	e7f0      	b.n	8001c10 <main+0x40>
 8001c2e:	bf00      	nop
 8001c30:	20000158 	.word	0x20000158
 8001c34:	200001e8 	.word	0x200001e8
 8001c38:	20001338 	.word	0x20001338
 8001c3c:	2000133c 	.word	0x2000133c

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f846 	bl	8005ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fd60 	bl	800475c <HAL_RCC_OscConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ca2:	f000 fad7 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 ffcc 	bl	8004c60 <HAL_RCC_ClockConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cce:	f000 fac1 	bl	8002254 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001cd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f94c 	bl	8004f7c <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cea:	f000 fab3 	bl	8002254 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3750      	adds	r7, #80	; 0x50
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <MX_ADC1_Init+0xd0>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d24:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d32:	2204      	movs	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d36:	4823      	ldr	r0, [pc, #140]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d38:	f000 fd4a 	bl	80027d0 <HAL_ADC_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d42:	f000 fa87 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001d4e:	2306      	movs	r3, #6
 8001d50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	481b      	ldr	r0, [pc, #108]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d58:	f000 ff02 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f000 fa77 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4814      	ldr	r0, [pc, #80]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d74:	f000 fef4 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d7e:	f000 fa69 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d82:	2302      	movs	r3, #2
 8001d84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d86:	2303      	movs	r3, #3
 8001d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001d90:	f000 fee6 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d9a:	f000 fa5b 	bl	8002254 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001da2:	2304      	movs	r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_ADC1_Init+0xcc>)
 8001dac:	f000 fed8 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001db6:	f000 fa4d 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000bc 	.word	0x200000bc
 8001dc8:	40012400 	.word	0x40012400

08001dcc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b094      	sub	sp, #80	; 0x50
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <MX_CAN_Init+0x134>)
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <MX_CAN_Init+0x138>)
 8001dd6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <MX_CAN_Init+0x134>)
 8001dda:	2204      	movs	r2, #4
 8001ddc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <MX_CAN_Init+0x134>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <MX_CAN_Init+0x134>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001dea:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <MX_CAN_Init+0x134>)
 8001dec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001df0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <MX_CAN_Init+0x134>)
 8001df4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001dfa:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <MX_CAN_Init+0x134>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e0c:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e1e:	4838      	ldr	r0, [pc, #224]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e20:	f001 f946 	bl	80030b0 <HAL_CAN_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001e2a:	f000 fa13 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // SIU RECEIVE
     CAN_FilterTypeDef FilterConfig1;
     FilterConfig1.FilterIdHigh = SIU_RX_ID << 5 ;
 8001e2e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
     FilterConfig1.FilterIdLow = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
     FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8001e38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
     FilterConfig1.FilterMaskIdLow = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
     FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
     FilterConfig1.FilterBank = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
     FilterConfig1.SlaveStartFilterBank = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
     FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
     FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e52:	2301      	movs	r3, #1
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
     FilterConfig1.FilterActivation = ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <MX_CAN_Init+0x134>)
 8001e62:	f001 fa20 	bl	80032a6 <HAL_CAN_ConfigFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_CAN_Init+0xa4>
   	  Error_Handler();
 8001e6c:	f000 f9f2 	bl	8002254 <Error_Handler>
   	}

     CAN_FilterTypeDef FilterConfig11;
     FilterConfig11.FilterIdHigh = SIU_RX_ID << 5 ;
 8001e70:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001e74:	603b      	str	r3, [r7, #0]
     FilterConfig11.FilterIdLow = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
     FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8001e7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e7e:	60bb      	str	r3, [r7, #8]
     FilterConfig11.FilterMaskIdLow = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
     FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
     FilterConfig11.FilterBank = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
     FilterConfig11.SlaveStartFilterBank = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
     FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
     FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
     FilterConfig11.FilterActivation = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	623b      	str	r3, [r7, #32]

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4817      	ldr	r0, [pc, #92]	; (8001f00 <MX_CAN_Init+0x134>)
 8001ea2:	f001 fa00 	bl	80032a6 <HAL_CAN_ConfigFilter>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_CAN_Init+0xe4>
   	  Error_Handler();
 8001eac:	f000 f9d2 	bl	8002254 <Error_Handler>
   	}

     // we activate the notifications (interrupts) for FIFO0
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4813      	ldr	r0, [pc, #76]	; (8001f00 <MX_CAN_Init+0x134>)
 8001eb4:	f001 fd6c 	bl	8003990 <HAL_CAN_ActivateNotification>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_CAN_Init+0xf6>
  	   Error_Handler();
 8001ebe:	f000 f9c9 	bl	8002254 <Error_Handler>
   	}
     // we activate the notifications (interrupts) for FIFO1
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <MX_CAN_Init+0x134>)
 8001ec6:	f001 fd63 	bl	8003990 <HAL_CAN_ActivateNotification>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_CAN_Init+0x108>
  	   Error_Handler();
 8001ed0:	f000 f9c0 	bl	8002254 <Error_Handler>
   	}
     // we activate the notifications (interrupts) for all error codes
     if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8001ed4:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <MX_CAN_Init+0x134>)
 8001eda:	f001 fd59 	bl	8003990 <HAL_CAN_ActivateNotification>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_CAN_Init+0x11c>
  	   Error_Handler();
 8001ee4:	f000 f9b6 	bl	8002254 <Error_Handler>
     }
     // we start the CAN
     if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_CAN_Init+0x134>)
 8001eea:	f001 faa5 	bl	8003438 <HAL_CAN_Start>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_CAN_Init+0x12c>
   	  Error_Handler();
 8001ef4:	f000 f9ae 	bl	8002254 <Error_Handler>
     }
  /* USER CODE END CAN_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3750      	adds	r7, #80	; 0x50
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000130 	.word	0x20000130
 8001f04:	40006400 	.word	0x40006400

08001f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <MX_TIM1_Init+0x9c>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f2c:	2247      	movs	r2, #71	; 0x47
 8001f2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f50:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f52:	f003 f97f 	bl	8005254 <HAL_TIM_Base_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f000 f97a 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f6e:	f003 fb65 	bl	800563c <HAL_TIM_ConfigClockSource>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f78:	f000 f96c 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f8a:	f003 fd3b 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f94:	f000 f95e 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000158 	.word	0x20000158
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fce:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <MX_TIM2_Init+0x98>)
 8001ff0:	f003 f930 	bl	8005254 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ffa:	f000 f92b 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_TIM2_Init+0x98>)
 800200c:	f003 fb16 	bl	800563c <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002016:	f000 f91d 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_TIM2_Init+0x98>)
 8002028:	f003 fcec 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002032:	f000 f90f 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001a0 	.word	0x200001a0

08002044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <MX_TIM3_Init+0x98>)
 8002064:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002068:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800206c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002076:	2263      	movs	r2, #99	; 0x63
 8002078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_TIM3_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002088:	f003 f8e4 	bl	8005254 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002092:	f000 f8df 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM3_Init+0x94>)
 80020a4:	f003 faca 	bl	800563c <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020ae:	f000 f8d1 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM3_Init+0x94>)
 80020c0:	f003 fca0 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ca:	f000 f8c3 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200001e8 	.word	0x200001e8
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <MX_USART1_UART_Init+0x50>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002118:	f003 fce4 	bl	8005ae4 <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002122:	f000 f897 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000230 	.word	0x20000230
 8002130:	40013800 	.word	0x40013800

08002134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_DMA_Init+0x38>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <MX_DMA_Init+0x38>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_DMA_Init+0x38>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	200b      	movs	r0, #11
 8002158:	f001 ff27 	bl	8003faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800215c:	200b      	movs	r0, #11
 800215e:	f001 ff40 	bl	8003fe2 <HAL_NVIC_EnableIRQ>

}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <MX_GPIO_Init+0xb4>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a26      	ldr	r2, [pc, #152]	; (8002224 <MX_GPIO_Init+0xb4>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <MX_GPIO_Init+0xb4>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <MX_GPIO_Init+0xb4>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <MX_GPIO_Init+0xb4>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_GPIO_Init+0xb4>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <MX_GPIO_Init+0xb4>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <MX_GPIO_Init+0xb4>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <MX_GPIO_Init+0xb4>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d2:	4815      	ldr	r0, [pc, #84]	; (8002228 <MX_GPIO_Init+0xb8>)
 80021d4:	f002 faa9 	bl	800472a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO01_Pin|DO02_Pin|DO03_Pin|DO04_Pin
 80021d8:	2200      	movs	r2, #0
 80021da:	f24f 0120 	movw	r1, #61472	; 0xf020
 80021de:	4812      	ldr	r0, [pc, #72]	; (8002228 <MX_GPIO_Init+0xb8>)
 80021e0:	f002 faa3 	bl	800472a <HAL_GPIO_WritePin>
                          |DIN06_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIN03_Pin DIN02_Pin DIN01_Pin DIN04_Pin
                           DIN05_Pin DIN07_Pin DIN08_Pin */
  GPIO_InitStruct.Pin = DIN03_Pin|DIN02_Pin|DIN01_Pin|DIN04_Pin
 80021e4:	23df      	movs	r3, #223	; 0xdf
 80021e6:	613b      	str	r3, [r7, #16]
                          |DIN05_Pin|DIN07_Pin|DIN08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	4619      	mov	r1, r3
 80021f6:	480c      	ldr	r0, [pc, #48]	; (8002228 <MX_GPIO_Init+0xb8>)
 80021f8:	f002 f8fc 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO01_Pin DO02_Pin DO03_Pin
                           DO04_Pin DIN06_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO01_Pin|DO02_Pin|DO03_Pin
 80021fc:	f24f 4320 	movw	r3, #62496	; 0xf420
 8002200:	613b      	str	r3, [r7, #16]
                          |DO04_Pin|DIN06_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2302      	movs	r3, #2
 800220c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4619      	mov	r1, r3
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_GPIO_Init+0xb8>)
 8002216:	f002 f8ed 	bl	80043f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	40010c00 	.word	0x40010c00

0800222c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
	}
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	200001e8 	.word	0x200001e8
 8002250:	20001338 	.word	0x20001338

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 800225c:	20c8      	movs	r0, #200	; 0xc8
 800225e:	f000 fa93 	bl	8002788 <HAL_Delay>
	  NVIC_SystemReset();
 8002262:	f7ff fc9f 	bl	8001ba4 <__NVIC_SystemReset>
	...

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_MspInit+0x5c>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_MspInit+0x5c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6193      	str	r3, [r2, #24]
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_MspInit+0x5c>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_MspInit+0x5c>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_MspInit+0x5c>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	61d3      	str	r3, [r2, #28]
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_MspInit+0x5c>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_MspInit+0x60>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_MspInit+0x60>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010000 	.word	0x40010000

080022cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_ADC_MspInit+0xbc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d149      	bne.n	8002380 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_ADC_MspInit+0xc0>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_ADC_MspInit+0xc0>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_ADC_MspInit+0xc0>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_ADC_MspInit+0xc0>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_ADC_MspInit+0xc0>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_ADC_MspInit+0xc0>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800231c:	230f      	movs	r3, #15
 800231e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002320:	2303      	movs	r3, #3
 8002322:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4619      	mov	r1, r3
 800232a:	4819      	ldr	r0, [pc, #100]	; (8002390 <HAL_ADC_MspInit+0xc4>)
 800232c:	f002 f862 	bl	80043f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_ADC_MspInit+0xcc>)
 8002334:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 800234a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002356:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 800235a:	2220      	movs	r2, #32
 800235c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002366:	f001 fe57 	bl	8004018 <HAL_DMA_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002370:	f7ff ff70 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 8002378:	621a      	str	r2, [r3, #32]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_ADC_MspInit+0xc8>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40012400 	.word	0x40012400
 800238c:	40021000 	.word	0x40021000
 8002390:	40010800 	.word	0x40010800
 8002394:	200000ec 	.word	0x200000ec
 8002398:	40020008 	.word	0x40020008

0800239c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_CAN_MspInit+0x9c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d139      	bne.n	8002430 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c6:	61d3      	str	r3, [r2, #28]
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_CAN_MspInit+0xa0>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4619      	mov	r1, r3
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <HAL_CAN_MspInit+0xa4>)
 8002402:	f001 fff7 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <HAL_CAN_MspInit+0xa4>)
 800241c:	f001 ffea 	bl	80043f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	2014      	movs	r0, #20
 8002426:	f001 fdc0 	bl	8003faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800242a:	2014      	movs	r0, #20
 800242c:	f001 fdd9 	bl	8003fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40006400 	.word	0x40006400
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800

08002444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_TIM_Base_MspInit+0x8c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10c      	bne.n	8002470 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 800245c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800246e:	e02a      	b.n	80024c6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d10c      	bne.n	8002494 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
}
 8002492:	e018      	b.n	80024c6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <HAL_TIM_Base_MspInit+0x94>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d113      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_TIM_Base_MspInit+0x90>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	201d      	movs	r0, #29
 80024bc:	f001 fd75 	bl	8003faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c0:	201d      	movs	r0, #29
 80024c2:	f001 fd8e 	bl	8003fe2 <HAL_NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40000400 	.word	0x40000400

080024dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_UART_MspInit+0x8c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d131      	bne.n	8002560 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_UART_MspInit+0x90>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_UART_MspInit+0x90>)
 8002502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_UART_MspInit+0x90>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_UART_MspInit+0x90>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_UART_MspInit+0x90>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_UART_MspInit+0x90>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800252c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4619      	mov	r1, r3
 8002540:	480b      	ldr	r0, [pc, #44]	; (8002570 <HAL_UART_MspInit+0x94>)
 8002542:	f001 ff57 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_UART_MspInit+0x94>)
 800255c:	f001 ff4a 	bl	80043f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40013800 	.word	0x40013800
 800256c:	40021000 	.word	0x40021000
 8002570:	40010800 	.word	0x40010800

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	e7fe      	b.n	8002578 <NMI_Handler+0x4>

0800257a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler+0x4>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <UsageFault_Handler+0x4>

08002592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ba:	f000 f8c9 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ca:	f001 fddf 	bl	800418c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200000ec 	.word	0x200000ec

080025d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80025de:	f001 f9fc 	bl	80039da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000130 	.word	0x20000130

080025ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <TIM3_IRQHandler+0x10>)
 80025f2:	f002 ff1b 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001e8 	.word	0x200001e8

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f003 fb5e 	bl	8005cf0 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20005000 	.word	0x20005000
 8002660:	00000400 	.word	0x00000400
 8002664:	2000137c 	.word	0x2000137c
 8002668:	200014d0 	.word	0x200014d0

0800266c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <Reset_Handler>:
 8002678:	f7ff fff8 	bl	800266c <SystemInit>
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <LoopFillZerobss+0xe>)
 800267e:	490c      	ldr	r1, [pc, #48]	; (80026b0 <LoopFillZerobss+0x12>)
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <LoopFillZerobss+0x16>)
 8002682:	2300      	movs	r3, #0
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:
 8002686:	58d4      	ldr	r4, [r2, r3]
 8002688:	50c4      	str	r4, [r0, r3]
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:
 800268c:	18c4      	adds	r4, r0, r3
 800268e:	428c      	cmp	r4, r1
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <LoopFillZerobss+0x1a>)
 8002694:	4c09      	ldr	r4, [pc, #36]	; (80026bc <LoopFillZerobss+0x1e>)
 8002696:	2300      	movs	r3, #0
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:
 800269e:	42a2      	cmp	r2, r4
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>
 80026a2:	f003 fb2b 	bl	8005cfc <__libc_init_array>
 80026a6:	f7ff fa93 	bl	8001bd0 <main>
 80026aa:	4770      	bx	lr
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000068 	.word	0x20000068
 80026b4:	08006754 	.word	0x08006754
 80026b8:	20000068 	.word	0x20000068
 80026bc:	200014cc 	.word	0x200014cc

080026c0 <ADC1_2_IRQHandler>:
 80026c0:	e7fe      	b.n	80026c0 <ADC1_2_IRQHandler>
	...

080026c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_Init+0x28>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_Init+0x28>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f001 fc5d 	bl	8003f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026da:	200f      	movs	r0, #15
 80026dc:	f000 f808 	bl	80026f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e0:	f7ff fdc2 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x54>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x58>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	fbb3 f3f1 	udiv	r3, r3, r1
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fc75 	bl	8003ffe <HAL_SYSTICK_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00e      	b.n	800273c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d80a      	bhi.n	800273a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f001 fc3d 	bl	8003faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <HAL_InitTick+0x5c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000000c 	.word	0x2000000c
 8002748:	20000014 	.word	0x20000014
 800274c:	20000010 	.word	0x20000010

08002750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x1c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x20>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <HAL_IncTick+0x20>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000014 	.word	0x20000014
 8002770:	20001380 	.word	0x20001380

08002774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_GetTick+0x10>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20001380 	.word	0x20001380

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fff0 	bl	8002774 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d005      	beq.n	80027ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_Delay+0x44>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ae:	bf00      	nop
 80027b0:	f7ff ffe0 	bl	8002774 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d8f7      	bhi.n	80027b0 <HAL_Delay+0x28>
  {
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000014 	.word	0x20000014

080027d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0be      	b.n	8002970 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fd5c 	bl	80022cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 faf5 	bl	8002e04 <ADC_ConversionStop_Disable>
 800281a:	4603      	mov	r3, r0
 800281c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8099 	bne.w	800295e <HAL_ADC_Init+0x18e>
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8095 	bne.w	800295e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800283c:	f023 0302 	bic.w	r3, r3, #2
 8002840:	f043 0202 	orr.w	r2, r3, #2
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002850:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7b1b      	ldrb	r3, [r3, #12]
 8002856:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002858:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002868:	d003      	beq.n	8002872 <HAL_ADC_Init+0xa2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_ADC_Init+0xa8>
 8002872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002876:	e000      	b.n	800287a <HAL_ADC_Init+0xaa>
 8002878:	2300      	movs	r3, #0
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7d1b      	ldrb	r3, [r3, #20]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d119      	bne.n	80028bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7b1b      	ldrb	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	3b01      	subs	r3, #1
 8002896:	035a      	lsls	r2, r3, #13
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e00b      	b.n	80028bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_ADC_Init+0x1a8>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ec:	d003      	beq.n	80028f6 <HAL_ADC_Init+0x126>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d104      	bne.n	8002900 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	051b      	lsls	r3, r3, #20
 80028fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	430a      	orrs	r2, r1
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_ADC_Init+0x1ac>)
 800291c:	4013      	ands	r3, r2
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	429a      	cmp	r2, r3
 8002922:	d10b      	bne.n	800293c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800293a:	e018      	b.n	800296e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f023 0312 	bic.w	r3, r3, #18
 8002944:	f043 0210 	orr.w	r2, r3, #16
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800295c:	e007      	b.n	800296e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	ffe1f7fd 	.word	0xffe1f7fd
 800297c:	ff1f0efe 	.word	0xff1f0efe

08002980 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a64      	ldr	r2, [pc, #400]	; (8002b28 <HAL_ADC_Start_DMA+0x1a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <HAL_ADC_Start_DMA+0x24>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a63      	ldr	r2, [pc, #396]	; (8002b2c <HAL_ADC_Start_DMA+0x1ac>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_Start_DMA+0x32>
 80029a4:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <HAL_ADC_Start_DMA+0x1a8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 80b3 	bne.w	8002b18 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_Start_DMA+0x40>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0ae      	b.n	8002b1e <HAL_ADC_Start_DMA+0x19e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9c1 	bl	8002d50 <ADC_Enable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 809a 	bne.w	8002b0e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_ADC_Start_DMA+0x1ac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x84>
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_ADC_Start_DMA+0x1a8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d115      	bne.n	8002a30 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d026      	beq.n	8002a6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a2e:	e01d      	b.n	8002a6c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a39      	ldr	r2, [pc, #228]	; (8002b28 <HAL_ADC_Start_DMA+0x1a8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_ADC_Start_DMA+0xd0>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <HAL_ADC_Start_DMA+0x1ac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10d      	bne.n	8002a6c <HAL_ADC_Start_DMA+0xec>
 8002a50:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <HAL_ADC_Start_DMA+0x1a8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f023 0206 	bic.w	r2, r3, #6
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a84:	e002      	b.n	8002a8c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <HAL_ADC_Start_DMA+0x1b0>)
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a24      	ldr	r2, [pc, #144]	; (8002b34 <HAL_ADC_Start_DMA+0x1b4>)
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_ADC_Start_DMA+0x1b8>)
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0202 	mvn.w	r2, #2
 8002ab4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a18      	ldr	r0, [r3, #32]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	334c      	adds	r3, #76	; 0x4c
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f001 faf9 	bl	80040cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ae4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ae8:	d108      	bne.n	8002afc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002af8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002afa:	e00f      	b.n	8002b1c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b0a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b0c:	e006      	b.n	8002b1c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002b16:	e001      	b.n	8002b1c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40012400 	.word	0x40012400
 8002b2c:	40012800 	.word	0x40012800
 8002b30:	08002e87 	.word	0x08002e87
 8002b34:	08002f03 	.word	0x08002f03
 8002b38:	08002f1f 	.word	0x08002f1f

08002b3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x20>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0dc      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1da>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d81c      	bhi.n	8002bca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b05      	subs	r3, #5
 8002ba2:	221f      	movs	r2, #31
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	4019      	ands	r1, r3
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b05      	subs	r3, #5
 8002bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc8:	e03c      	b.n	8002c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d81c      	bhi.n	8002c0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b23      	subs	r3, #35	; 0x23
 8002be4:	221f      	movs	r2, #31
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4019      	ands	r1, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b23      	subs	r3, #35	; 0x23
 8002bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
 8002c0a:	e01b      	b.n	8002c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	; 0x41
 8002c1e:	221f      	movs	r2, #31
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4019      	ands	r1, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b41      	subs	r3, #65	; 0x41
 8002c38:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d91c      	bls.n	8002c86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b1e      	subs	r3, #30
 8002c5e:	2207      	movs	r2, #7
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4019      	ands	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6898      	ldr	r0, [r3, #8]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	3b1e      	subs	r3, #30
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	e019      	b.n	8002cba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6919      	ldr	r1, [r3, #16]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	2207      	movs	r2, #7
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4019      	ands	r1, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6898      	ldr	r0, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d003      	beq.n	8002cca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cc6:	2b11      	cmp	r3, #17
 8002cc8:	d132      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d125      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d126      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cf0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d11a      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <HAL_ADC_ConfigChannel+0x1ec>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9a      	lsrs	r2, r3, #18
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x1b2>
 8002d1e:	e007      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40012400 	.word	0x40012400
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	431bde83 	.word	0x431bde83

08002d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d040      	beq.n	8002df0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <ADC_Enable+0xac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <ADC_Enable+0xb0>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	0c9b      	lsrs	r3, r3, #18
 8002d8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d8c:	e002      	b.n	8002d94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f9      	bne.n	8002d8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9a:	f7ff fceb 	bl	8002774 <HAL_GetTick>
 8002d9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002da0:	e01f      	b.n	8002de2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002da2:	f7ff fce7 	bl	8002774 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d918      	bls.n	8002de2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d011      	beq.n	8002de2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e007      	b.n	8002df2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d1d8      	bne.n	8002da2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000000c 	.word	0x2000000c
 8002e00:	431bde83 	.word	0x431bde83

08002e04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d12e      	bne.n	8002e7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e2e:	f7ff fca1 	bl	8002774 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e34:	e01b      	b.n	8002e6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e36:	f7ff fc9d 	bl	8002774 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d0dc      	beq.n	8002e36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d127      	bne.n	8002ef0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eba:	d115      	bne.n	8002ee8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff fe27 	bl	8002b3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002eee:	e004      	b.n	8002efa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7fe fc03 	bl	800171c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fe02 	bl	8002b4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e097      	b.n	80030a2 <HAL_ADCEx_Calibration_Start+0x14e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff42 	bl	8002e04 <ADC_ConversionStop_Disable>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fee3 	bl	8002d50 <ADC_Enable>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 8081 	bne.w	8003098 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f9e:	f023 0302 	bic.w	r3, r3, #2
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002faa:	4b40      	ldr	r3, [pc, #256]	; (80030ac <HAL_ADCEx_Calibration_Start+0x158>)
 8002fac:	681c      	ldr	r4, [r3, #0]
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f002 f89a 	bl	80050e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002fba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002fbc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002fbe:	e002      	b.n	8002fc6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
 8002fda:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002fdc:	f7ff fbca 	bl	8002774 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002fe2:	e01b      	b.n	800301c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002fe4:	f7ff fbc6 	bl	8002774 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b0a      	cmp	r3, #10
 8002ff0:	d914      	bls.n	800301c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f023 0312 	bic.w	r3, r3, #18
 8003008:	f043 0210 	orr.w	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e042      	b.n	80030a2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1dc      	bne.n	8002fe4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0204 	orr.w	r2, r2, #4
 8003038:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800303a:	f7ff fb9b 	bl	8002774 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003040:	e01b      	b.n	800307a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003042:	f7ff fb97 	bl	8002774 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b0a      	cmp	r3, #10
 800304e:	d914      	bls.n	800307a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f023 0312 	bic.w	r3, r3, #18
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e013      	b.n	80030a2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1dc      	bne.n	8003042 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f023 0303 	bic.w	r3, r3, #3
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0ed      	b.n	800329e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff f964 	bl	800239c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e4:	f7ff fb46 	bl	8002774 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030ea:	e012      	b.n	8003112 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030ec:	f7ff fb42 	bl	8002774 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b0a      	cmp	r3, #10
 80030f8:	d90b      	bls.n	8003112 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2205      	movs	r2, #5
 800310a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0c5      	b.n	800329e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0e5      	beq.n	80030ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0202 	bic.w	r2, r2, #2
 800312e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003130:	f7ff fb20 	bl	8002774 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003136:	e012      	b.n	800315e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003138:	f7ff fb1c 	bl	8002774 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b0a      	cmp	r3, #10
 8003144:	d90b      	bls.n	800315e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2205      	movs	r2, #5
 8003156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e09f      	b.n	800329e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e5      	bne.n	8003138 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e1b      	ldrb	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7e5b      	ldrb	r3, [r3, #25]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7e9b      	ldrb	r3, [r3, #26]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e007      	b.n	80031ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0220 	bic.w	r2, r2, #32
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7edb      	ldrb	r3, [r3, #27]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0210 	bic.w	r2, r2, #16
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0210 	orr.w	r2, r2, #16
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7f1b      	ldrb	r3, [r3, #28]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e007      	b.n	800323e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7f5b      	ldrb	r3, [r3, #29]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d108      	bne.n	8003258 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0204 	orr.w	r2, r2, #4
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e007      	b.n	8003268 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	ea42 0103 	orr.w	r1, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032bc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032be:	7cfb      	ldrb	r3, [r7, #19]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d003      	beq.n	80032cc <HAL_CAN_ConfigFilter+0x26>
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	f040 80aa 	bne.w	8003420 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2201      	movs	r2, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d123      	bne.n	800334e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	401a      	ands	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003328:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3248      	adds	r2, #72	; 0x48
 800332e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003342:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003344:	6979      	ldr	r1, [r7, #20]
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d122      	bne.n	800339c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	431a      	orrs	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003376:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3248      	adds	r2, #72	; 0x48
 800337c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003390:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	3348      	adds	r3, #72	; 0x48
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	440b      	add	r3, r1
 800339a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033b6:	e007      	b.n	80033c8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033e2:	e007      	b.n	80033f4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d107      	bne.n	800340c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e006      	b.n	800342e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d12e      	bne.n	80034aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003464:	f7ff f986 	bl	8002774 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800346a:	e012      	b.n	8003492 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800346c:	f7ff f982 	bl	8002774 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b0a      	cmp	r3, #10
 8003478:	d90b      	bls.n	8003492 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2205      	movs	r2, #5
 800348a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e012      	b.n	80034b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e006      	b.n	80034b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d003      	beq.n	80034ec <HAL_CAN_AddTxMessage+0x2c>
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	f040 80ad 	bne.w	8003646 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8095 	beq.w	8003636 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	0e1b      	lsrs	r3, r3, #24
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003516:	2201      	movs	r2, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	409a      	lsls	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	6809      	ldr	r1, [r1, #0]
 8003536:	431a      	orrs	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3318      	adds	r3, #24
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	440b      	add	r3, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e00f      	b.n	8003564 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800354e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003558:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3318      	adds	r3, #24
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	440b      	add	r3, r1
 8003562:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	3318      	adds	r3, #24
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	440b      	add	r3, r1
 8003574:	3304      	adds	r3, #4
 8003576:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	7d1b      	ldrb	r3, [r3, #20]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d111      	bne.n	80035a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3318      	adds	r3, #24
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	6811      	ldr	r1, [r2, #0]
 8003594:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3318      	adds	r3, #24
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	440b      	add	r3, r1
 80035a0:	3304      	adds	r3, #4
 80035a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3307      	adds	r3, #7
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	061a      	lsls	r2, r3, #24
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3306      	adds	r3, #6
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3305      	adds	r3, #5
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	4313      	orrs	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	3204      	adds	r2, #4
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	4610      	mov	r0, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6811      	ldr	r1, [r2, #0]
 80035cc:	ea43 0200 	orr.w	r2, r3, r0
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3303      	adds	r3, #3
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	061a      	lsls	r2, r3, #24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3302      	adds	r3, #2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3301      	adds	r3, #1
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	4313      	orrs	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	4610      	mov	r0, r2
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6811      	ldr	r1, [r2, #0]
 8003602:	ea43 0200 	orr.w	r2, r3, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	440b      	add	r3, r1
 800360c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003610:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3318      	adds	r3, #24
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6811      	ldr	r1, [r2, #0]
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3318      	adds	r3, #24
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e00e      	b.n	8003654 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e006      	b.n	8003654 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	3724      	adds	r7, #36	; 0x24
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d002      	beq.n	800367c <HAL_CAN_AbortTxRequest+0x1e>
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d128      	bne.n	80036ce <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003694:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ae:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036c8:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e006      	b.n	80036dc <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80036fa:	7afb      	ldrb	r3, [r7, #11]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d002      	beq.n	8003706 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003700:	7afb      	ldrb	r3, [r7, #11]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d11d      	bne.n	8003742 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003762:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d003      	beq.n	8003772 <HAL_CAN_GetRxMessage+0x24>
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b02      	cmp	r3, #2
 800376e:	f040 8103 	bne.w	8003978 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10e      	bne.n	8003796 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0f7      	b.n	8003986 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0e8      	b.n	8003986 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	331b      	adds	r3, #27
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0204 	and.w	r2, r3, #4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	331b      	adds	r3, #27
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0d5b      	lsrs	r3, r3, #21
 80037e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	331b      	adds	r3, #27
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	4413      	add	r3, r2
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	08db      	lsrs	r3, r3, #3
 80037fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	331b      	adds	r3, #27
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	4413      	add	r3, r2
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0202 	and.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	331b      	adds	r3, #27
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2208      	movs	r2, #8
 8003836:	611a      	str	r2, [r3, #16]
 8003838:	e00b      	b.n	8003852 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	331b      	adds	r3, #27
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	4413      	add	r3, r2
 8003846:	3304      	adds	r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	331b      	adds	r3, #27
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	3304      	adds	r3, #4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b2da      	uxtb	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	331b      	adds	r3, #27
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0a1a      	lsrs	r2, r3, #8
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0c1a      	lsrs	r2, r3, #16
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	3302      	adds	r3, #2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0e1a      	lsrs	r2, r3, #24
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	3303      	adds	r3, #3
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3304      	adds	r3, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	4413      	add	r3, r2
 8003908:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	0a1a      	lsrs	r2, r3, #8
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3305      	adds	r3, #5
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0c1a      	lsrs	r2, r3, #16
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	3306      	adds	r3, #6
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	0e1a      	lsrs	r2, r3, #24
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	3307      	adds	r3, #7
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0220 	orr.w	r2, r2, #32
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e007      	b.n	8003974 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0220 	orr.w	r2, r2, #32
 8003972:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e006      	b.n	8003986 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d002      	beq.n	80039ae <HAL_CAN_ActivateNotification+0x1e>
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d109      	bne.n	80039c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6959      	ldr	r1, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e006      	b.n	80039d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d07c      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d023      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f983 	bl	8003d48 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a42:	e016      	b.n	8003a72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	e00c      	b.n	8003a72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	e002      	b.n	8003a72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f986 	bl	8003d7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d024      	beq.n	8003ac6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f962 	bl	8003d5a <HAL_CAN_TxMailbox1CompleteCallback>
 8003a96:	e016      	b.n	8003ac6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e00c      	b.n	8003ac6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e002      	b.n	8003ac6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f965 	bl	8003d90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d024      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ad8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f941 	bl	8003d6c <HAL_CAN_TxMailbox2CompleteCallback>
 8003aea:	e016      	b.n	8003b1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	e00c      	b.n	8003b1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
 8003b12:	e002      	b.n	8003b1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f944 	bl	8003da2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2208      	movs	r2, #8
 8003b58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f92a 	bl	8003db4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd fda5 	bl	80016c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f901 	bl	8003dc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fd fd7f 	bl	80016e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8ea 	bl	8003dd8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8e2 	bl	8003dea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d07b      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d072      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d043      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d03e      	beq.n	8003d20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d02b      	beq.n	8003d04 <HAL_CAN_IRQHandler+0x32a>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d82e      	bhi.n	8003d0e <HAL_CAN_IRQHandler+0x334>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d022      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x320>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d82a      	bhi.n	8003d0e <HAL_CAN_IRQHandler+0x334>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d019      	beq.n	8003cf0 <HAL_CAN_IRQHandler+0x316>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d826      	bhi.n	8003d0e <HAL_CAN_IRQHandler+0x334>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d010      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0x30c>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d822      	bhi.n	8003d0e <HAL_CAN_IRQHandler+0x334>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d002      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x2f8>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d005      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003cd0:	e01d      	b.n	8003d0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cda:	e019      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f043 0310 	orr.w	r3, r3, #16
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ce4:	e014      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	f043 0320 	orr.w	r3, r3, #32
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cee:	e00f      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cf8:	e00a      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d02:	e005      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d0c:	e000      	b.n	8003d10 <HAL_CAN_IRQHandler+0x336>
            break;
 8003d0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2204      	movs	r2, #4
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd fcdc 	bl	80016f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <__NVIC_SetPriorityGrouping>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e2e:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <__NVIC_SetPriorityGrouping+0x44>)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	60d3      	str	r3, [r2, #12]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <__NVIC_GetPriorityGrouping>:
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <__NVIC_GetPriorityGrouping+0x18>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f003 0307 	and.w	r3, r3, #7
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <__NVIC_EnableIRQ>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	db0b      	blt.n	8003e8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	4906      	ldr	r1, [pc, #24]	; (8003e94 <__NVIC_EnableIRQ+0x34>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2001      	movs	r0, #1
 8003e82:	fa00 f202 	lsl.w	r2, r0, r2
 8003e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100

08003e98 <__NVIC_SetPriority>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	db0a      	blt.n	8003ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	490c      	ldr	r1, [pc, #48]	; (8003ee4 <__NVIC_SetPriority+0x4c>)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ec0:	e00a      	b.n	8003ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	4908      	ldr	r1, [pc, #32]	; (8003ee8 <__NVIC_SetPriority+0x50>)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3b04      	subs	r3, #4
 8003ed0:	0112      	lsls	r2, r2, #4
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	761a      	strb	r2, [r3, #24]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <NVIC_EncodePriority>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f1c3 0307 	rsb	r3, r3, #7
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	bf28      	it	cs
 8003f0a:	2304      	movcs	r3, #4
 8003f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d902      	bls.n	8003f1c <NVIC_EncodePriority+0x30>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3b03      	subs	r3, #3
 8003f1a:	e000      	b.n	8003f1e <NVIC_EncodePriority+0x32>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	401a      	ands	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	43d9      	mvns	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	4313      	orrs	r3, r2
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3724      	adds	r7, #36	; 0x24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f60:	d301      	bcc.n	8003f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00f      	b.n	8003f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <SysTick_Config+0x40>)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f6e:	210f      	movs	r1, #15
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f7ff ff90 	bl	8003e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <SysTick_Config+0x40>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <SysTick_Config+0x40>)
 8003f80:	2207      	movs	r2, #7
 8003f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff2d 	bl	8003dfc <__NVIC_SetPriorityGrouping>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fbc:	f7ff ff42 	bl	8003e44 <__NVIC_GetPriorityGrouping>
 8003fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f7ff ff90 	bl	8003eec <NVIC_EncodePriority>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff5f 	bl	8003e98 <__NVIC_SetPriority>
}
 8003fda:	bf00      	nop
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff35 	bl	8003e60 <__NVIC_EnableIRQ>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ffa2 	bl	8003f50 <SysTick_Config>
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e043      	b.n	80040b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_DMA_Init+0xa8>)
 8004036:	4413      	add	r3, r2
 8004038:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_DMA_Init+0xac>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	009a      	lsls	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <HAL_DMA_Init+0xb0>)
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004062:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004066:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	bffdfff8 	.word	0xbffdfff8
 80040c4:	cccccccd 	.word	0xcccccccd
 80040c8:	40020000 	.word	0x40020000

080040cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Start_IT+0x20>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e04b      	b.n	8004184 <HAL_DMA_Start_IT+0xb8>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d13a      	bne.n	8004176 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f937 	bl	8004398 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 020e 	orr.w	r2, r2, #14
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00f      	b.n	8004164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e005      	b.n	8004182 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2204      	movs	r2, #4
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04f      	beq.n	8004254 <HAL_DMA_IRQHandler+0xc8>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d04a      	beq.n	8004254 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a66      	ldr	r2, [pc, #408]	; (800437c <HAL_DMA_IRQHandler+0x1f0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d029      	beq.n	800423a <HAL_DMA_IRQHandler+0xae>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a65      	ldr	r2, [pc, #404]	; (8004380 <HAL_DMA_IRQHandler+0x1f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_IRQHandler+0xaa>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a63      	ldr	r2, [pc, #396]	; (8004384 <HAL_DMA_IRQHandler+0x1f8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01a      	beq.n	8004230 <HAL_DMA_IRQHandler+0xa4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a62      	ldr	r2, [pc, #392]	; (8004388 <HAL_DMA_IRQHandler+0x1fc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d012      	beq.n	800422a <HAL_DMA_IRQHandler+0x9e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_DMA_IRQHandler+0x200>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00a      	beq.n	8004224 <HAL_DMA_IRQHandler+0x98>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5f      	ldr	r2, [pc, #380]	; (8004390 <HAL_DMA_IRQHandler+0x204>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d102      	bne.n	800421e <HAL_DMA_IRQHandler+0x92>
 8004218:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800421c:	e00e      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800421e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004222:	e00b      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004224:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004228:	e008      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800422a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800422e:	e005      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004234:	e002      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 8004236:	2340      	movs	r3, #64	; 0x40
 8004238:	e000      	b.n	800423c <HAL_DMA_IRQHandler+0xb0>
 800423a:	2304      	movs	r3, #4
 800423c:	4a55      	ldr	r2, [pc, #340]	; (8004394 <HAL_DMA_IRQHandler+0x208>)
 800423e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8094 	beq.w	8004372 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004252:	e08e      	b.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2202      	movs	r2, #2
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d056      	beq.n	8004312 <HAL_DMA_IRQHandler+0x186>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d051      	beq.n	8004312 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020a 	bic.w	r2, r2, #10
 800428a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_DMA_IRQHandler+0x1f0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d029      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x166>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a37      	ldr	r2, [pc, #220]	; (8004380 <HAL_DMA_IRQHandler+0x1f4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_IRQHandler+0x162>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a35      	ldr	r2, [pc, #212]	; (8004384 <HAL_DMA_IRQHandler+0x1f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01a      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x15c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a34      	ldr	r2, [pc, #208]	; (8004388 <HAL_DMA_IRQHandler+0x1fc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d012      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x156>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a32      	ldr	r2, [pc, #200]	; (800438c <HAL_DMA_IRQHandler+0x200>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x150>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a31      	ldr	r2, [pc, #196]	; (8004390 <HAL_DMA_IRQHandler+0x204>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d102      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x14a>
 80042d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042d4:	e00e      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042da:	e00b      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	e008      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042e6:	e005      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ec:	e002      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042ee:	2320      	movs	r3, #32
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_IRQHandler+0x168>
 80042f2:	2302      	movs	r3, #2
 80042f4:	4a27      	ldr	r2, [pc, #156]	; (8004394 <HAL_DMA_IRQHandler+0x208>)
 80042f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d034      	beq.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004310:	e02f      	b.n	8004372 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2208      	movs	r2, #8
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d028      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d023      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020e 	bic.w	r2, r2, #14
 800433a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
    }
  }
  return;
 8004372:	bf00      	nop
 8004374:	bf00      	nop
}
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40020008 	.word	0x40020008
 8004380:	4002001c 	.word	0x4002001c
 8004384:	40020030 	.word	0x40020030
 8004388:	40020044 	.word	0x40020044
 800438c:	40020058 	.word	0x40020058
 8004390:	4002006c 	.word	0x4002006c
 8004394:	40020000 	.word	0x40020000

08004398 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2101      	movs	r1, #1
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d108      	bne.n	80043d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043d6:	e007      	b.n	80043e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	60da      	str	r2, [r3, #12]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b08b      	sub	sp, #44	; 0x2c
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004406:	e169      	b.n	80046dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004408:	2201      	movs	r2, #1
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	429a      	cmp	r2, r3
 8004422:	f040 8158 	bne.w	80046d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4a9a      	ldr	r2, [pc, #616]	; (8004694 <HAL_GPIO_Init+0x2a0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d05e      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004430:	4a98      	ldr	r2, [pc, #608]	; (8004694 <HAL_GPIO_Init+0x2a0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d875      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004436:	4a98      	ldr	r2, [pc, #608]	; (8004698 <HAL_GPIO_Init+0x2a4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d058      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 800443c:	4a96      	ldr	r2, [pc, #600]	; (8004698 <HAL_GPIO_Init+0x2a4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d86f      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004442:	4a96      	ldr	r2, [pc, #600]	; (800469c <HAL_GPIO_Init+0x2a8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d052      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004448:	4a94      	ldr	r2, [pc, #592]	; (800469c <HAL_GPIO_Init+0x2a8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d869      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800444e:	4a94      	ldr	r2, [pc, #592]	; (80046a0 <HAL_GPIO_Init+0x2ac>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d04c      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004454:	4a92      	ldr	r2, [pc, #584]	; (80046a0 <HAL_GPIO_Init+0x2ac>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d863      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800445a:	4a92      	ldr	r2, [pc, #584]	; (80046a4 <HAL_GPIO_Init+0x2b0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d046      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
 8004460:	4a90      	ldr	r2, [pc, #576]	; (80046a4 <HAL_GPIO_Init+0x2b0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d85d      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 8004466:	2b12      	cmp	r3, #18
 8004468:	d82a      	bhi.n	80044c0 <HAL_GPIO_Init+0xcc>
 800446a:	2b12      	cmp	r3, #18
 800446c:	d859      	bhi.n	8004522 <HAL_GPIO_Init+0x12e>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_GPIO_Init+0x80>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044ef 	.word	0x080044ef
 8004478:	080044c9 	.word	0x080044c9
 800447c:	080044db 	.word	0x080044db
 8004480:	0800451d 	.word	0x0800451d
 8004484:	08004523 	.word	0x08004523
 8004488:	08004523 	.word	0x08004523
 800448c:	08004523 	.word	0x08004523
 8004490:	08004523 	.word	0x08004523
 8004494:	08004523 	.word	0x08004523
 8004498:	08004523 	.word	0x08004523
 800449c:	08004523 	.word	0x08004523
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004523 	.word	0x08004523
 80044a8:	08004523 	.word	0x08004523
 80044ac:	08004523 	.word	0x08004523
 80044b0:	08004523 	.word	0x08004523
 80044b4:	08004523 	.word	0x08004523
 80044b8:	080044d1 	.word	0x080044d1
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	4a79      	ldr	r2, [pc, #484]	; (80046a8 <HAL_GPIO_Init+0x2b4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044c6:	e02c      	b.n	8004522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	623b      	str	r3, [r7, #32]
          break;
 80044ce:	e029      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	3304      	adds	r3, #4
 80044d6:	623b      	str	r3, [r7, #32]
          break;
 80044d8:	e024      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	3308      	adds	r3, #8
 80044e0:	623b      	str	r3, [r7, #32]
          break;
 80044e2:	e01f      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	330c      	adds	r3, #12
 80044ea:	623b      	str	r3, [r7, #32]
          break;
 80044ec:	e01a      	b.n	8004524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044f6:	2304      	movs	r3, #4
 80044f8:	623b      	str	r3, [r7, #32]
          break;
 80044fa:	e013      	b.n	8004524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004504:	2308      	movs	r3, #8
 8004506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	611a      	str	r2, [r3, #16]
          break;
 800450e:	e009      	b.n	8004524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004510:	2308      	movs	r3, #8
 8004512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	615a      	str	r2, [r3, #20]
          break;
 800451a:	e003      	b.n	8004524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800451c:	2300      	movs	r3, #0
 800451e:	623b      	str	r3, [r7, #32]
          break;
 8004520:	e000      	b.n	8004524 <HAL_GPIO_Init+0x130>
          break;
 8004522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2bff      	cmp	r3, #255	; 0xff
 8004528:	d801      	bhi.n	800452e <HAL_GPIO_Init+0x13a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_Init+0x13e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	2bff      	cmp	r3, #255	; 0xff
 8004538:	d802      	bhi.n	8004540 <HAL_GPIO_Init+0x14c>
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	e002      	b.n	8004546 <HAL_GPIO_Init+0x152>
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	3b08      	subs	r3, #8
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	210f      	movs	r1, #15
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	6a39      	ldr	r1, [r7, #32]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80b1 	beq.w	80046d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004574:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4a4c      	ldr	r2, [pc, #304]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6193      	str	r3, [r2, #24]
 8004580:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_GPIO_Init+0x2b8>)
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800458c:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	220f      	movs	r2, #15
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4013      	ands	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a40      	ldr	r2, [pc, #256]	; (80046b4 <HAL_GPIO_Init+0x2c0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_GPIO_Init+0x1ec>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_GPIO_Init+0x2c4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00d      	beq.n	80045dc <HAL_GPIO_Init+0x1e8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3e      	ldr	r2, [pc, #248]	; (80046bc <HAL_GPIO_Init+0x2c8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <HAL_GPIO_Init+0x1e4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a3d      	ldr	r2, [pc, #244]	; (80046c0 <HAL_GPIO_Init+0x2cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_GPIO_Init+0x1e0>
 80045d0:	2303      	movs	r3, #3
 80045d2:	e006      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045d4:	2304      	movs	r3, #4
 80045d6:	e004      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045d8:	2302      	movs	r3, #2
 80045da:	e002      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_GPIO_Init+0x1ee>
 80045e0:	2300      	movs	r3, #0
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	f002 0203 	and.w	r2, r2, #3
 80045e8:	0092      	lsls	r2, r2, #2
 80045ea:	4093      	lsls	r3, r2
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045f2:	492f      	ldr	r1, [pc, #188]	; (80046b0 <HAL_GPIO_Init+0x2bc>)
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	3302      	adds	r3, #2
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	492c      	ldr	r1, [pc, #176]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]
 8004618:	e006      	b.n	8004628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	43db      	mvns	r3, r3
 8004622:	4928      	ldr	r1, [pc, #160]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004624:	4013      	ands	r3, r2
 8004626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	4922      	ldr	r1, [pc, #136]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
 8004640:	e006      	b.n	8004650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	43db      	mvns	r3, r3
 800464a:	491e      	ldr	r1, [pc, #120]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800464c:	4013      	ands	r3, r2
 800464e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4918      	ldr	r1, [pc, #96]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	e006      	b.n	8004678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	43db      	mvns	r3, r3
 8004672:	4914      	ldr	r1, [pc, #80]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004674:	4013      	ands	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d021      	beq.n	80046c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	490e      	ldr	r1, [pc, #56]	; (80046c4 <HAL_GPIO_Init+0x2d0>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	e021      	b.n	80046d6 <HAL_GPIO_Init+0x2e2>
 8004692:	bf00      	nop
 8004694:	10320000 	.word	0x10320000
 8004698:	10310000 	.word	0x10310000
 800469c:	10220000 	.word	0x10220000
 80046a0:	10210000 	.word	0x10210000
 80046a4:	10120000 	.word	0x10120000
 80046a8:	10110000 	.word	0x10110000
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010800 	.word	0x40010800
 80046b8:	40010c00 	.word	0x40010c00
 80046bc:	40011000 	.word	0x40011000
 80046c0:	40011400 	.word	0x40011400
 80046c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_GPIO_Init+0x304>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	43db      	mvns	r3, r3
 80046d0:	4909      	ldr	r1, [pc, #36]	; (80046f8 <HAL_GPIO_Init+0x304>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	3301      	adds	r3, #1
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f47f ae8e 	bne.w	8004408 <HAL_GPIO_Init+0x14>
  }
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	372c      	adds	r7, #44	; 0x2c
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	40010400 	.word	0x40010400

080046fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	887b      	ldrh	r3, [r7, #2]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	e001      	b.n	800471e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	807b      	strh	r3, [r7, #2]
 8004736:	4613      	mov	r3, r2
 8004738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800473a:	787b      	ldrb	r3, [r7, #1]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004740:	887a      	ldrh	r2, [r7, #2]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004746:	e003      	b.n	8004750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004748:	887b      	ldrh	r3, [r7, #2]
 800474a:	041a      	lsls	r2, r3, #16
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	611a      	str	r2, [r3, #16]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
	...

0800475c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e272      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8087 	beq.w	800488a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800477c:	4b92      	ldr	r3, [pc, #584]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b04      	cmp	r3, #4
 8004786:	d00c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004788:	4b8f      	ldr	r3, [pc, #572]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b08      	cmp	r3, #8
 8004792:	d112      	bne.n	80047ba <HAL_RCC_OscConfig+0x5e>
 8004794:	4b8c      	ldr	r3, [pc, #560]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d10b      	bne.n	80047ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a2:	4b89      	ldr	r3, [pc, #548]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d06c      	beq.n	8004888 <HAL_RCC_OscConfig+0x12c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d168      	bne.n	8004888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e24c      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x76>
 80047c4:	4b80      	ldr	r3, [pc, #512]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7f      	ldr	r2, [pc, #508]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e02e      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x98>
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7a      	ldr	r2, [pc, #488]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a77      	ldr	r2, [pc, #476]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0xbc>
 80047fe:	4b72      	ldr	r3, [pc, #456]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a71      	ldr	r2, [pc, #452]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6e      	ldr	r2, [pc, #440]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xd4>
 8004818:	4b6b      	ldr	r3, [pc, #428]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6a      	ldr	r2, [pc, #424]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b68      	ldr	r3, [pc, #416]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a67      	ldr	r2, [pc, #412]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fd ff9c 	bl	8002774 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fd ff98 	bl	8002774 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e200      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b5d      	ldr	r3, [pc, #372]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xe4>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fd ff88 	bl	8002774 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fd ff84 	bl	8002774 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1ec      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x10c>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048a2:	4b49      	ldr	r3, [pc, #292]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x18c>
 80048ae:	4b46      	ldr	r3, [pc, #280]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x176>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1c0      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4939      	ldr	r1, [pc, #228]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b36      	ldr	r3, [pc, #216]	; (80049cc <HAL_RCC_OscConfig+0x270>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fd ff3d 	bl	8002774 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fd ff39 	bl	8002774 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1a1      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4927      	ldr	r1, [pc, #156]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <HAL_RCC_OscConfig+0x270>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fd ff1c 	bl	8002774 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004940:	f7fd ff18 	bl	8002774 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e180      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03a      	beq.n	80049e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d019      	beq.n	80049a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004978:	f7fd fefc 	bl	8002774 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004980:	f7fd fef8 	bl	8002774 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e160      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <HAL_RCC_OscConfig+0x26c>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800499e:	2001      	movs	r0, #1
 80049a0:	f000 face 	bl	8004f40 <RCC_Delay>
 80049a4:	e01c      	b.n	80049e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ac:	f7fd fee2 	bl	8002774 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b2:	e00f      	b.n	80049d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fd fede 	bl	8002774 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d908      	bls.n	80049d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e146      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	42420000 	.word	0x42420000
 80049d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	4b92      	ldr	r3, [pc, #584]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e9      	bne.n	80049b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a6 	beq.w	8004b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b8b      	ldr	r3, [pc, #556]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4a87      	ldr	r2, [pc, #540]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	61d3      	str	r3, [r2, #28]
 8004a0a:	4b85      	ldr	r3, [pc, #532]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b82      	ldr	r3, [pc, #520]	; (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b7f      	ldr	r3, [pc, #508]	; (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7e      	ldr	r2, [pc, #504]	; (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fd fe9f 	bl	8002774 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fd fe9b 	bl	8002774 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e103      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_OscConfig+0x4c8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x312>
 8004a60:	4b6f      	ldr	r3, [pc, #444]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4a6e      	ldr	r2, [pc, #440]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	e02d      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x334>
 8004a76:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	4a69      	ldr	r2, [pc, #420]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6213      	str	r3, [r2, #32]
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4a66      	ldr	r2, [pc, #408]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6213      	str	r3, [r2, #32]
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x356>
 8004a98:	4b61      	ldr	r3, [pc, #388]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4a60      	ldr	r2, [pc, #384]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6213      	str	r3, [r2, #32]
 8004aa4:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6213      	str	r3, [r2, #32]
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x36e>
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4a5a      	ldr	r2, [pc, #360]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6213      	str	r3, [r2, #32]
 8004abe:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	4a57      	ldr	r2, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd fe4f 	bl	8002774 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd fe4b 	bl	8002774 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0b1      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b4b      	ldr	r3, [pc, #300]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x37e>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fd fe39 	bl	8002774 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fe35 	bl	8002774 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e09b      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1c:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4a3b      	ldr	r2, [pc, #236]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8087 	beq.w	8004c52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d061      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d146      	bne.n	8004be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fe09 	bl	8002774 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd fe05 	bl	8002774 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e06d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b78:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d108      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4921      	ldr	r1, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a19      	ldr	r1, [r3, #32]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	491b      	ldr	r1, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fd fdd9 	bl	8002774 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fd fdd5 	bl	8002774 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03d      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x46a>
 8004be4:	e035      	b.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCC_OscConfig+0x4cc>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd fdc2 	bl	8002774 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fd fdbe 	bl	8002774 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e026      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x498>
 8004c12:	e01e      	b.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e019      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_OscConfig+0x500>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000

08004c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0d0      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b6a      	ldr	r3, [pc, #424]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 0207 	bic.w	r2, r3, #7
 8004c8a:	4965      	ldr	r1, [pc, #404]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b63      	ldr	r3, [pc, #396]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0b8      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd4:	4b53      	ldr	r3, [pc, #332]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	494d      	ldr	r1, [pc, #308]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d040      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e07f      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e073      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3d      	ldr	r3, [pc, #244]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06b      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4936      	ldr	r1, [pc, #216]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fd fd10 	bl	8002774 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fd fd0c 	bl	8002774 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e053      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d210      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	4922      	ldr	r1, [pc, #136]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e032      	b.n	8004e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dbc:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	490e      	ldr	r1, [pc, #56]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dee:	f000 f821 	bl	8004e34 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490a      	ldr	r1, [pc, #40]	; (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	4a09      	ldr	r2, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1cc>)
 8004e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_ClockConfig+0x1d0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fc6e 	bl	80026f0 <HAL_InitTick>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40022000 	.word	0x40022000
 8004e24:	40021000 	.word	0x40021000
 8004e28:	080066d8 	.word	0x080066d8
 8004e2c:	2000000c 	.word	0x2000000c
 8004e30:	20000010 	.word	0x20000010

08004e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x30>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x36>
 8004e62:	e027      	b.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004e66:	613b      	str	r3, [r7, #16]
      break;
 8004e68:	e027      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0c9b      	lsrs	r3, r3, #18
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e74:	5cd3      	ldrb	r3, [r2, r3]
 8004e76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	0c5b      	lsrs	r3, r3, #17
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004e96:	fb03 f202 	mul.w	r2, r3, r2
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	e004      	b.n	8004eae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	613b      	str	r3, [r7, #16]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x98>)
 8004eb6:	613b      	str	r3, [r7, #16]
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	693b      	ldr	r3, [r7, #16]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	007a1200 	.word	0x007a1200
 8004ed0:	080066f0 	.word	0x080066f0
 8004ed4:	08006700 	.word	0x08006700
 8004ed8:	003d0900 	.word	0x003d0900

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b02      	ldr	r3, [pc, #8]	; (8004eec <HAL_RCC_GetHCLKFreq+0x10>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef4:	f7ff fff2 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	080066e8 	.word	0x080066e8

08004f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f1c:	f7ff ffde 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	0adb      	lsrs	r3, r3, #11
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	080066e8 	.word	0x080066e8

08004f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <RCC_Delay+0x34>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <RCC_Delay+0x38>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0a5b      	lsrs	r3, r3, #9
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f5c:	bf00      	nop
  }
  while (Delay --);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <RCC_Delay+0x1c>
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	2000000c 	.word	0x2000000c
 8004f78:	10624dd3 	.word	0x10624dd3

08004f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d07d      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9c:	4b4f      	ldr	r3, [pc, #316]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10d      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa8:	4b4c      	ldr	r3, [pc, #304]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4a4b      	ldr	r2, [pc, #300]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	61d3      	str	r3, [r2, #28]
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	4b46      	ldr	r3, [pc, #280]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d118      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd0:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a42      	ldr	r2, [pc, #264]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fdc:	f7fd fbca 	bl	8002774 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe4:	f7fd fbc6 	bl	8002774 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e06d      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02e      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d027      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005020:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005028:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800502a:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005030:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005036:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fd fb95 	bl	8002774 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	e00a      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fd fb91 	bl	8002774 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	; 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d901      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e036      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ee      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4917      	ldr	r1, [pc, #92]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	4313      	orrs	r3, r2
 8005080:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d105      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005092:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	490b      	ldr	r1, [pc, #44]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4904      	ldr	r1, [pc, #16]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40007000 	.word	0x40007000
 80050e4:	42420440 	.word	0x42420440

080050e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b10      	cmp	r3, #16
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b10      	cmp	r3, #16
 800510e:	f200 808a 	bhi.w	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d045      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d075      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800511e:	e082      	b.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005120:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005126:	4b45      	ldr	r3, [pc, #276]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d07b      	beq.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	4a41      	ldr	r2, [pc, #260]	; (8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800513c:	5cd3      	ldrb	r3, [r2, r3]
 800513e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d015      	beq.n	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800514a:	4b3c      	ldr	r3, [pc, #240]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	0c5b      	lsrs	r3, r3, #17
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005156:	5cd3      	ldrb	r3, [r2, r3]
 8005158:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005164:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	fbb2 f2f3 	udiv	r2, r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4a34      	ldr	r2, [pc, #208]	; (800524c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005180:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518c:	d102      	bne.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	61bb      	str	r3, [r7, #24]
      break;
 8005192:	e04a      	b.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4a2d      	ldr	r2, [pc, #180]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
      break;
 80051a2:	e042      	b.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b4:	d108      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e01f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d2:	d109      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80051e0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e00f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f2:	d11c      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005200:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005204:	61bb      	str	r3, [r7, #24]
      break;
 8005206:	e012      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005208:	e011      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800520a:	f7ff fe85 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0b9b      	lsrs	r3, r3, #14
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	3301      	adds	r3, #1
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	61bb      	str	r3, [r7, #24]
      break;
 8005224:	e004      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800522e:	bf00      	nop
    }
  }
  return (frequency);
 8005230:	69bb      	ldr	r3, [r7, #24]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	08006704 	.word	0x08006704
 8005244:	08006714 	.word	0x08006714
 8005248:	007a1200 	.word	0x007a1200
 800524c:	003d0900 	.word	0x003d0900
 8005250:	aaaaaaab 	.word	0xaaaaaaab

08005254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e041      	b.n	80052ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fd f8e2 	bl	8002444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f000 fabe 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d001      	beq.n	800530c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e032      	b.n	8005372 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <HAL_TIM_Base_Start+0x88>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start+0x48>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start+0x48>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a14      	ldr	r2, [pc, #80]	; (8005380 <HAL_TIM_Base_Start+0x8c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start+0x48>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a13      	ldr	r2, [pc, #76]	; (8005384 <HAL_TIM_Base_Start+0x90>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800

08005388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d001      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e03a      	b.n	8005416 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_TIM_Base_Start_IT+0x98>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x58>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d009      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x58>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <HAL_TIM_Base_Start_IT+0x9c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x58>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <HAL_TIM_Base_Start_IT+0xa0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d111      	bne.n	8005404 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b06      	cmp	r3, #6
 80053f0:	d010      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	e007      	b.n	8005414 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9b4 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9a7 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9b6 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f98a 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f97d 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f98c 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f960 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f953 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f962 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f936 	bl	80057dc <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f929 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f938 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc fe3e 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa7b 	bl	8005ad2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8fc 	bl	8005800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d10e      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b20      	cmp	r3, #32
 8005622:	d107      	bne.n	8005634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa46 	bl	8005ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_TIM_ConfigClockSource+0x1c>
 8005654:	2302      	movs	r3, #2
 8005656:	e0b4      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x186>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d03e      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0xd4>
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	f200 8087 	bhi.w	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	f000 8086 	beq.w	80057ae <HAL_TIM_ConfigClockSource+0x172>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d87f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b70      	cmp	r3, #112	; 0x70
 80056aa:	d01a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xa6>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d87b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b60      	cmp	r3, #96	; 0x60
 80056b2:	d050      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x11a>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d877      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056b8:	2b50      	cmp	r3, #80	; 0x50
 80056ba:	d03c      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xfa>
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d873      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d058      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x13a>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d86f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d064      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15a>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d86b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d060      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15a>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d867      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05c      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d05a      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	e062      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f2:	f000 f968 	bl	80059c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	609a      	str	r2, [r3, #8]
      break;
 800570e:	e04f      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005720:	f000 f951 	bl	80059c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005732:	609a      	str	r2, [r3, #8]
      break;
 8005734:	e03c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	461a      	mov	r2, r3
 8005744:	f000 f8c8 	bl	80058d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2150      	movs	r1, #80	; 0x50
 800574e:	4618      	mov	r0, r3
 8005750:	f000 f91f 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 8005754:	e02c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005762:	461a      	mov	r2, r3
 8005764:	f000 f8e6 	bl	8005934 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2160      	movs	r1, #96	; 0x60
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f90f 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 8005774:	e01c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	461a      	mov	r2, r3
 8005784:	f000 f8a8 	bl	80058d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2140      	movs	r1, #64	; 0x40
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f8ff 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 8005794:	e00c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f000 f8f6 	bl	8005992 <TIM_ITRx_SetConfig>
      break;
 80057a6:	e003      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
	...

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a29      	ldr	r2, [pc, #164]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005832:	d007      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <TIM_Base_SetConfig+0xbc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_Base_SetConfig+0x30>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a25      	ldr	r2, [pc, #148]	; (80058d4 <TIM_Base_SetConfig+0xc0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d108      	bne.n	8005856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1c      	ldr	r2, [pc, #112]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_Base_SetConfig+0xbc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x62>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_Base_SetConfig+0xc0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <TIM_Base_SetConfig+0xb8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800

080058d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 030a 	bic.w	r3, r3, #10
 8005914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
 800591c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800595e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	031b      	lsls	r3, r3, #12
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005970:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	621a      	str	r2, [r3, #32]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005992:	b480      	push	{r7}
 8005994:	b085      	sub	sp, #20
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f043 0307 	orr.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b087      	sub	sp, #28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	021a      	lsls	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	609a      	str	r2, [r3, #8]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e046      	b.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d009      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a10      	ldr	r2, [pc, #64]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10c      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800

08005ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e042      	b.n	8005b7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc fce6 	bl	80024dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f82b 	bl	8005b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bbe:	f023 030c 	bic.w	r3, r3, #12
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <UART_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7ff f994 	bl	8004f18 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7ff f97c 	bl	8004ef0 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <UART_SetConfig+0x118>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	0119      	lsls	r1, r3, #4
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009a      	lsls	r2, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <UART_SetConfig+0x118>)
 8005c32:	fba3 0302 	umull	r0, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2064      	movs	r0, #100	; 0x64
 8005c3a:	fb00 f303 	mul.w	r3, r0, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	; 0x32
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <UART_SetConfig+0x118>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c50:	4419      	add	r1, r3
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009a      	lsls	r2, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <UART_SetConfig+0x118>)
 8005c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2064      	movs	r0, #100	; 0x64
 8005c72:	fb00 f303 	mul.w	r3, r0, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <UART_SetConfig+0x118>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <_vsiprintf_r>:
 8005ca0:	b500      	push	{lr}
 8005ca2:	b09b      	sub	sp, #108	; 0x6c
 8005ca4:	9100      	str	r1, [sp, #0]
 8005ca6:	9104      	str	r1, [sp, #16]
 8005ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cac:	9105      	str	r1, [sp, #20]
 8005cae:	9102      	str	r1, [sp, #8]
 8005cb0:	4905      	ldr	r1, [pc, #20]	; (8005cc8 <_vsiprintf_r+0x28>)
 8005cb2:	9103      	str	r1, [sp, #12]
 8005cb4:	4669      	mov	r1, sp
 8005cb6:	f000 f995 	bl	8005fe4 <_svfiprintf_r>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	b01b      	add	sp, #108	; 0x6c
 8005cc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cc6:	bf00      	nop
 8005cc8:	ffff0208 	.word	0xffff0208

08005ccc <vsiprintf>:
 8005ccc:	4613      	mov	r3, r2
 8005cce:	460a      	mov	r2, r1
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4802      	ldr	r0, [pc, #8]	; (8005cdc <vsiprintf+0x10>)
 8005cd4:	6800      	ldr	r0, [r0, #0]
 8005cd6:	f7ff bfe3 	b.w	8005ca0 <_vsiprintf_r>
 8005cda:	bf00      	nop
 8005cdc:	20000064 	.word	0x20000064

08005ce0 <memset>:
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	4402      	add	r2, r0
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d100      	bne.n	8005cea <memset+0xa>
 8005ce8:	4770      	bx	lr
 8005cea:	f803 1b01 	strb.w	r1, [r3], #1
 8005cee:	e7f9      	b.n	8005ce4 <memset+0x4>

08005cf0 <__errno>:
 8005cf0:	4b01      	ldr	r3, [pc, #4]	; (8005cf8 <__errno+0x8>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000064 	.word	0x20000064

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	2600      	movs	r6, #0
 8005d00:	4d0c      	ldr	r5, [pc, #48]	; (8005d34 <__libc_init_array+0x38>)
 8005d02:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	f000 fcc0 	bl	8006690 <_init>
 8005d10:	2600      	movs	r6, #0
 8005d12:	4d0a      	ldr	r5, [pc, #40]	; (8005d3c <__libc_init_array+0x40>)
 8005d14:	4c0a      	ldr	r4, [pc, #40]	; (8005d40 <__libc_init_array+0x44>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	4798      	blx	r3
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	4798      	blx	r3
 8005d30:	3601      	adds	r6, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	0800674c 	.word	0x0800674c
 8005d38:	0800674c 	.word	0x0800674c
 8005d3c:	0800674c 	.word	0x0800674c
 8005d40:	08006750 	.word	0x08006750

08005d44 <__retarget_lock_acquire_recursive>:
 8005d44:	4770      	bx	lr

08005d46 <__retarget_lock_release_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <_free_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d040      	beq.n	8005dd2 <_free_r+0x8a>
 8005d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d54:	1f0c      	subs	r4, r1, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfb8      	it	lt
 8005d5a:	18e4      	addlt	r4, r4, r3
 8005d5c:	f000 f8dc 	bl	8005f18 <__malloc_lock>
 8005d60:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <_free_r+0x8c>)
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	b933      	cbnz	r3, 8005d74 <_free_r+0x2c>
 8005d66:	6063      	str	r3, [r4, #4]
 8005d68:	6014      	str	r4, [r2, #0]
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d70:	f000 b8d8 	b.w	8005f24 <__malloc_unlock>
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	d908      	bls.n	8005d8a <_free_r+0x42>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	1821      	adds	r1, r4, r0
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	bf01      	itttt	eq
 8005d80:	6819      	ldreq	r1, [r3, #0]
 8005d82:	685b      	ldreq	r3, [r3, #4]
 8005d84:	1809      	addeq	r1, r1, r0
 8005d86:	6021      	streq	r1, [r4, #0]
 8005d88:	e7ed      	b.n	8005d66 <_free_r+0x1e>
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	b10b      	cbz	r3, 8005d94 <_free_r+0x4c>
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d9fa      	bls.n	8005d8a <_free_r+0x42>
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	1850      	adds	r0, r2, r1
 8005d98:	42a0      	cmp	r0, r4
 8005d9a:	d10b      	bne.n	8005db4 <_free_r+0x6c>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	4401      	add	r1, r0
 8005da0:	1850      	adds	r0, r2, r1
 8005da2:	4283      	cmp	r3, r0
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	d1e0      	bne.n	8005d6a <_free_r+0x22>
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4408      	add	r0, r1
 8005dae:	6010      	str	r0, [r2, #0]
 8005db0:	6053      	str	r3, [r2, #4]
 8005db2:	e7da      	b.n	8005d6a <_free_r+0x22>
 8005db4:	d902      	bls.n	8005dbc <_free_r+0x74>
 8005db6:	230c      	movs	r3, #12
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	e7d6      	b.n	8005d6a <_free_r+0x22>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	1821      	adds	r1, r4, r0
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	bf01      	itttt	eq
 8005dc4:	6819      	ldreq	r1, [r3, #0]
 8005dc6:	685b      	ldreq	r3, [r3, #4]
 8005dc8:	1809      	addeq	r1, r1, r0
 8005dca:	6021      	streq	r1, [r4, #0]
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	6054      	str	r4, [r2, #4]
 8005dd0:	e7cb      	b.n	8005d6a <_free_r+0x22>
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200014c4 	.word	0x200014c4

08005dd8 <sbrk_aligned>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4e0e      	ldr	r6, [pc, #56]	; (8005e14 <sbrk_aligned+0x3c>)
 8005ddc:	460c      	mov	r4, r1
 8005dde:	6831      	ldr	r1, [r6, #0]
 8005de0:	4605      	mov	r5, r0
 8005de2:	b911      	cbnz	r1, 8005dea <sbrk_aligned+0x12>
 8005de4:	f000 fbaa 	bl	800653c <_sbrk_r>
 8005de8:	6030      	str	r0, [r6, #0]
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 fba5 	bl	800653c <_sbrk_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d00a      	beq.n	8005e0c <sbrk_aligned+0x34>
 8005df6:	1cc4      	adds	r4, r0, #3
 8005df8:	f024 0403 	bic.w	r4, r4, #3
 8005dfc:	42a0      	cmp	r0, r4
 8005dfe:	d007      	beq.n	8005e10 <sbrk_aligned+0x38>
 8005e00:	1a21      	subs	r1, r4, r0
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 fb9a 	bl	800653c <_sbrk_r>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d101      	bne.n	8005e10 <sbrk_aligned+0x38>
 8005e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e10:	4620      	mov	r0, r4
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	200014c8 	.word	0x200014c8

08005e18 <_malloc_r>:
 8005e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	1ccd      	adds	r5, r1, #3
 8005e1e:	f025 0503 	bic.w	r5, r5, #3
 8005e22:	3508      	adds	r5, #8
 8005e24:	2d0c      	cmp	r5, #12
 8005e26:	bf38      	it	cc
 8005e28:	250c      	movcc	r5, #12
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	db01      	blt.n	8005e34 <_malloc_r+0x1c>
 8005e30:	42a9      	cmp	r1, r5
 8005e32:	d905      	bls.n	8005e40 <_malloc_r+0x28>
 8005e34:	230c      	movs	r3, #12
 8005e36:	2600      	movs	r6, #0
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f14 <_malloc_r+0xfc>
 8005e44:	f000 f868 	bl	8005f18 <__malloc_lock>
 8005e48:	f8d8 3000 	ldr.w	r3, [r8]
 8005e4c:	461c      	mov	r4, r3
 8005e4e:	bb5c      	cbnz	r4, 8005ea8 <_malloc_r+0x90>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4638      	mov	r0, r7
 8005e54:	f7ff ffc0 	bl	8005dd8 <sbrk_aligned>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	d155      	bne.n	8005f0a <_malloc_r+0xf2>
 8005e5e:	f8d8 4000 	ldr.w	r4, [r8]
 8005e62:	4626      	mov	r6, r4
 8005e64:	2e00      	cmp	r6, #0
 8005e66:	d145      	bne.n	8005ef4 <_malloc_r+0xdc>
 8005e68:	2c00      	cmp	r4, #0
 8005e6a:	d048      	beq.n	8005efe <_malloc_r+0xe6>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4638      	mov	r0, r7
 8005e72:	eb04 0903 	add.w	r9, r4, r3
 8005e76:	f000 fb61 	bl	800653c <_sbrk_r>
 8005e7a:	4581      	cmp	r9, r0
 8005e7c:	d13f      	bne.n	8005efe <_malloc_r+0xe6>
 8005e7e:	6821      	ldr	r1, [r4, #0]
 8005e80:	4638      	mov	r0, r7
 8005e82:	1a6d      	subs	r5, r5, r1
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7ff ffa7 	bl	8005dd8 <sbrk_aligned>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d037      	beq.n	8005efe <_malloc_r+0xe6>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	442b      	add	r3, r5
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	f8d8 3000 	ldr.w	r3, [r8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d038      	beq.n	8005f0e <_malloc_r+0xf6>
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	42a2      	cmp	r2, r4
 8005ea0:	d12b      	bne.n	8005efa <_malloc_r+0xe2>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	e00f      	b.n	8005ec8 <_malloc_r+0xb0>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	1b52      	subs	r2, r2, r5
 8005eac:	d41f      	bmi.n	8005eee <_malloc_r+0xd6>
 8005eae:	2a0b      	cmp	r2, #11
 8005eb0:	d917      	bls.n	8005ee2 <_malloc_r+0xca>
 8005eb2:	1961      	adds	r1, r4, r5
 8005eb4:	42a3      	cmp	r3, r4
 8005eb6:	6025      	str	r5, [r4, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	6059      	strne	r1, [r3, #4]
 8005ebc:	6863      	ldr	r3, [r4, #4]
 8005ebe:	bf08      	it	eq
 8005ec0:	f8c8 1000 	streq.w	r1, [r8]
 8005ec4:	5162      	str	r2, [r4, r5]
 8005ec6:	604b      	str	r3, [r1, #4]
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f104 060b 	add.w	r6, r4, #11
 8005ece:	f000 f829 	bl	8005f24 <__malloc_unlock>
 8005ed2:	f026 0607 	bic.w	r6, r6, #7
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	1af2      	subs	r2, r6, r3
 8005eda:	d0ae      	beq.n	8005e3a <_malloc_r+0x22>
 8005edc:	1b9b      	subs	r3, r3, r6
 8005ede:	50a3      	str	r3, [r4, r2]
 8005ee0:	e7ab      	b.n	8005e3a <_malloc_r+0x22>
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	6862      	ldr	r2, [r4, #4]
 8005ee6:	d1dd      	bne.n	8005ea4 <_malloc_r+0x8c>
 8005ee8:	f8c8 2000 	str.w	r2, [r8]
 8005eec:	e7ec      	b.n	8005ec8 <_malloc_r+0xb0>
 8005eee:	4623      	mov	r3, r4
 8005ef0:	6864      	ldr	r4, [r4, #4]
 8005ef2:	e7ac      	b.n	8005e4e <_malloc_r+0x36>
 8005ef4:	4634      	mov	r4, r6
 8005ef6:	6876      	ldr	r6, [r6, #4]
 8005ef8:	e7b4      	b.n	8005e64 <_malloc_r+0x4c>
 8005efa:	4613      	mov	r3, r2
 8005efc:	e7cc      	b.n	8005e98 <_malloc_r+0x80>
 8005efe:	230c      	movs	r3, #12
 8005f00:	4638      	mov	r0, r7
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	f000 f80e 	bl	8005f24 <__malloc_unlock>
 8005f08:	e797      	b.n	8005e3a <_malloc_r+0x22>
 8005f0a:	6025      	str	r5, [r4, #0]
 8005f0c:	e7dc      	b.n	8005ec8 <_malloc_r+0xb0>
 8005f0e:	605b      	str	r3, [r3, #4]
 8005f10:	deff      	udf	#255	; 0xff
 8005f12:	bf00      	nop
 8005f14:	200014c4 	.word	0x200014c4

08005f18 <__malloc_lock>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__malloc_lock+0x8>)
 8005f1a:	f7ff bf13 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 8005f1e:	bf00      	nop
 8005f20:	200014c0 	.word	0x200014c0

08005f24 <__malloc_unlock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__malloc_unlock+0x8>)
 8005f26:	f7ff bf0e 	b.w	8005d46 <__retarget_lock_release_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	200014c0 	.word	0x200014c0

08005f30 <__ssputs_r>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	461f      	mov	r7, r3
 8005f36:	688e      	ldr	r6, [r1, #8]
 8005f38:	4682      	mov	sl, r0
 8005f3a:	42be      	cmp	r6, r7
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	4690      	mov	r8, r2
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	d82c      	bhi.n	8005f9e <__ssputs_r+0x6e>
 8005f44:	898a      	ldrh	r2, [r1, #12]
 8005f46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f4a:	d026      	beq.n	8005f9a <__ssputs_r+0x6a>
 8005f4c:	6965      	ldr	r5, [r4, #20]
 8005f4e:	6909      	ldr	r1, [r1, #16]
 8005f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f54:	eba3 0901 	sub.w	r9, r3, r1
 8005f58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f5c:	1c7b      	adds	r3, r7, #1
 8005f5e:	444b      	add	r3, r9
 8005f60:	106d      	asrs	r5, r5, #1
 8005f62:	429d      	cmp	r5, r3
 8005f64:	bf38      	it	cc
 8005f66:	461d      	movcc	r5, r3
 8005f68:	0553      	lsls	r3, r2, #21
 8005f6a:	d527      	bpl.n	8005fbc <__ssputs_r+0x8c>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7ff ff53 	bl	8005e18 <_malloc_r>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b360      	cbz	r0, 8005fd0 <__ssputs_r+0xa0>
 8005f76:	464a      	mov	r2, r9
 8005f78:	6921      	ldr	r1, [r4, #16]
 8005f7a:	f000 fafd 	bl	8006578 <memcpy>
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	81a3      	strh	r3, [r4, #12]
 8005f8a:	6126      	str	r6, [r4, #16]
 8005f8c:	444e      	add	r6, r9
 8005f8e:	6026      	str	r6, [r4, #0]
 8005f90:	463e      	mov	r6, r7
 8005f92:	6165      	str	r5, [r4, #20]
 8005f94:	eba5 0509 	sub.w	r5, r5, r9
 8005f98:	60a5      	str	r5, [r4, #8]
 8005f9a:	42be      	cmp	r6, r7
 8005f9c:	d900      	bls.n	8005fa0 <__ssputs_r+0x70>
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	4632      	mov	r2, r6
 8005fa2:	4641      	mov	r1, r8
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	f000 faaf 	bl	8006508 <memmove>
 8005faa:	2000      	movs	r0, #0
 8005fac:	68a3      	ldr	r3, [r4, #8]
 8005fae:	1b9b      	subs	r3, r3, r6
 8005fb0:	60a3      	str	r3, [r4, #8]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	4433      	add	r3, r6
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	462a      	mov	r2, r5
 8005fbe:	f000 fae9 	bl	8006594 <_realloc_r>
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d1e0      	bne.n	8005f8a <__ssputs_r+0x5a>
 8005fc8:	4650      	mov	r0, sl
 8005fca:	6921      	ldr	r1, [r4, #16]
 8005fcc:	f7ff febc 	bl	8005d48 <_free_r>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	f8ca 3000 	str.w	r3, [sl]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	e7e9      	b.n	8005fb8 <__ssputs_r+0x88>

08005fe4 <_svfiprintf_r>:
 8005fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	4698      	mov	r8, r3
 8005fea:	898b      	ldrh	r3, [r1, #12]
 8005fec:	4607      	mov	r7, r0
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	4614      	mov	r4, r2
 8005ff4:	b09d      	sub	sp, #116	; 0x74
 8005ff6:	d50e      	bpl.n	8006016 <_svfiprintf_r+0x32>
 8005ff8:	690b      	ldr	r3, [r1, #16]
 8005ffa:	b963      	cbnz	r3, 8006016 <_svfiprintf_r+0x32>
 8005ffc:	2140      	movs	r1, #64	; 0x40
 8005ffe:	f7ff ff0b 	bl	8005e18 <_malloc_r>
 8006002:	6028      	str	r0, [r5, #0]
 8006004:	6128      	str	r0, [r5, #16]
 8006006:	b920      	cbnz	r0, 8006012 <_svfiprintf_r+0x2e>
 8006008:	230c      	movs	r3, #12
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	e0d0      	b.n	80061b4 <_svfiprintf_r+0x1d0>
 8006012:	2340      	movs	r3, #64	; 0x40
 8006014:	616b      	str	r3, [r5, #20]
 8006016:	2300      	movs	r3, #0
 8006018:	9309      	str	r3, [sp, #36]	; 0x24
 800601a:	2320      	movs	r3, #32
 800601c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006020:	2330      	movs	r3, #48	; 0x30
 8006022:	f04f 0901 	mov.w	r9, #1
 8006026:	f8cd 800c 	str.w	r8, [sp, #12]
 800602a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80061cc <_svfiprintf_r+0x1e8>
 800602e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006032:	4623      	mov	r3, r4
 8006034:	469a      	mov	sl, r3
 8006036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800603a:	b10a      	cbz	r2, 8006040 <_svfiprintf_r+0x5c>
 800603c:	2a25      	cmp	r2, #37	; 0x25
 800603e:	d1f9      	bne.n	8006034 <_svfiprintf_r+0x50>
 8006040:	ebba 0b04 	subs.w	fp, sl, r4
 8006044:	d00b      	beq.n	800605e <_svfiprintf_r+0x7a>
 8006046:	465b      	mov	r3, fp
 8006048:	4622      	mov	r2, r4
 800604a:	4629      	mov	r1, r5
 800604c:	4638      	mov	r0, r7
 800604e:	f7ff ff6f 	bl	8005f30 <__ssputs_r>
 8006052:	3001      	adds	r0, #1
 8006054:	f000 80a9 	beq.w	80061aa <_svfiprintf_r+0x1c6>
 8006058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605a:	445a      	add	r2, fp
 800605c:	9209      	str	r2, [sp, #36]	; 0x24
 800605e:	f89a 3000 	ldrb.w	r3, [sl]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80a1 	beq.w	80061aa <_svfiprintf_r+0x1c6>
 8006068:	2300      	movs	r3, #0
 800606a:	f04f 32ff 	mov.w	r2, #4294967295
 800606e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006072:	f10a 0a01 	add.w	sl, sl, #1
 8006076:	9304      	str	r3, [sp, #16]
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800607e:	931a      	str	r3, [sp, #104]	; 0x68
 8006080:	4654      	mov	r4, sl
 8006082:	2205      	movs	r2, #5
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	4850      	ldr	r0, [pc, #320]	; (80061cc <_svfiprintf_r+0x1e8>)
 800608a:	f000 fa67 	bl	800655c <memchr>
 800608e:	9a04      	ldr	r2, [sp, #16]
 8006090:	b9d8      	cbnz	r0, 80060ca <_svfiprintf_r+0xe6>
 8006092:	06d0      	lsls	r0, r2, #27
 8006094:	bf44      	itt	mi
 8006096:	2320      	movmi	r3, #32
 8006098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609c:	0711      	lsls	r1, r2, #28
 800609e:	bf44      	itt	mi
 80060a0:	232b      	movmi	r3, #43	; 0x2b
 80060a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060a6:	f89a 3000 	ldrb.w	r3, [sl]
 80060aa:	2b2a      	cmp	r3, #42	; 0x2a
 80060ac:	d015      	beq.n	80060da <_svfiprintf_r+0xf6>
 80060ae:	4654      	mov	r4, sl
 80060b0:	2000      	movs	r0, #0
 80060b2:	f04f 0c0a 	mov.w	ip, #10
 80060b6:	9a07      	ldr	r2, [sp, #28]
 80060b8:	4621      	mov	r1, r4
 80060ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060be:	3b30      	subs	r3, #48	; 0x30
 80060c0:	2b09      	cmp	r3, #9
 80060c2:	d94d      	bls.n	8006160 <_svfiprintf_r+0x17c>
 80060c4:	b1b0      	cbz	r0, 80060f4 <_svfiprintf_r+0x110>
 80060c6:	9207      	str	r2, [sp, #28]
 80060c8:	e014      	b.n	80060f4 <_svfiprintf_r+0x110>
 80060ca:	eba0 0308 	sub.w	r3, r0, r8
 80060ce:	fa09 f303 	lsl.w	r3, r9, r3
 80060d2:	4313      	orrs	r3, r2
 80060d4:	46a2      	mov	sl, r4
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	e7d2      	b.n	8006080 <_svfiprintf_r+0x9c>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	9103      	str	r1, [sp, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfbb      	ittet	lt
 80060e6:	425b      	neglt	r3, r3
 80060e8:	f042 0202 	orrlt.w	r2, r2, #2
 80060ec:	9307      	strge	r3, [sp, #28]
 80060ee:	9307      	strlt	r3, [sp, #28]
 80060f0:	bfb8      	it	lt
 80060f2:	9204      	strlt	r2, [sp, #16]
 80060f4:	7823      	ldrb	r3, [r4, #0]
 80060f6:	2b2e      	cmp	r3, #46	; 0x2e
 80060f8:	d10c      	bne.n	8006114 <_svfiprintf_r+0x130>
 80060fa:	7863      	ldrb	r3, [r4, #1]
 80060fc:	2b2a      	cmp	r3, #42	; 0x2a
 80060fe:	d134      	bne.n	800616a <_svfiprintf_r+0x186>
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	3402      	adds	r4, #2
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	9203      	str	r2, [sp, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	bfb8      	it	lt
 800610e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006112:	9305      	str	r3, [sp, #20]
 8006114:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80061d0 <_svfiprintf_r+0x1ec>
 8006118:	2203      	movs	r2, #3
 800611a:	4650      	mov	r0, sl
 800611c:	7821      	ldrb	r1, [r4, #0]
 800611e:	f000 fa1d 	bl	800655c <memchr>
 8006122:	b138      	cbz	r0, 8006134 <_svfiprintf_r+0x150>
 8006124:	2240      	movs	r2, #64	; 0x40
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	eba0 000a 	sub.w	r0, r0, sl
 800612c:	4082      	lsls	r2, r0
 800612e:	4313      	orrs	r3, r2
 8006130:	3401      	adds	r4, #1
 8006132:	9304      	str	r3, [sp, #16]
 8006134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006138:	2206      	movs	r2, #6
 800613a:	4826      	ldr	r0, [pc, #152]	; (80061d4 <_svfiprintf_r+0x1f0>)
 800613c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006140:	f000 fa0c 	bl	800655c <memchr>
 8006144:	2800      	cmp	r0, #0
 8006146:	d038      	beq.n	80061ba <_svfiprintf_r+0x1d6>
 8006148:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <_svfiprintf_r+0x1f4>)
 800614a:	bb1b      	cbnz	r3, 8006194 <_svfiprintf_r+0x1b0>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	3307      	adds	r3, #7
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	3308      	adds	r3, #8
 8006156:	9303      	str	r3, [sp, #12]
 8006158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615a:	4433      	add	r3, r6
 800615c:	9309      	str	r3, [sp, #36]	; 0x24
 800615e:	e768      	b.n	8006032 <_svfiprintf_r+0x4e>
 8006160:	460c      	mov	r4, r1
 8006162:	2001      	movs	r0, #1
 8006164:	fb0c 3202 	mla	r2, ip, r2, r3
 8006168:	e7a6      	b.n	80060b8 <_svfiprintf_r+0xd4>
 800616a:	2300      	movs	r3, #0
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4619      	mov	r1, r3
 8006172:	3401      	adds	r4, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	4620      	mov	r0, r4
 8006178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800617c:	3a30      	subs	r2, #48	; 0x30
 800617e:	2a09      	cmp	r2, #9
 8006180:	d903      	bls.n	800618a <_svfiprintf_r+0x1a6>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0c6      	beq.n	8006114 <_svfiprintf_r+0x130>
 8006186:	9105      	str	r1, [sp, #20]
 8006188:	e7c4      	b.n	8006114 <_svfiprintf_r+0x130>
 800618a:	4604      	mov	r4, r0
 800618c:	2301      	movs	r3, #1
 800618e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006192:	e7f0      	b.n	8006176 <_svfiprintf_r+0x192>
 8006194:	ab03      	add	r3, sp, #12
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	462a      	mov	r2, r5
 800619a:	4638      	mov	r0, r7
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <_svfiprintf_r+0x1f8>)
 800619e:	a904      	add	r1, sp, #16
 80061a0:	f3af 8000 	nop.w
 80061a4:	1c42      	adds	r2, r0, #1
 80061a6:	4606      	mov	r6, r0
 80061a8:	d1d6      	bne.n	8006158 <_svfiprintf_r+0x174>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	065b      	lsls	r3, r3, #25
 80061ae:	f53f af2d 	bmi.w	800600c <_svfiprintf_r+0x28>
 80061b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b4:	b01d      	add	sp, #116	; 0x74
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ba:	ab03      	add	r3, sp, #12
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	462a      	mov	r2, r5
 80061c0:	4638      	mov	r0, r7
 80061c2:	4b06      	ldr	r3, [pc, #24]	; (80061dc <_svfiprintf_r+0x1f8>)
 80061c4:	a904      	add	r1, sp, #16
 80061c6:	f000 f87d 	bl	80062c4 <_printf_i>
 80061ca:	e7eb      	b.n	80061a4 <_svfiprintf_r+0x1c0>
 80061cc:	08006716 	.word	0x08006716
 80061d0:	0800671c 	.word	0x0800671c
 80061d4:	08006720 	.word	0x08006720
 80061d8:	00000000 	.word	0x00000000
 80061dc:	08005f31 	.word	0x08005f31

080061e0 <_printf_common>:
 80061e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	4616      	mov	r6, r2
 80061e6:	4699      	mov	r9, r3
 80061e8:	688a      	ldr	r2, [r1, #8]
 80061ea:	690b      	ldr	r3, [r1, #16]
 80061ec:	4607      	mov	r7, r0
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bfb8      	it	lt
 80061f2:	4613      	movlt	r3, r2
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061fa:	460c      	mov	r4, r1
 80061fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006200:	b10a      	cbz	r2, 8006206 <_printf_common+0x26>
 8006202:	3301      	adds	r3, #1
 8006204:	6033      	str	r3, [r6, #0]
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	0699      	lsls	r1, r3, #26
 800620a:	bf42      	ittt	mi
 800620c:	6833      	ldrmi	r3, [r6, #0]
 800620e:	3302      	addmi	r3, #2
 8006210:	6033      	strmi	r3, [r6, #0]
 8006212:	6825      	ldr	r5, [r4, #0]
 8006214:	f015 0506 	ands.w	r5, r5, #6
 8006218:	d106      	bne.n	8006228 <_printf_common+0x48>
 800621a:	f104 0a19 	add.w	sl, r4, #25
 800621e:	68e3      	ldr	r3, [r4, #12]
 8006220:	6832      	ldr	r2, [r6, #0]
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	42ab      	cmp	r3, r5
 8006226:	dc2b      	bgt.n	8006280 <_printf_common+0xa0>
 8006228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800622c:	1e13      	subs	r3, r2, #0
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	bf18      	it	ne
 8006232:	2301      	movne	r3, #1
 8006234:	0692      	lsls	r2, r2, #26
 8006236:	d430      	bmi.n	800629a <_printf_common+0xba>
 8006238:	4649      	mov	r1, r9
 800623a:	4638      	mov	r0, r7
 800623c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006240:	47c0      	blx	r8
 8006242:	3001      	adds	r0, #1
 8006244:	d023      	beq.n	800628e <_printf_common+0xae>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	6922      	ldr	r2, [r4, #16]
 800624a:	f003 0306 	and.w	r3, r3, #6
 800624e:	2b04      	cmp	r3, #4
 8006250:	bf14      	ite	ne
 8006252:	2500      	movne	r5, #0
 8006254:	6833      	ldreq	r3, [r6, #0]
 8006256:	f04f 0600 	mov.w	r6, #0
 800625a:	bf08      	it	eq
 800625c:	68e5      	ldreq	r5, [r4, #12]
 800625e:	f104 041a 	add.w	r4, r4, #26
 8006262:	bf08      	it	eq
 8006264:	1aed      	subeq	r5, r5, r3
 8006266:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800626a:	bf08      	it	eq
 800626c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006270:	4293      	cmp	r3, r2
 8006272:	bfc4      	itt	gt
 8006274:	1a9b      	subgt	r3, r3, r2
 8006276:	18ed      	addgt	r5, r5, r3
 8006278:	42b5      	cmp	r5, r6
 800627a:	d11a      	bne.n	80062b2 <_printf_common+0xd2>
 800627c:	2000      	movs	r0, #0
 800627e:	e008      	b.n	8006292 <_printf_common+0xb2>
 8006280:	2301      	movs	r3, #1
 8006282:	4652      	mov	r2, sl
 8006284:	4649      	mov	r1, r9
 8006286:	4638      	mov	r0, r7
 8006288:	47c0      	blx	r8
 800628a:	3001      	adds	r0, #1
 800628c:	d103      	bne.n	8006296 <_printf_common+0xb6>
 800628e:	f04f 30ff 	mov.w	r0, #4294967295
 8006292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006296:	3501      	adds	r5, #1
 8006298:	e7c1      	b.n	800621e <_printf_common+0x3e>
 800629a:	2030      	movs	r0, #48	; 0x30
 800629c:	18e1      	adds	r1, r4, r3
 800629e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a8:	4422      	add	r2, r4
 80062aa:	3302      	adds	r3, #2
 80062ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b0:	e7c2      	b.n	8006238 <_printf_common+0x58>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4622      	mov	r2, r4
 80062b6:	4649      	mov	r1, r9
 80062b8:	4638      	mov	r0, r7
 80062ba:	47c0      	blx	r8
 80062bc:	3001      	adds	r0, #1
 80062be:	d0e6      	beq.n	800628e <_printf_common+0xae>
 80062c0:	3601      	adds	r6, #1
 80062c2:	e7d9      	b.n	8006278 <_printf_common+0x98>

080062c4 <_printf_i>:
 80062c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	7e0f      	ldrb	r7, [r1, #24]
 80062ca:	4691      	mov	r9, r2
 80062cc:	2f78      	cmp	r7, #120	; 0x78
 80062ce:	4680      	mov	r8, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	469a      	mov	sl, r3
 80062d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062da:	d807      	bhi.n	80062ec <_printf_i+0x28>
 80062dc:	2f62      	cmp	r7, #98	; 0x62
 80062de:	d80a      	bhi.n	80062f6 <_printf_i+0x32>
 80062e0:	2f00      	cmp	r7, #0
 80062e2:	f000 80d5 	beq.w	8006490 <_printf_i+0x1cc>
 80062e6:	2f58      	cmp	r7, #88	; 0x58
 80062e8:	f000 80c1 	beq.w	800646e <_printf_i+0x1aa>
 80062ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f4:	e03a      	b.n	800636c <_printf_i+0xa8>
 80062f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062fa:	2b15      	cmp	r3, #21
 80062fc:	d8f6      	bhi.n	80062ec <_printf_i+0x28>
 80062fe:	a101      	add	r1, pc, #4	; (adr r1, 8006304 <_printf_i+0x40>)
 8006300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006304:	0800635d 	.word	0x0800635d
 8006308:	08006371 	.word	0x08006371
 800630c:	080062ed 	.word	0x080062ed
 8006310:	080062ed 	.word	0x080062ed
 8006314:	080062ed 	.word	0x080062ed
 8006318:	080062ed 	.word	0x080062ed
 800631c:	08006371 	.word	0x08006371
 8006320:	080062ed 	.word	0x080062ed
 8006324:	080062ed 	.word	0x080062ed
 8006328:	080062ed 	.word	0x080062ed
 800632c:	080062ed 	.word	0x080062ed
 8006330:	08006477 	.word	0x08006477
 8006334:	0800639d 	.word	0x0800639d
 8006338:	08006431 	.word	0x08006431
 800633c:	080062ed 	.word	0x080062ed
 8006340:	080062ed 	.word	0x080062ed
 8006344:	08006499 	.word	0x08006499
 8006348:	080062ed 	.word	0x080062ed
 800634c:	0800639d 	.word	0x0800639d
 8006350:	080062ed 	.word	0x080062ed
 8006354:	080062ed 	.word	0x080062ed
 8006358:	08006439 	.word	0x08006439
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636c:	2301      	movs	r3, #1
 800636e:	e0a0      	b.n	80064b2 <_printf_i+0x1ee>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	682b      	ldr	r3, [r5, #0]
 8006374:	0607      	lsls	r7, r0, #24
 8006376:	f103 0104 	add.w	r1, r3, #4
 800637a:	6029      	str	r1, [r5, #0]
 800637c:	d501      	bpl.n	8006382 <_printf_i+0xbe>
 800637e:	681e      	ldr	r6, [r3, #0]
 8006380:	e003      	b.n	800638a <_printf_i+0xc6>
 8006382:	0646      	lsls	r6, r0, #25
 8006384:	d5fb      	bpl.n	800637e <_printf_i+0xba>
 8006386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800638a:	2e00      	cmp	r6, #0
 800638c:	da03      	bge.n	8006396 <_printf_i+0xd2>
 800638e:	232d      	movs	r3, #45	; 0x2d
 8006390:	4276      	negs	r6, r6
 8006392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006396:	230a      	movs	r3, #10
 8006398:	4859      	ldr	r0, [pc, #356]	; (8006500 <_printf_i+0x23c>)
 800639a:	e012      	b.n	80063c2 <_printf_i+0xfe>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	1d19      	adds	r1, r3, #4
 80063a2:	6029      	str	r1, [r5, #0]
 80063a4:	0605      	lsls	r5, r0, #24
 80063a6:	d501      	bpl.n	80063ac <_printf_i+0xe8>
 80063a8:	681e      	ldr	r6, [r3, #0]
 80063aa:	e002      	b.n	80063b2 <_printf_i+0xee>
 80063ac:	0641      	lsls	r1, r0, #25
 80063ae:	d5fb      	bpl.n	80063a8 <_printf_i+0xe4>
 80063b0:	881e      	ldrh	r6, [r3, #0]
 80063b2:	2f6f      	cmp	r7, #111	; 0x6f
 80063b4:	bf0c      	ite	eq
 80063b6:	2308      	moveq	r3, #8
 80063b8:	230a      	movne	r3, #10
 80063ba:	4851      	ldr	r0, [pc, #324]	; (8006500 <_printf_i+0x23c>)
 80063bc:	2100      	movs	r1, #0
 80063be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063c2:	6865      	ldr	r5, [r4, #4]
 80063c4:	2d00      	cmp	r5, #0
 80063c6:	bfa8      	it	ge
 80063c8:	6821      	ldrge	r1, [r4, #0]
 80063ca:	60a5      	str	r5, [r4, #8]
 80063cc:	bfa4      	itt	ge
 80063ce:	f021 0104 	bicge.w	r1, r1, #4
 80063d2:	6021      	strge	r1, [r4, #0]
 80063d4:	b90e      	cbnz	r6, 80063da <_printf_i+0x116>
 80063d6:	2d00      	cmp	r5, #0
 80063d8:	d04b      	beq.n	8006472 <_printf_i+0x1ae>
 80063da:	4615      	mov	r5, r2
 80063dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80063e0:	fb03 6711 	mls	r7, r3, r1, r6
 80063e4:	5dc7      	ldrb	r7, [r0, r7]
 80063e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063ea:	4637      	mov	r7, r6
 80063ec:	42bb      	cmp	r3, r7
 80063ee:	460e      	mov	r6, r1
 80063f0:	d9f4      	bls.n	80063dc <_printf_i+0x118>
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d10b      	bne.n	800640e <_printf_i+0x14a>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	07de      	lsls	r6, r3, #31
 80063fa:	d508      	bpl.n	800640e <_printf_i+0x14a>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	6861      	ldr	r1, [r4, #4]
 8006400:	4299      	cmp	r1, r3
 8006402:	bfde      	ittt	le
 8006404:	2330      	movle	r3, #48	; 0x30
 8006406:	f805 3c01 	strble.w	r3, [r5, #-1]
 800640a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800640e:	1b52      	subs	r2, r2, r5
 8006410:	6122      	str	r2, [r4, #16]
 8006412:	464b      	mov	r3, r9
 8006414:	4621      	mov	r1, r4
 8006416:	4640      	mov	r0, r8
 8006418:	f8cd a000 	str.w	sl, [sp]
 800641c:	aa03      	add	r2, sp, #12
 800641e:	f7ff fedf 	bl	80061e0 <_printf_common>
 8006422:	3001      	adds	r0, #1
 8006424:	d14a      	bne.n	80064bc <_printf_i+0x1f8>
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	b004      	add	sp, #16
 800642c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	f043 0320 	orr.w	r3, r3, #32
 8006436:	6023      	str	r3, [r4, #0]
 8006438:	2778      	movs	r7, #120	; 0x78
 800643a:	4832      	ldr	r0, [pc, #200]	; (8006504 <_printf_i+0x240>)
 800643c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	6829      	ldr	r1, [r5, #0]
 8006444:	061f      	lsls	r7, r3, #24
 8006446:	f851 6b04 	ldr.w	r6, [r1], #4
 800644a:	d402      	bmi.n	8006452 <_printf_i+0x18e>
 800644c:	065f      	lsls	r7, r3, #25
 800644e:	bf48      	it	mi
 8006450:	b2b6      	uxthmi	r6, r6
 8006452:	07df      	lsls	r7, r3, #31
 8006454:	bf48      	it	mi
 8006456:	f043 0320 	orrmi.w	r3, r3, #32
 800645a:	6029      	str	r1, [r5, #0]
 800645c:	bf48      	it	mi
 800645e:	6023      	strmi	r3, [r4, #0]
 8006460:	b91e      	cbnz	r6, 800646a <_printf_i+0x1a6>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	f023 0320 	bic.w	r3, r3, #32
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	2310      	movs	r3, #16
 800646c:	e7a6      	b.n	80063bc <_printf_i+0xf8>
 800646e:	4824      	ldr	r0, [pc, #144]	; (8006500 <_printf_i+0x23c>)
 8006470:	e7e4      	b.n	800643c <_printf_i+0x178>
 8006472:	4615      	mov	r5, r2
 8006474:	e7bd      	b.n	80063f2 <_printf_i+0x12e>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	6826      	ldr	r6, [r4, #0]
 800647a:	1d18      	adds	r0, r3, #4
 800647c:	6961      	ldr	r1, [r4, #20]
 800647e:	6028      	str	r0, [r5, #0]
 8006480:	0635      	lsls	r5, r6, #24
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	d501      	bpl.n	800648a <_printf_i+0x1c6>
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	e002      	b.n	8006490 <_printf_i+0x1cc>
 800648a:	0670      	lsls	r0, r6, #25
 800648c:	d5fb      	bpl.n	8006486 <_printf_i+0x1c2>
 800648e:	8019      	strh	r1, [r3, #0]
 8006490:	2300      	movs	r3, #0
 8006492:	4615      	mov	r5, r2
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	e7bc      	b.n	8006412 <_printf_i+0x14e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	2100      	movs	r1, #0
 800649c:	1d1a      	adds	r2, r3, #4
 800649e:	602a      	str	r2, [r5, #0]
 80064a0:	681d      	ldr	r5, [r3, #0]
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f859 	bl	800655c <memchr>
 80064aa:	b108      	cbz	r0, 80064b0 <_printf_i+0x1ec>
 80064ac:	1b40      	subs	r0, r0, r5
 80064ae:	6060      	str	r0, [r4, #4]
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	2300      	movs	r3, #0
 80064b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ba:	e7aa      	b.n	8006412 <_printf_i+0x14e>
 80064bc:	462a      	mov	r2, r5
 80064be:	4649      	mov	r1, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	47d0      	blx	sl
 80064c6:	3001      	adds	r0, #1
 80064c8:	d0ad      	beq.n	8006426 <_printf_i+0x162>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	079b      	lsls	r3, r3, #30
 80064ce:	d413      	bmi.n	80064f8 <_printf_i+0x234>
 80064d0:	68e0      	ldr	r0, [r4, #12]
 80064d2:	9b03      	ldr	r3, [sp, #12]
 80064d4:	4298      	cmp	r0, r3
 80064d6:	bfb8      	it	lt
 80064d8:	4618      	movlt	r0, r3
 80064da:	e7a6      	b.n	800642a <_printf_i+0x166>
 80064dc:	2301      	movs	r3, #1
 80064de:	4632      	mov	r2, r6
 80064e0:	4649      	mov	r1, r9
 80064e2:	4640      	mov	r0, r8
 80064e4:	47d0      	blx	sl
 80064e6:	3001      	adds	r0, #1
 80064e8:	d09d      	beq.n	8006426 <_printf_i+0x162>
 80064ea:	3501      	adds	r5, #1
 80064ec:	68e3      	ldr	r3, [r4, #12]
 80064ee:	9903      	ldr	r1, [sp, #12]
 80064f0:	1a5b      	subs	r3, r3, r1
 80064f2:	42ab      	cmp	r3, r5
 80064f4:	dcf2      	bgt.n	80064dc <_printf_i+0x218>
 80064f6:	e7eb      	b.n	80064d0 <_printf_i+0x20c>
 80064f8:	2500      	movs	r5, #0
 80064fa:	f104 0619 	add.w	r6, r4, #25
 80064fe:	e7f5      	b.n	80064ec <_printf_i+0x228>
 8006500:	08006727 	.word	0x08006727
 8006504:	08006738 	.word	0x08006738

08006508 <memmove>:
 8006508:	4288      	cmp	r0, r1
 800650a:	b510      	push	{r4, lr}
 800650c:	eb01 0402 	add.w	r4, r1, r2
 8006510:	d902      	bls.n	8006518 <memmove+0x10>
 8006512:	4284      	cmp	r4, r0
 8006514:	4623      	mov	r3, r4
 8006516:	d807      	bhi.n	8006528 <memmove+0x20>
 8006518:	1e43      	subs	r3, r0, #1
 800651a:	42a1      	cmp	r1, r4
 800651c:	d008      	beq.n	8006530 <memmove+0x28>
 800651e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006526:	e7f8      	b.n	800651a <memmove+0x12>
 8006528:	4601      	mov	r1, r0
 800652a:	4402      	add	r2, r0
 800652c:	428a      	cmp	r2, r1
 800652e:	d100      	bne.n	8006532 <memmove+0x2a>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800653a:	e7f7      	b.n	800652c <memmove+0x24>

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	2300      	movs	r3, #0
 8006540:	4d05      	ldr	r5, [pc, #20]	; (8006558 <_sbrk_r+0x1c>)
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7fc f85a 	bl	8002600 <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	200014bc 	.word	0x200014bc

0800655c <memchr>:
 800655c:	4603      	mov	r3, r0
 800655e:	b510      	push	{r4, lr}
 8006560:	b2c9      	uxtb	r1, r1
 8006562:	4402      	add	r2, r0
 8006564:	4293      	cmp	r3, r2
 8006566:	4618      	mov	r0, r3
 8006568:	d101      	bne.n	800656e <memchr+0x12>
 800656a:	2000      	movs	r0, #0
 800656c:	e003      	b.n	8006576 <memchr+0x1a>
 800656e:	7804      	ldrb	r4, [r0, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	428c      	cmp	r4, r1
 8006574:	d1f6      	bne.n	8006564 <memchr+0x8>
 8006576:	bd10      	pop	{r4, pc}

08006578 <memcpy>:
 8006578:	440a      	add	r2, r1
 800657a:	4291      	cmp	r1, r2
 800657c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006580:	d100      	bne.n	8006584 <memcpy+0xc>
 8006582:	4770      	bx	lr
 8006584:	b510      	push	{r4, lr}
 8006586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658a:	4291      	cmp	r1, r2
 800658c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006590:	d1f9      	bne.n	8006586 <memcpy+0xe>
 8006592:	bd10      	pop	{r4, pc}

08006594 <_realloc_r>:
 8006594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006598:	4680      	mov	r8, r0
 800659a:	4614      	mov	r4, r2
 800659c:	460e      	mov	r6, r1
 800659e:	b921      	cbnz	r1, 80065aa <_realloc_r+0x16>
 80065a0:	4611      	mov	r1, r2
 80065a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	f7ff bc37 	b.w	8005e18 <_malloc_r>
 80065aa:	b92a      	cbnz	r2, 80065b8 <_realloc_r+0x24>
 80065ac:	f7ff fbcc 	bl	8005d48 <_free_r>
 80065b0:	4625      	mov	r5, r4
 80065b2:	4628      	mov	r0, r5
 80065b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b8:	f000 f81b 	bl	80065f2 <_malloc_usable_size_r>
 80065bc:	4284      	cmp	r4, r0
 80065be:	4607      	mov	r7, r0
 80065c0:	d802      	bhi.n	80065c8 <_realloc_r+0x34>
 80065c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065c6:	d812      	bhi.n	80065ee <_realloc_r+0x5a>
 80065c8:	4621      	mov	r1, r4
 80065ca:	4640      	mov	r0, r8
 80065cc:	f7ff fc24 	bl	8005e18 <_malloc_r>
 80065d0:	4605      	mov	r5, r0
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d0ed      	beq.n	80065b2 <_realloc_r+0x1e>
 80065d6:	42bc      	cmp	r4, r7
 80065d8:	4622      	mov	r2, r4
 80065da:	4631      	mov	r1, r6
 80065dc:	bf28      	it	cs
 80065de:	463a      	movcs	r2, r7
 80065e0:	f7ff ffca 	bl	8006578 <memcpy>
 80065e4:	4631      	mov	r1, r6
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fbae 	bl	8005d48 <_free_r>
 80065ec:	e7e1      	b.n	80065b2 <_realloc_r+0x1e>
 80065ee:	4635      	mov	r5, r6
 80065f0:	e7df      	b.n	80065b2 <_realloc_r+0x1e>

080065f2 <_malloc_usable_size_r>:
 80065f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f6:	1f18      	subs	r0, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfbc      	itt	lt
 80065fc:	580b      	ldrlt	r3, [r1, r0]
 80065fe:	18c0      	addlt	r0, r0, r3
 8006600:	4770      	bx	lr
	...

08006604 <round>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800660a:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 800660e:	2a13      	cmp	r2, #19
 8006610:	460b      	mov	r3, r1
 8006612:	4605      	mov	r5, r0
 8006614:	460c      	mov	r4, r1
 8006616:	dc18      	bgt.n	800664a <round+0x46>
 8006618:	2a00      	cmp	r2, #0
 800661a:	da09      	bge.n	8006630 <round+0x2c>
 800661c:	3201      	adds	r2, #1
 800661e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006622:	d103      	bne.n	800662c <round+0x28>
 8006624:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006628:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800662c:	2200      	movs	r2, #0
 800662e:	e029      	b.n	8006684 <round+0x80>
 8006630:	4816      	ldr	r0, [pc, #88]	; (800668c <round+0x88>)
 8006632:	4110      	asrs	r0, r2
 8006634:	4001      	ands	r1, r0
 8006636:	4329      	orrs	r1, r5
 8006638:	d011      	beq.n	800665e <round+0x5a>
 800663a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800663e:	fa41 f202 	asr.w	r2, r1, r2
 8006642:	4413      	add	r3, r2
 8006644:	ea23 0300 	bic.w	r3, r3, r0
 8006648:	e7f0      	b.n	800662c <round+0x28>
 800664a:	2a33      	cmp	r2, #51	; 0x33
 800664c:	dd0a      	ble.n	8006664 <round+0x60>
 800664e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006652:	d104      	bne.n	800665e <round+0x5a>
 8006654:	4602      	mov	r2, r0
 8006656:	f7f9 fd81 	bl	800015c <__adddf3>
 800665a:	4605      	mov	r5, r0
 800665c:	460c      	mov	r4, r1
 800665e:	4628      	mov	r0, r5
 8006660:	4621      	mov	r1, r4
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800666c:	40f8      	lsrs	r0, r7
 800666e:	4228      	tst	r0, r5
 8006670:	d0f5      	beq.n	800665e <round+0x5a>
 8006672:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8006676:	2201      	movs	r2, #1
 8006678:	408a      	lsls	r2, r1
 800667a:	1952      	adds	r2, r2, r5
 800667c:	bf28      	it	cs
 800667e:	3301      	addcs	r3, #1
 8006680:	ea22 0200 	bic.w	r2, r2, r0
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	e7e7      	b.n	800665a <round+0x56>
 800668a:	bf00      	nop
 800668c:	000fffff 	.word	0x000fffff

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
