
P19-STEERING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006780  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006934  08006934  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006934  08006934  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006934  08006934  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000147c  20000068  080069a4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  080069a4  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fb4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bfe  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c56  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ecf  00000000  00000000  000368b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b3a  00000000  00000000  00050785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009361b  00000000  00000000  000642bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b8  00000000  00000000  000f78dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fc294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006878 	.word	0x08006878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006878 	.word	0x08006878

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <ReadInputs>:

//Private Functions Declaration
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);


void ReadInputs(InputStruct *inputs){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	6078      	str	r0, [r7, #4]

	tInputsTimer = HAL_GetTick();
 8000fd0:	f001 fcc4 	bl	800295c <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4ab4      	ldr	r2, [pc, #720]	; (80012a8 <ReadInputs+0x2e0>)
 8000fd8:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog & Digital Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);
 8000fda:	4bb4      	ldr	r3, [pc, #720]	; (80012ac <ReadInputs+0x2e4>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000fe6:	48b2      	ldr	r0, [pc, #712]	; (80012b0 <ReadInputs+0x2e8>)
 8000fe8:	f000 fbb2 	bl	8001750 <MyHalfBufferAverage>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	821a      	strh	r2, [r3, #16]
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);
 8000ff4:	4bad      	ldr	r3, [pc, #692]	; (80012ac <ReadInputs+0x2e4>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001000:	48ab      	ldr	r0, [pc, #684]	; (80012b0 <ReadInputs+0x2e8>)
 8001002:	f000 fba5 	bl	8001750 <MyHalfBufferAverage>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	825a      	strh	r2, [r3, #18]
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);
 800100e:	4ba7      	ldr	r3, [pc, #668]	; (80012ac <ReadInputs+0x2e4>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	2302      	movs	r3, #2
 8001016:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800101a:	48a5      	ldr	r0, [pc, #660]	; (80012b0 <ReadInputs+0x2e8>)
 800101c:	f000 fb98 	bl	8001750 <MyHalfBufferAverage>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	829a      	strh	r2, [r3, #20]
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <ReadInputs+0x2e4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	2303      	movs	r3, #3
 8001030:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001034:	489e      	ldr	r0, [pc, #632]	; (80012b0 <ReadInputs+0x2e8>)
 8001036:	f000 fb8b 	bl	8001750 <MyHalfBufferAverage>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	82da      	strh	r2, [r3, #22]

	//Voltage Conversion
	inputs->VSIUAnalog01 = (float)(inputs->NADCChannel01Raw * 3.3 / 4095.0);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8a1b      	ldrh	r3, [r3, #16]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f9d4 	bl	80003f4 <__aeabi_i2d>
 800104c:	a392      	add	r3, pc, #584	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fa39 	bl	80004c8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	a390      	add	r3, pc, #576	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fb5a 	bl	800071c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fc64 	bl	800093c <__aeabi_d2f>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
	inputs->VSIUAnalog02 = (float)(inputs->NADCChannel02Raw * 3.3 / 4095.0);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	8a5b      	ldrh	r3, [r3, #18]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9b8 	bl	80003f4 <__aeabi_i2d>
 8001084:	a384      	add	r3, pc, #528	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fa1d 	bl	80004c8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	a382      	add	r3, pc, #520	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fb3e 	bl	800071c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fc48 	bl	800093c <__aeabi_d2f>
 80010ac:	4602      	mov	r2, r0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	605a      	str	r2, [r3, #4]
	inputs->VSIUAnalog03 = (float)(inputs->NADCChannel03Raw * 3.3 / 4095.0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	8a9b      	ldrh	r3, [r3, #20]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f99c 	bl	80003f4 <__aeabi_i2d>
 80010bc:	a376      	add	r3, pc, #472	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa01 	bl	80004c8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	a374      	add	r3, pc, #464	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fb22 	bl	800071c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fc2c 	bl	800093c <__aeabi_d2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
	inputs->VSIUAnalog04 = (float)(inputs->NADCChannel04Raw * 3.3 / 4095.0);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	8adb      	ldrh	r3, [r3, #22]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f980 	bl	80003f4 <__aeabi_i2d>
 80010f4:	a368      	add	r3, pc, #416	; (adr r3, 8001298 <ReadInputs+0x2d0>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	a366      	add	r3, pc, #408	; (adr r3, 80012a0 <ReadInputs+0x2d8>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb06 	bl	800071c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fc10 	bl	800093c <__aeabi_d2f>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60da      	str	r2, [r3, #12]

	//Digital Read (we invert the logic to read 1 when it goes to GND, because of the pull ups)
	inputs->BSIUDIN01 = !HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001122:	2104      	movs	r1, #4
 8001124:	4863      	ldr	r0, [pc, #396]	; (80012b4 <ReadInputs+0x2ec>)
 8001126:	f003 fbdd 	bl	80048e4 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	761a      	strb	r2, [r3, #24]
	inputs->BSIUDIN02 = !HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800113c:	2102      	movs	r1, #2
 800113e:	485d      	ldr	r0, [pc, #372]	; (80012b4 <ReadInputs+0x2ec>)
 8001140:	f003 fbd0 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	765a      	strb	r2, [r3, #25]
	inputs->BSIUDIN03 = !HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 8001156:	2101      	movs	r1, #1
 8001158:	4856      	ldr	r0, [pc, #344]	; (80012b4 <ReadInputs+0x2ec>)
 800115a:	f003 fbc3 	bl	80048e4 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	769a      	strb	r2, [r3, #26]
	inputs->BSIUDIN04 = !HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 8001170:	2108      	movs	r1, #8
 8001172:	4850      	ldr	r0, [pc, #320]	; (80012b4 <ReadInputs+0x2ec>)
 8001174:	f003 fbb6 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	76da      	strb	r2, [r3, #27]
	inputs->BSIUDIN05 = !HAL_GPIO_ReadPin(DIN05_GPIO_Port, DIN05_Pin);
 800118a:	2110      	movs	r1, #16
 800118c:	4849      	ldr	r0, [pc, #292]	; (80012b4 <ReadInputs+0x2ec>)
 800118e:	f003 fba9 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	bf0c      	ite	eq
 8001198:	2301      	moveq	r3, #1
 800119a:	2300      	movne	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	771a      	strb	r2, [r3, #28]
	inputs->BSIUDIN06 = !HAL_GPIO_ReadPin(DIN06_GPIO_Port, DIN06_Pin);
 80011a4:	2120      	movs	r1, #32
 80011a6:	4843      	ldr	r0, [pc, #268]	; (80012b4 <ReadInputs+0x2ec>)
 80011a8:	f003 fb9c 	bl	80048e4 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bf0c      	ite	eq
 80011b2:	2301      	moveq	r3, #1
 80011b4:	2300      	movne	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	775a      	strb	r2, [r3, #29]
	inputs->BSIUDIN07 = !HAL_GPIO_ReadPin(DIN07_GPIO_Port, DIN07_Pin);
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	483c      	ldr	r0, [pc, #240]	; (80012b4 <ReadInputs+0x2ec>)
 80011c2:	f003 fb8f 	bl	80048e4 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	779a      	strb	r2, [r3, #30]
	inputs->BSIUDIN08 = !HAL_GPIO_ReadPin(DIN08_GPIO_Port, DIN08_Pin);
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	4836      	ldr	r0, [pc, #216]	; (80012b4 <ReadInputs+0x2ec>)
 80011dc:	f003 fb82 	bl	80048e4 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	77da      	strb	r2, [r3, #31]

	// Digital Outputs
	inputs->BSIUDO01Demand = BDO01Demand;
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <ReadInputs+0x2f0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f883 2020 	strb.w	r2, [r3, #32]
	inputs->BSIUDO02Demand = BDO02Demand;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <ReadInputs+0x2f4>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	inputs->BSIUDO03Demand = BDO03Demand;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <ReadInputs+0x2f8>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	inputs->BSIUDO04Demand = BDO04Demand;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <ReadInputs+0x2fc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	// ---------------------------------------------------------------------------------------------------
	//Clutch Paddle

	inputs->VrClutchPaddle = inputs->VSIUAnalog01;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28

	//Mapping
	inputs->BrClutchPaddleInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddle, &(inputs->rClutchPaddleRaw), VrCLUTCH_MARGIN_MIN, VrCLUTCH_MARGIN_MAX);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	332c      	adds	r3, #44	; 0x2c
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <ReadInputs+0x300>)
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	4924      	ldr	r1, [pc, #144]	; (80012c8 <ReadInputs+0x300>)
 8001238:	9100      	str	r1, [sp, #0]
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <ReadInputs+0x304>)
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fcf7 	bl	8001c30 <My2DMapInterpolate>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Conversion from Float to int8_t
	inputs->rClutchPaddle = (int8_t)round(inputs->rClutchPaddleRaw);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f8e1 	bl	8000418 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f005 fac5 	bl	80067ec <round>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fb3f 	bl	80008ec <__aeabi_d2iz>
 800126e:	4603      	mov	r3, r0
 8001270:	b25a      	sxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	//Clamping
	inputs->rClutchPaddle = CLAMP(inputs->rClutchPaddle, rCLUTCH_PADDLE_MIN, rCLUTCH_PADDLE_MAX);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800127e:	2b67      	cmp	r3, #103	; 0x67
 8001280:	dc26      	bgt.n	80012d0 <ReadInputs+0x308>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001288:	f06f 0203 	mvn.w	r2, #3
 800128c:	4293      	cmp	r3, r2
 800128e:	bfb8      	it	lt
 8001290:	4613      	movlt	r3, r2
 8001292:	b25a      	sxtb	r2, r3
 8001294:	e01d      	b.n	80012d2 <ReadInputs+0x30a>
 8001296:	bf00      	nop
 8001298:	66666666 	.word	0x66666666
 800129c:	400a6666 	.word	0x400a6666
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40affe00 	.word	0x40affe00
 80012a8:	20000084 	.word	0x20000084
 80012ac:	200000b8 	.word	0x200000b8
 80012b0:	20000284 	.word	0x20000284
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	200000b0 	.word	0x200000b0
 80012bc:	200000b2 	.word	0x200000b2
 80012c0:	200000b1 	.word	0x200000b1
 80012c4:	200000b3 	.word	0x200000b3
 80012c8:	3dcccccd 	.word	0x3dcccccd
 80012cc:	080068b0 	.word	0x080068b0
 80012d0:	2268      	movs	r2, #104	; 0x68
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSIUAnalog04 * VSUPPLY_DIVIDER_GAIN;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4997      	ldr	r1, [pc, #604]	; (800153c <ReadInputs+0x574>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fc8a 	bl	8000bf8 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	649a      	str	r2, [r3, #72]	; 0x48

	// ---------------------------------------------------------------------------------------------------
	// SIU Inputs

	// Up Shift Button
	if(inputs->BSIUDIN01 && tUpButtonTimer < tInputsTimer && !inputs->BUpShiftButtonState) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01c      	beq.n	800132e <ReadInputs+0x366>
 80012f4:	4b92      	ldr	r3, [pc, #584]	; (8001540 <ReadInputs+0x578>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b92      	ldr	r3, [pc, #584]	; (8001544 <ReadInputs+0x57c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d216      	bcs.n	800132e <ReadInputs+0x366>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001306:	2b00      	cmp	r3, #0
 8001308:	d111      	bne.n	800132e <ReadInputs+0x366>
		inputs->BUpShiftButtonState = 1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->BUpShiftButtonPressed = 1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		tUpButtonTimer = tInputsTimer;
 800131a:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <ReadInputs+0x57c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a88      	ldr	r2, [pc, #544]	; (8001540 <ReadInputs+0x578>)
 8001320:	6013      	str	r3, [r2, #0]
		tUpButtonTimer += UP_BUTTON_DEBOUNCE;
 8001322:	4b87      	ldr	r3, [pc, #540]	; (8001540 <ReadInputs+0x578>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3332      	adds	r3, #50	; 0x32
 8001328:	4a85      	ldr	r2, [pc, #532]	; (8001540 <ReadInputs+0x578>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e014      	b.n	8001358 <ReadInputs+0x390>
	}
	else if(!inputs->BSIUDIN01 && inputs->BUpShiftButtonState) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e1b      	ldrb	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d110      	bne.n	8001358 <ReadInputs+0x390>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <ReadInputs+0x390>
		inputs->BUpShiftButtonState = 0;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->BUpShiftButtonPressed = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		tUpButtonStuckTimmer = tInputsTimer;
 8001350:	4b7c      	ldr	r3, [pc, #496]	; (8001544 <ReadInputs+0x57c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a7c      	ldr	r2, [pc, #496]	; (8001548 <ReadInputs+0x580>)
 8001356:	6013      	str	r3, [r2, #0]
	}
	// Auto reset Strategy
	if(inputs->BUpShiftButtonPressed && (tUpButtonTimer + UP_BUTTON_RESET_TIMEOUT) < tInputsTimer) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <ReadInputs+0x3b2>
 8001362:	4b77      	ldr	r3, [pc, #476]	; (8001540 <ReadInputs+0x578>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <ReadInputs+0x57c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d203      	bcs.n	800137a <ReadInputs+0x3b2>
		inputs->BUpShiftButtonPressed = 0;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
	// Stuck Detection
	if(inputs->BUpShiftButtonState && (tUpButtonTimer + UP_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00c      	beq.n	800139e <ReadInputs+0x3d6>
 8001384:	4b6e      	ldr	r3, [pc, #440]	; (8001540 <ReadInputs+0x578>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f603 726e 	addw	r2, r3, #3950	; 0xf6e
 800138c:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <ReadInputs+0x57c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d204      	bcs.n	800139e <ReadInputs+0x3d6>
		inputs->BUpShiftButtonInError = 1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800139c:	e010      	b.n	80013c0 <ReadInputs+0x3f8>
	}
	else if(!inputs->BUpShiftButtonState && (tUpButtonStuckTimmer + UP_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10b      	bne.n	80013c0 <ReadInputs+0x3f8>
 80013a8:	4b67      	ldr	r3, [pc, #412]	; (8001548 <ReadInputs+0x580>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f603 726e 	addw	r2, r3, #3950	; 0xf6e
 80013b0:	4b64      	ldr	r3, [pc, #400]	; (8001544 <ReadInputs+0x57c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d203      	bcs.n	80013c0 <ReadInputs+0x3f8>
		inputs->BUpShiftButtonInError = 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	// Down Shift Button
	if(inputs->BSIUDIN02 && tDnButtonTimer < tInputsTimer && !inputs->BDnShiftButtonState) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e5b      	ldrb	r3, [r3, #25]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01c      	beq.n	8001402 <ReadInputs+0x43a>
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <ReadInputs+0x584>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <ReadInputs+0x57c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d216      	bcs.n	8001402 <ReadInputs+0x43a>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <ReadInputs+0x43a>
		inputs->BDnShiftButtonState = 1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		inputs->BDnShiftButtonPressed = 1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tDnButtonTimer = tInputsTimer;
 80013ee:	4b55      	ldr	r3, [pc, #340]	; (8001544 <ReadInputs+0x57c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a56      	ldr	r2, [pc, #344]	; (800154c <ReadInputs+0x584>)
 80013f4:	6013      	str	r3, [r2, #0]
		tDnButtonTimer += DN_BUTTON_DEBOUNCE;
 80013f6:	4b55      	ldr	r3, [pc, #340]	; (800154c <ReadInputs+0x584>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3332      	adds	r3, #50	; 0x32
 80013fc:	4a53      	ldr	r2, [pc, #332]	; (800154c <ReadInputs+0x584>)
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e014      	b.n	800142c <ReadInputs+0x464>
	}
	else if(!inputs->BSIUDIN02 && inputs->BDnShiftButtonState) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7e5b      	ldrb	r3, [r3, #25]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d110      	bne.n	800142c <ReadInputs+0x464>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <ReadInputs+0x464>
		inputs->BDnShiftButtonState = 0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		inputs->BDnShiftButtonPressed = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		tDnButtonStuckTimmer = tInputsTimer;
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <ReadInputs+0x57c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <ReadInputs+0x588>)
 800142a:	6013      	str	r3, [r2, #0]
	}
	// Auto reset Strategy
	if(inputs->BDnShiftButtonPressed && (tDnButtonTimer + DN_BUTTON_RESET_TIMEOUT) < tInputsTimer) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <ReadInputs+0x486>
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <ReadInputs+0x584>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f203 32b6 	addw	r2, r3, #950	; 0x3b6
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <ReadInputs+0x57c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d203      	bcs.n	800144e <ReadInputs+0x486>
		inputs->BDnShiftButtonPressed = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	// Stuck Detection
	if(inputs->BDnShiftButtonState && (tDnButtonTimer + DN_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <ReadInputs+0x4aa>
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <ReadInputs+0x584>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f603 726e 	addw	r2, r3, #3950	; 0xf6e
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <ReadInputs+0x57c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d204      	bcs.n	8001472 <ReadInputs+0x4aa>
		inputs->BDnShiftButtonInError = 1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001470:	e010      	b.n	8001494 <ReadInputs+0x4cc>
	}
	else if(!inputs->BDnShiftButtonState && (tDnButtonStuckTimmer + DN_BUTTON_STUCK_TIMEOUT) < tInputsTimer) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <ReadInputs+0x4cc>
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <ReadInputs+0x588>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f603 726e 	addw	r2, r3, #3950	; 0xf6e
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <ReadInputs+0x57c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d203      	bcs.n	8001494 <ReadInputs+0x4cc>
		inputs->BDnShiftButtonInError = 0;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	// Button A
	if(inputs->BSIUDIN03 && tButtonATimer < tInputsTimer && !inputs->BButtonAState) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7e9b      	ldrb	r3, [r3, #26]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <ReadInputs+0x50e>
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <ReadInputs+0x58c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <ReadInputs+0x57c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d216      	bcs.n	80014d6 <ReadInputs+0x50e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d111      	bne.n	80014d6 <ReadInputs+0x50e>
		inputs->BButtonAState = 1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		inputs->BButtonAPressed = 1;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		tButtonATimer = tInputsTimer;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <ReadInputs+0x57c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <ReadInputs+0x58c>)
 80014c8:	6013      	str	r3, [r2, #0]
		tButtonATimer += BUTTON_A_DEBOUNCE;
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <ReadInputs+0x58c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3364      	adds	r3, #100	; 0x64
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <ReadInputs+0x58c>)
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e010      	b.n	80014f8 <ReadInputs+0x530>
	}
	else if(!inputs->BSIUDIN03 && inputs->BButtonAState) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7e9b      	ldrb	r3, [r3, #26]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <ReadInputs+0x530>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <ReadInputs+0x530>
		inputs->BButtonAState = 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		inputs->BButtonAPressed = 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

	// Button B
	if(inputs->BSIUDIN04 && tButtonBTimer < tInputsTimer && !inputs->BButtonBState) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7edb      	ldrb	r3, [r3, #27]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d02d      	beq.n	800155c <ReadInputs+0x594>
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <ReadInputs+0x590>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <ReadInputs+0x57c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d227      	bcs.n	800155c <ReadInputs+0x594>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001512:	2b00      	cmp	r3, #0
 8001514:	d122      	bne.n	800155c <ReadInputs+0x594>
		inputs->BButtonBState = 1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		inputs->BButtonBPressed = 1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		tButtonBTimer = tInputsTimer;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <ReadInputs+0x57c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <ReadInputs+0x590>)
 800152c:	6013      	str	r3, [r2, #0]
		tButtonBTimer += BUTTON_B_DEBOUNCE;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <ReadInputs+0x590>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3364      	adds	r3, #100	; 0x64
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <ReadInputs+0x590>)
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e021      	b.n	800157e <ReadInputs+0x5b6>
 800153a:	bf00      	nop
 800153c:	3e6c4ef9 	.word	0x3e6c4ef9
 8001540:	20000088 	.word	0x20000088
 8001544:	20000084 	.word	0x20000084
 8001548:	2000008c 	.word	0x2000008c
 800154c:	20000090 	.word	0x20000090
 8001550:	20000094 	.word	0x20000094
 8001554:	20000098 	.word	0x20000098
 8001558:	2000009c 	.word	0x2000009c
	}
	else if(!inputs->BSIUDIN04 && inputs->BButtonBState) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7edb      	ldrb	r3, [r3, #27]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10c      	bne.n	800157e <ReadInputs+0x5b6>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <ReadInputs+0x5b6>
		inputs->BButtonBState = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		inputs->BButtonBPressed = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	// Button C
	if(inputs->BSIUDIN05 && tButtonCTimer < tInputsTimer && !inputs->BButtonCState) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7f1b      	ldrb	r3, [r3, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01c      	beq.n	80015c0 <ReadInputs+0x5f8>
 8001586:	4b64      	ldr	r3, [pc, #400]	; (8001718 <ReadInputs+0x750>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b64      	ldr	r3, [pc, #400]	; (800171c <ReadInputs+0x754>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d216      	bcs.n	80015c0 <ReadInputs+0x5f8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	2b00      	cmp	r3, #0
 800159a:	d111      	bne.n	80015c0 <ReadInputs+0x5f8>
		inputs->BButtonCState = 1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		inputs->BButtonCPressed = 1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		tButtonCTimer = tInputsTimer;
 80015ac:	4b5b      	ldr	r3, [pc, #364]	; (800171c <ReadInputs+0x754>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a59      	ldr	r2, [pc, #356]	; (8001718 <ReadInputs+0x750>)
 80015b2:	6013      	str	r3, [r2, #0]
		tButtonCTimer += BUTTON_C_DEBOUNCE;
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <ReadInputs+0x750>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3364      	adds	r3, #100	; 0x64
 80015ba:	4a57      	ldr	r2, [pc, #348]	; (8001718 <ReadInputs+0x750>)
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e010      	b.n	80015e2 <ReadInputs+0x61a>
	}
	else if(!inputs->BSIUDIN05 && inputs->BButtonCState) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f1b      	ldrb	r3, [r3, #28]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <ReadInputs+0x61a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <ReadInputs+0x61a>
		inputs->BButtonCState = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		inputs->BButtonCPressed = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// Button D
	if(inputs->BSIUDIN06 && tButtonDTimer < tInputsTimer && !inputs->BButtonDState) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7f5b      	ldrb	r3, [r3, #29]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01c      	beq.n	8001624 <ReadInputs+0x65c>
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <ReadInputs+0x758>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <ReadInputs+0x754>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d216      	bcs.n	8001624 <ReadInputs+0x65c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <ReadInputs+0x65c>
		inputs->BButtonDState = 1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		inputs->BButtonDPressed = 1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		tButtonDTimer = tInputsTimer;
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <ReadInputs+0x754>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <ReadInputs+0x758>)
 8001616:	6013      	str	r3, [r2, #0]
		tButtonDTimer += BUTTON_D_DEBOUNCE;
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <ReadInputs+0x758>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3364      	adds	r3, #100	; 0x64
 800161e:	4a40      	ldr	r2, [pc, #256]	; (8001720 <ReadInputs+0x758>)
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e010      	b.n	8001646 <ReadInputs+0x67e>
	}
	else if(!inputs->BSIUDIN06 && inputs->BButtonDState) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7f5b      	ldrb	r3, [r3, #29]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10c      	bne.n	8001646 <ReadInputs+0x67e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <ReadInputs+0x67e>
		inputs->BButtonDState = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		inputs->BButtonDPressed = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	// Button E
	if(inputs->BSIUDIN07 && tButtonETimer < tInputsTimer && !inputs->BButtonEState) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7f9b      	ldrb	r3, [r3, #30]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d01c      	beq.n	8001688 <ReadInputs+0x6c0>
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <ReadInputs+0x75c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <ReadInputs+0x754>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d216      	bcs.n	8001688 <ReadInputs+0x6c0>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <ReadInputs+0x6c0>
		inputs->BButtonEState = 1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		inputs->BButtonEPressed = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		tButtonETimer = tInputsTimer;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <ReadInputs+0x754>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <ReadInputs+0x75c>)
 800167a:	6013      	str	r3, [r2, #0]
		tButtonETimer += BUTTON_E_DEBOUNCE;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <ReadInputs+0x75c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3364      	adds	r3, #100	; 0x64
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <ReadInputs+0x75c>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e010      	b.n	80016aa <ReadInputs+0x6e2>
	}
	else if(!inputs->BSIUDIN07 && inputs->BButtonEState) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f9b      	ldrb	r3, [r3, #30]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10c      	bne.n	80016aa <ReadInputs+0x6e2>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <ReadInputs+0x6e2>
		inputs->BButtonEState = 0;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		inputs->BButtonEPressed = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	}

	// Button F
	if(inputs->BSIUDIN08 && tButtonFTimer < tInputsTimer && !inputs->BButtonFState) {
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7fdb      	ldrb	r3, [r3, #31]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d01c      	beq.n	80016ec <ReadInputs+0x724>
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <ReadInputs+0x760>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <ReadInputs+0x754>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d216      	bcs.n	80016ec <ReadInputs+0x724>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <ReadInputs+0x724>
		inputs->BButtonFState = 1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		inputs->BButtonFPressed = 1;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		tButtonFTimer = tInputsTimer;
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <ReadInputs+0x754>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <ReadInputs+0x760>)
 80016de:	6013      	str	r3, [r2, #0]
		tButtonFTimer += BUTTON_F_DEBOUNCE;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <ReadInputs+0x760>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3364      	adds	r3, #100	; 0x64
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <ReadInputs+0x760>)
 80016e8:	6013      	str	r3, [r2, #0]
		inputs->BButtonFState = 0;
		inputs->BButtonFPressed = 0;
	}

	// ---------------------------------------------------------------------------------------------------
}
 80016ea:	e010      	b.n	800170e <ReadInputs+0x746>
	else if(!inputs->BSIUDIN08 && inputs->BButtonFState) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7fdb      	ldrb	r3, [r3, #31]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10c      	bne.n	800170e <ReadInputs+0x746>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <ReadInputs+0x746>
		inputs->BButtonFState = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		inputs->BButtonFPressed = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200000a0 	.word	0x200000a0
 800171c:	20000084 	.word	0x20000084
 8001720:	200000a4 	.word	0x200000a4
 8001724:	200000a8 	.word	0x200000a8
 8001728:	200000ac 	.word	0x200000ac

0800172c <InitInputs>:


void InitInputs(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <InitInputs+0x1c>)
 8001732:	f001 fd03 	bl	800313c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 8001736:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800173a:	4904      	ldr	r1, [pc, #16]	; (800174c <InitInputs+0x20>)
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <InitInputs+0x1c>)
 800173e:	f001 fa13 	bl	8002b68 <HAL_ADC_Start_DMA>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000c8 	.word	0x200000c8
 800174c:	20000284 	.word	0x20000284

08001750 <MyHalfBufferAverage>:


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	807b      	strh	r3, [r7, #2]
 8001762:	460b      	mov	r3, r1
 8001764:	707b      	strb	r3, [r7, #1]
 8001766:	4613      	mov	r3, r2
 8001768:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 800176e:	787b      	ldrb	r3, [r7, #1]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <MyHalfBufferAverage+0x28>
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	e000      	b.n	800177a <MyHalfBufferAverage+0x2a>
 8001778:	2300      	movs	r3, #0
 800177a:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	827b      	strh	r3, [r7, #18]
 8001786:	e010      	b.n	80017aa <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	009a      	lsls	r2, r3, #2
 800178c:	783b      	ldrb	r3, [r7, #0]
 800178e:	441a      	add	r2, r3
 8001790:	8a3b      	ldrh	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 80017a4:	8a7b      	ldrh	r3, [r7, #18]
 80017a6:	3301      	adds	r3, #1
 80017a8:	827b      	strh	r3, [r7, #18]
 80017aa:	8a7a      	ldrh	r2, [r7, #18]
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3ea      	bcc.n	8001788 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	b29b      	uxth	r3, r3

}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	f107 0214 	add.w	r2, r7, #20
 80017de:	6839      	ldr	r1, [r7, #0]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f002 f8a8 	bl	8003936 <HAL_CAN_GetRxMessage>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <CAN_RX+0x80>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <CAN_RX+0x80>)
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	e023      	b.n	8001844 <CAN_RX+0x78>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001802:	d11e      	bne.n	8001842 <CAN_RX+0x76>

	 case SIU_RX_ID :

		 BDO01Demand = (RxBuffer[0] >> 0) & 0x01;
 8001804:	7b3b      	ldrb	r3, [r7, #12]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <CAN_RX+0x84>)
 800180e:	701a      	strb	r2, [r3, #0]
		 BDO02Demand = (RxBuffer[0] >> 1) & 0x01;
 8001810:	7b3b      	ldrb	r3, [r7, #12]
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <CAN_RX+0x88>)
 800181e:	701a      	strb	r2, [r3, #0]
		 BDO03Demand = (RxBuffer[0] >> 2) & 0x01;
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <CAN_RX+0x8c>)
 800182e:	701a      	strb	r2, [r3, #0]
		 BDO04Demand = (RxBuffer[0] >> 3) & 0x01;
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <CAN_RX+0x90>)
 800183e:	701a      	strb	r2, [r3, #0]

		 break;
 8001840:	e000      	b.n	8001844 <CAN_RX+0x78>

	 default:
		 break;
 8001842:	bf00      	nop
	 }
}
 8001844:	3730      	adds	r7, #48	; 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000b6 	.word	0x200000b6
 8001850:	200000b0 	.word	0x200000b0
 8001854:	200000b2 	.word	0x200000b2
 8001858:	200000b1 	.word	0x200000b1
 800185c:	200000b3 	.word	0x200000b3

08001860 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffae 	bl	80017cc <CAN_RX>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8001880:	2101      	movs	r1, #1
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa2 	bl	80017cc <CAN_RX>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_CAN_ErrorCallback+0x20>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_CAN_ErrorCallback+0x20>)
 80018a4:	701a      	strb	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	200000b4 	.word	0x200000b4

080018b4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d107      	bne.n	80018d4 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80018d2:	701a      	strb	r2, [r3, #0]
	}
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200000c8 	.word	0x200000c8
 80018e4:	200000b8 	.word	0x200000b8

080018e8 <InitOutput>:

uint32_t nCanTxErrorCount=0;
uint32_t nCanOldestMailbox=4, nCanSecondOldestMailbox=2, nCanYoungestMailbox=1;


void InitOutput() {
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <Output>:
void Output(InputStruct* inputs) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

	// Digital Outputs
	HAL_GPIO_WritePin(DO01_GPIO_Port, DO01_Pin, inputs->BSIUDO01Demand);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	461a      	mov	r2, r3
 8001904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001908:	4884      	ldr	r0, [pc, #528]	; (8001b1c <Output+0x228>)
 800190a:	f003 f802 	bl	8004912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, inputs->BSIUDO02Demand);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001914:	461a      	mov	r2, r3
 8001916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191a:	4880      	ldr	r0, [pc, #512]	; (8001b1c <Output+0x228>)
 800191c:	f002 fff9 	bl	8004912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, inputs->BSIUDO03Demand);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001926:	461a      	mov	r2, r3
 8001928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192c:	487b      	ldr	r0, [pc, #492]	; (8001b1c <Output+0x228>)
 800192e:	f002 fff0 	bl	8004912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO04_GPIO_Port, DO04_Pin, inputs->BSIUDO04Demand);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001938:	461a      	mov	r2, r3
 800193a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193e:	4877      	ldr	r0, [pc, #476]	; (8001b1c <Output+0x228>)
 8001940:	f002 ffe7 	bl	8004912 <HAL_GPIO_WritePin>


	// CAN
	CANTxBuffer[0] = 0;
 8001944:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <Output+0x22c>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BUpShiftButtonInError 	& 0x01) << 0;
 800194a:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <Output+0x22c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25a      	sxtb	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001956:	b25b      	sxtb	r3, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <Output+0x22c>)
 8001966:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BDnShiftButtonInError 	& 0x01) << 1;
 8001968:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <Output+0x22c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b25a      	sxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	b25b      	sxtb	r3, r3
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <Output+0x22c>)
 8001986:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							  	& 0x01) << 2;
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <Output+0x22c>)
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <Output+0x22c>)
 800198e:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 3;
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <Output+0x22c>)
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <Output+0x22c>)
 8001996:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0							    & 0x01) << 4;
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <Output+0x22c>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <Output+0x22c>)
 800199e:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 5;
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <Output+0x22c>)
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <Output+0x22c>)
 80019a6:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (inputs->BrClutchPaddleInError	& 0x01) << 6;
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <Output+0x22c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <Output+0x22c>)
 80019c6:	701a      	strb	r2, [r3, #0]
	CANTxBuffer[0] |= (0								& 0x01) << 7;
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <Output+0x22c>)
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <Output+0x22c>)
 80019ce:	701a      	strb	r2, [r3, #0]

	CANTxBuffer[1] = 0;
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <Output+0x22c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BUpShiftButtonPressed 	& 0x01) << 0;
 80019d6:	4b52      	ldr	r3, [pc, #328]	; (8001b20 <Output+0x22c>)
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <Output+0x22c>)
 80019f2:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BDnShiftButtonPressed 	& 0x01) << 1;
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <Output+0x22c>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	b25a      	sxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <Output+0x22c>)
 8001a12:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonAPressed  		& 0x01) << 2;
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <Output+0x22c>)
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	b25a      	sxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <Output+0x22c>)
 8001a32:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonBPressed 			& 0x01) << 3;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <Output+0x22c>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	b25a      	sxtb	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <Output+0x22c>)
 8001a52:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonCPressed   		& 0x01) << 4;
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <Output+0x22c>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <Output+0x22c>)
 8001a72:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonDPressed			& 0x01) << 5;
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <Output+0x22c>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	b25a      	sxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <Output+0x22c>)
 8001a92:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonEPressed			& 0x01) << 6;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <Output+0x22c>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <Output+0x22c>)
 8001ab2:	705a      	strb	r2, [r3, #1]
	CANTxBuffer[1] |= (inputs->BButtonFPressed			& 0x01) << 7;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <Output+0x22c>)
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac0:	01db      	lsls	r3, r3, #7
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <Output+0x22c>)
 8001acc:	705a      	strb	r2, [r3, #1]

	CANTxBuffer[2] = inputs->rClutchPaddle;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <Output+0x22c>)
 8001ad8:	709a      	strb	r2, [r3, #2]

	uint16_t VSupplyCAN = (uint16_t)(inputs->VSupply * 1000);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ade:	4911      	ldr	r1, [pc, #68]	; (8001b24 <Output+0x230>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f889 	bl	8000bf8 <__aeabi_fmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa4b 	bl	8000f84 <__aeabi_f2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	81fb      	strh	r3, [r7, #14]

	CANTxBuffer[3] = (VSupplyCAN & 0xFF00) >> 8;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <Output+0x22c>)
 8001afc:	70da      	strb	r2, [r3, #3]
	CANTxBuffer[4] = (VSupplyCAN & 0x00FF) >> 0;
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <Output+0x22c>)
 8001b04:	711a      	strb	r2, [r3, #4]

	CAN_TX(SHIFTER_TX_ID, 8, CANTxBuffer);
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <Output+0x22c>)
 8001b08:	2108      	movs	r1, #8
 8001b0a:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001b0e:	f000 f80b 	bl	8001b28 <CAN_TX>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	200000bc 	.word	0x200000bc
 8001b24:	447a0000 	.word	0x447a0000

08001b28 <CAN_TX>:


void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <CAN_TX+0xc4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	33c8      	adds	r3, #200	; 0xc8
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 8001b50:	bf00      	nop
 8001b52:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <CAN_TX+0xc8>)
 8001b54:	f001 febb 	bl	80038ce <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <CAN_TX+0x42>
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <CAN_TX+0xc4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d8f3      	bhi.n	8001b52 <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8001b6a:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <CAN_TX+0xc8>)
 8001b6c:	f001 feaf 	bl	80038ce <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <CAN_TX+0xcc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481c      	ldr	r0, [pc, #112]	; (8001bf0 <CAN_TX+0xc8>)
 8001b7e:	f001 fe62 	bl	8003846 <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	f107 0114 	add.w	r1, r7, #20
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <CAN_TX+0xc8>)
 8001b8e:	f001 fd8b 	bl	80036a8 <HAL_CAN_AddTxMessage>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <CAN_TX+0xd0>)
 8001b9a:	f000 f835 	bl	8001c08 <print>
		nCanTxErrorCount++;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <CAN_TX+0xd4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <CAN_TX+0xd4>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e01c      	b.n	8001be4 <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <CAN_TX+0xd8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d017      	beq.n	8001be4 <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <CAN_TX+0xdc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d00b      	beq.n	8001bd6 <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <CAN_TX+0xdc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <CAN_TX+0xcc>)
 8001bc4:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <CAN_TX+0xd8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <CAN_TX+0xdc>)
 8001bcc:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <CAN_TX+0xd8>)
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e006      	b.n	8001be4 <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <CAN_TX+0xd8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <CAN_TX+0xdc>)
 8001bdc:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <CAN_TX+0xd8>)
 8001be2:	6013      	str	r3, [r2, #0]
		}
	}

}
 8001be4:	3730      	adds	r7, #48	; 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001ac 	.word	0x200001ac
 8001bf0:	2000013c 	.word	0x2000013c
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	08006890 	.word	0x08006890
 8001bfc:	200000c4 	.word	0x200000c4
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000004 	.word	0x20000004

08001c08 <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8001c08:	b40f      	push	{r0, r1, r2, r3}
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b09a      	sub	sp, #104	; 0x68
 8001c0e:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8001c10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c14:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 f949 	bl	8005eb4 <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 8001c22:	bf00      	nop
 8001c24:	3768      	adds	r7, #104	; 0x68
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c2c:	b004      	add	sp, #16
 8001c2e:	4770      	bx	lr

08001c30 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	68fe      	ldr	r6, [r7, #12]
 8001c40:	1e73      	subs	r3, r6, #1
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	4632      	mov	r2, r6
 8001c46:	2300      	movs	r3, #0
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	016b      	lsls	r3, r5, #5
 8001c56:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001c5a:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe febe 	bl	80009e4 <__aeabi_fsub>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff f961 	bl	8000f34 <__aeabi_fcmplt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8001c78:	4633      	mov	r3, r6
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	4413      	add	r3, r2
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	601a      	str	r2, [r3, #0]
		return 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07b      	b.n	8001d82 <My2DMapInterpolate+0x152>
	}
	if(input > map[0][size-1] + maxMargin) {
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fea6 	bl	80009e8 <__addsf3>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff f965 	bl	8000f70 <__aeabi_fcmpgt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8001cac:	4633      	mov	r3, r6
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	601a      	str	r2, [r3, #0]
		return 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e05e      	b.n	8001d82 <My2DMapInterpolate+0x152>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size--; i++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	e00e      	b.n	8001ce8 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff f92c 	bl	8000f34 <__aeabi_fcmplt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <My2DMapInterpolate+0xc6>
	for(i=0; i<size--; i++) {
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	60fa      	str	r2, [r7, #12]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbea      	blt.n	8001cca <My2DMapInterpolate+0x9a>
 8001cf4:	e000      	b.n	8001cf8 <My2DMapInterpolate+0xc8>
			break;
 8001cf6:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe fe6a 	bl	80009e4 <__aeabi_fsub>
 8001d10:	4603      	mov	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8001d14:	4633      	mov	r3, r6
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	3201      	adds	r2, #1
 8001d20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001d24:	4633      	mov	r3, r6
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	4619      	mov	r1, r3
 8001d34:	f7fe fe56 	bl	80009e4 <__aeabi_fsub>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8001d3c:	4633      	mov	r3, r6
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d52:	4619      	mov	r1, r3
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fe45 	bl	80009e4 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff4a 	bl	8000bf8 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fff9 	bl	8000d60 <__aeabi_fdiv>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f7fe fe38 	bl	80009e8 <__addsf3>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]
	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d8c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d90:	f3bf 8f4f 	dsb	sy
}
 8001d94:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <__NVIC_SystemReset+0x24>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d9e:	4904      	ldr	r1, [pc, #16]	; (8001db0 <__NVIC_SystemReset+0x24>)
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <__NVIC_SystemReset+0x28>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001da6:	f3bf 8f4f 	dsb	sy
}
 8001daa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <__NVIC_SystemReset+0x20>
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	05fa0004 	.word	0x05fa0004

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dbc:	f000 fd76 	bl	80028ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc0:	f000 f832 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc4:	f000 fac8 	bl	8002358 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc8:	f000 faa8 	bl	800231c <MX_DMA_Init>
  MX_TIM2_Init();
 8001dcc:	f000 f9e0 	bl	8002190 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001dd0:	f000 f886 	bl	8001ee0 <MX_ADC1_Init>
  MX_CAN_Init();
 8001dd4:	f000 f8ee 	bl	8001fb4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001dd8:	f000 fa76 	bl	80022c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001ddc:	f000 f988 	bl	80020f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001de0:	f000 fa24 	bl	800222c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <main+0x60>)
 8001de6:	f003 fb79 	bl	80054dc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8001dea:	480c      	ldr	r0, [pc, #48]	; (8001e1c <main+0x64>)
 8001dec:	f003 fbc0 	bl	8005570 <HAL_TIM_Base_Start_IT>

  InitInputs();
 8001df0:	f7ff fc9c 	bl	800172c <InitInputs>
  InitOutput();
 8001df4:	f7ff fd78 	bl	80018e8 <InitOutput>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BCycleTimerFlag) {
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <main+0x68>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0fa      	beq.n	8001df8 <main+0x40>
		  BCycleTimerFlag = 0;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <main+0x68>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		  ReadInputs(&Inputs);
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <main+0x6c>)
 8001e0a:	f7ff f8dd 	bl	8000fc8 <ReadInputs>
		  Output(&Inputs);
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <main+0x6c>)
 8001e10:	f7ff fd70 	bl	80018f4 <Output>
	  if(BCycleTimerFlag) {
 8001e14:	e7f0      	b.n	8001df8 <main+0x40>
 8001e16:	bf00      	nop
 8001e18:	20000164 	.word	0x20000164
 8001e1c:	200001f4 	.word	0x200001f4
 8001e20:	20001344 	.word	0x20001344
 8001e24:	20001348 	.word	0x20001348

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b094      	sub	sp, #80	; 0x50
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e32:	2228      	movs	r2, #40	; 0x28
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 f846 	bl	8005ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e66:	2301      	movs	r3, #1
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e74:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fd60 	bl	8004944 <HAL_RCC_OscConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e8a:	f000 fad7 	bl	800243c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8e:	230f      	movs	r3, #15
 8001e90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 ffcc 	bl	8004e48 <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001eb6:	f000 fac1 	bl	800243c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ebe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f94c 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ed2:	f000 fab3 	bl	800243c <Error_Handler>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3750      	adds	r7, #80	; 0x50
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	; (8001fb0 <MX_ADC1_Init+0xd0>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f0c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f20:	f000 fd4a 	bl	80029b8 <HAL_ADC_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f2a:	f000 fa87 	bl	800243c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001f36:	2306      	movs	r3, #6
 8001f38:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f40:	f000 ff02 	bl	8002d48 <HAL_ADC_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f4a:	f000 fa77 	bl	800243c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f52:	2302      	movs	r3, #2
 8001f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f5c:	f000 fef4 	bl	8002d48 <HAL_ADC_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001f66:	f000 fa69 	bl	800243c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f78:	f000 fee6 	bl	8002d48 <HAL_ADC_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f82:	f000 fa5b 	bl	800243c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001f86:	2303      	movs	r3, #3
 8001f88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f94:	f000 fed8 	bl	8002d48 <HAL_ADC_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001f9e:	f000 fa4d 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000c8 	.word	0x200000c8
 8001fb0:	40012400 	.word	0x40012400

08001fb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <MX_CAN_Init+0x138>)
 8001fbe:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001fc6:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001fd2:	4b45      	ldr	r3, [pc, #276]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fd4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001fd8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fe0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <MX_CAN_Init+0x134>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <MX_CAN_Init+0x134>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <MX_CAN_Init+0x134>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <MX_CAN_Init+0x134>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <MX_CAN_Init+0x134>)
 8002002:	2200      	movs	r2, #0
 8002004:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002006:	4838      	ldr	r0, [pc, #224]	; (80020e8 <MX_CAN_Init+0x134>)
 8002008:	f001 f946 	bl	8003298 <HAL_CAN_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002012:	f000 fa13 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // SIU RECEIVE
     CAN_FilterTypeDef FilterConfig1;
     FilterConfig1.FilterIdHigh = SIU_RX_ID << 5 ;
 8002016:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
     FilterConfig1.FilterIdLow = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
     FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8002020:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
     FilterConfig1.FilterMaskIdLow = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
     FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
     FilterConfig1.FilterBank = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
     FilterConfig1.SlaveStartFilterBank = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
     FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002036:	2300      	movs	r3, #0
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
     FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 800203a:	2301      	movs	r3, #1
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
     FilterConfig1.FilterActivation = ENABLE;
 800203e:	2301      	movs	r3, #1
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8002042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002046:	4619      	mov	r1, r3
 8002048:	4827      	ldr	r0, [pc, #156]	; (80020e8 <MX_CAN_Init+0x134>)
 800204a:	f001 fa20 	bl	800348e <HAL_CAN_ConfigFilter>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_CAN_Init+0xa4>
   	  Error_Handler();
 8002054:	f000 f9f2 	bl	800243c <Error_Handler>
   	}

     CAN_FilterTypeDef FilterConfig11;
     FilterConfig11.FilterIdHigh = SIU_RX_ID << 5 ;
 8002058:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800205c:	603b      	str	r3, [r7, #0]
     FilterConfig11.FilterIdLow = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
     FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8002062:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002066:	60bb      	str	r3, [r7, #8]
     FilterConfig11.FilterMaskIdLow = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
     FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
     FilterConfig11.FilterBank = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
     FilterConfig11.SlaveStartFilterBank = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
     FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
     FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 800207c:	2301      	movs	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
     FilterConfig11.FilterActivation = ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	623b      	str	r3, [r7, #32]

     if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002084:	463b      	mov	r3, r7
 8002086:	4619      	mov	r1, r3
 8002088:	4817      	ldr	r0, [pc, #92]	; (80020e8 <MX_CAN_Init+0x134>)
 800208a:	f001 fa00 	bl	800348e <HAL_CAN_ConfigFilter>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_CAN_Init+0xe4>
   	  Error_Handler();
 8002094:	f000 f9d2 	bl	800243c <Error_Handler>
   	}

     // we activate the notifications (interrupts) for FIFO0
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002098:	2102      	movs	r1, #2
 800209a:	4813      	ldr	r0, [pc, #76]	; (80020e8 <MX_CAN_Init+0x134>)
 800209c:	f001 fd6c 	bl	8003b78 <HAL_CAN_ActivateNotification>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_CAN_Init+0xf6>
  	   Error_Handler();
 80020a6:	f000 f9c9 	bl	800243c <Error_Handler>
   	}
     // we activate the notifications (interrupts) for FIFO1
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80020aa:	2110      	movs	r1, #16
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <MX_CAN_Init+0x134>)
 80020ae:	f001 fd63 	bl	8003b78 <HAL_CAN_ActivateNotification>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_CAN_Init+0x108>
  	   Error_Handler();
 80020b8:	f000 f9c0 	bl	800243c <Error_Handler>
   	}
     // we activate the notifications (interrupts) for all error codes
     if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 80020bc:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 80020c0:	4809      	ldr	r0, [pc, #36]	; (80020e8 <MX_CAN_Init+0x134>)
 80020c2:	f001 fd59 	bl	8003b78 <HAL_CAN_ActivateNotification>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_CAN_Init+0x11c>
  	   Error_Handler();
 80020cc:	f000 f9b6 	bl	800243c <Error_Handler>
     }
     // we start the CAN
     if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 80020d0:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_CAN_Init+0x134>)
 80020d2:	f001 faa5 	bl	8003620 <HAL_CAN_Start>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_CAN_Init+0x12c>
   	  Error_Handler();
 80020dc:	f000 f9ae 	bl	800243c <Error_Handler>
     }
  /* USER CODE END CAN_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	3750      	adds	r7, #80	; 0x50
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000013c 	.word	0x2000013c
 80020ec:	40006400 	.word	0x40006400

080020f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002104:	463b      	mov	r3, r7
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <MX_TIM1_Init+0x98>)
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <MX_TIM1_Init+0x9c>)
 8002110:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM1_Init+0x98>)
 8002114:	2247      	movs	r2, #71	; 0x47
 8002116:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_TIM1_Init+0x98>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_TIM1_Init+0x98>)
 8002120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_TIM1_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_TIM1_Init+0x98>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_TIM1_Init+0x98>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_TIM1_Init+0x98>)
 800213a:	f003 f97f 	bl	800543c <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002144:	f000 f97a 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <MX_TIM1_Init+0x98>)
 8002156:	f003 fb65 	bl	8005824 <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002160:	f000 f96c 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_TIM1_Init+0x98>)
 8002172:	f003 fd3b 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800217c:	f000 f95e 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000164 	.word	0x20000164
 800218c:	40012c00 	.word	0x40012c00

08002190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <MX_TIM2_Init+0x98>)
 80021ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_TIM2_Init+0x98>)
 80021b6:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80021ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_TIM2_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_TIM2_Init+0x98>)
 80021c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_TIM2_Init+0x98>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <MX_TIM2_Init+0x98>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d6:	4814      	ldr	r0, [pc, #80]	; (8002228 <MX_TIM2_Init+0x98>)
 80021d8:	f003 f930 	bl	800543c <HAL_TIM_Base_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021e2:	f000 f92b 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_TIM2_Init+0x98>)
 80021f4:	f003 fb16 	bl	8005824 <HAL_TIM_ConfigClockSource>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021fe:	f000 f91d 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	; (8002228 <MX_TIM2_Init+0x98>)
 8002210:	f003 fcec 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800221a:	f000 f90f 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200001ac 	.word	0x200001ac

0800222c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	463b      	mov	r3, r7
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <MX_TIM3_Init+0x94>)
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <MX_TIM3_Init+0x98>)
 800224c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <MX_TIM3_Init+0x94>)
 8002250:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <MX_TIM3_Init+0x94>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_TIM3_Init+0x94>)
 800225e:	2263      	movs	r2, #99	; 0x63
 8002260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_TIM3_Init+0x94>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <MX_TIM3_Init+0x94>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800226e:	4814      	ldr	r0, [pc, #80]	; (80022c0 <MX_TIM3_Init+0x94>)
 8002270:	f003 f8e4 	bl	800543c <HAL_TIM_Base_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800227a:	f000 f8df 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	4619      	mov	r1, r3
 800228a:	480d      	ldr	r0, [pc, #52]	; (80022c0 <MX_TIM3_Init+0x94>)
 800228c:	f003 faca 	bl	8005824 <HAL_TIM_ConfigClockSource>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002296:	f000 f8d1 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a2:	463b      	mov	r3, r7
 80022a4:	4619      	mov	r1, r3
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <MX_TIM3_Init+0x94>)
 80022a8:	f003 fca0 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022b2:	f000 f8c3 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200001f4 	.word	0x200001f4
 80022c4:	40000400 	.word	0x40000400

080022c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <MX_USART1_UART_Init+0x50>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_USART1_UART_Init+0x4c>)
 8002300:	f003 fce4 	bl	8005ccc <HAL_UART_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800230a:	f000 f897 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000023c 	.word	0x2000023c
 8002318:	40013800 	.word	0x40013800

0800231c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_DMA_Init+0x38>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <MX_DMA_Init+0x38>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6153      	str	r3, [r2, #20]
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_DMA_Init+0x38>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	200b      	movs	r0, #11
 8002340:	f001 ff27 	bl	8004192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002344:	200b      	movs	r0, #11
 8002346:	f001 ff40 	bl	80041ca <HAL_NVIC_EnableIRQ>

}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <MX_GPIO_Init+0xb4>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <MX_GPIO_Init+0xb4>)
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <MX_GPIO_Init+0xb4>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_GPIO_Init+0xb4>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <MX_GPIO_Init+0xb4>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_GPIO_Init+0xb4>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_GPIO_Init+0xb4>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <MX_GPIO_Init+0xb4>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6193      	str	r3, [r2, #24]
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_GPIO_Init+0xb4>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <MX_GPIO_Init+0xb8>)
 80023bc:	f002 faa9 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO01_Pin|DO02_Pin|DO03_Pin|DO04_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80023c6:	4812      	ldr	r0, [pc, #72]	; (8002410 <MX_GPIO_Init+0xb8>)
 80023c8:	f002 faa3 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN03_Pin DIN02_Pin DIN01_Pin DIN04_Pin
                           DIN05_Pin DIN06_Pin DIN07_Pin DIN08_Pin */
  GPIO_InitStruct.Pin = DIN03_Pin|DIN02_Pin|DIN01_Pin|DIN04_Pin
 80023cc:	23ff      	movs	r3, #255	; 0xff
 80023ce:	613b      	str	r3, [r7, #16]
                          |DIN05_Pin|DIN06_Pin|DIN07_Pin|DIN08_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <MX_GPIO_Init+0xb8>)
 80023e0:	f002 f8fc 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO01_Pin DO02_Pin DO03_Pin
                           DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO01_Pin|DO02_Pin|DO03_Pin
 80023e4:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 80023e8:	613b      	str	r3, [r7, #16]
                          |DO04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2302      	movs	r3, #2
 80023f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_GPIO_Init+0xb8>)
 80023fe:	f002 f8ed 	bl	80045dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40010c00 	.word	0x40010c00

08002414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d102      	bne.n	800242a <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
	}
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	200001f4 	.word	0x200001f4
 8002438:	20001344 	.word	0x20001344

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002444:	20c8      	movs	r0, #200	; 0xc8
 8002446:	f000 fa93 	bl	8002970 <HAL_Delay>
	  NVIC_SystemReset();
 800244a:	f7ff fc9f 	bl	8001d8c <__NVIC_SystemReset>
	...

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_MspInit+0x5c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_MspInit+0x5c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_MspInit+0x5c>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_MspInit+0x5c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_MspInit+0x5c>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_MspInit+0x5c>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_MspInit+0x60>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_MspInit+0x60>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000

080024b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_ADC_MspInit+0xbc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d149      	bne.n	8002568 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_ADC_MspInit+0xc0>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002504:	230f      	movs	r3, #15
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002508:	2303      	movs	r3, #3
 800250a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	4619      	mov	r1, r3
 8002512:	4819      	ldr	r0, [pc, #100]	; (8002578 <HAL_ADC_MspInit+0xc4>)
 8002514:	f002 f862 	bl	80045dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_ADC_MspInit+0xc8>)
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_ADC_MspInit+0xcc>)
 800251c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_ADC_MspInit+0xc8>)
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_ADC_MspInit+0xc8>)
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002542:	2220      	movs	r2, #32
 8002544:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <HAL_ADC_MspInit+0xc8>)
 800254e:	f001 fe57 	bl	8004200 <HAL_DMA_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002558:	f7ff ff70 	bl	800243c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002560:	621a      	str	r2, [r3, #32]
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_ADC_MspInit+0xc8>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40012400 	.word	0x40012400
 8002574:	40021000 	.word	0x40021000
 8002578:	40010800 	.word	0x40010800
 800257c:	200000f8 	.word	0x200000f8
 8002580:	40020008 	.word	0x40020008

08002584 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_CAN_MspInit+0x9c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d139      	bne.n	8002618 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ae:	61d3      	str	r3, [r2, #28]
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	4619      	mov	r1, r3
 80025e8:	480f      	ldr	r0, [pc, #60]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025ea:	f001 fff7 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	4619      	mov	r1, r3
 8002602:	4809      	ldr	r0, [pc, #36]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 8002604:	f001 ffea 	bl	80045dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	2014      	movs	r0, #20
 800260e:	f001 fdc0 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002612:	2014      	movs	r0, #20
 8002614:	f001 fdd9 	bl	80041ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40006400 	.word	0x40006400
 8002624:	40021000 	.word	0x40021000
 8002628:	40010800 	.word	0x40010800

0800262c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_TIM_Base_MspInit+0x8c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10c      	bne.n	8002658 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002644:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002648:	6193      	str	r3, [r2, #24]
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002656:	e02a      	b.n	80026ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d10c      	bne.n	800267c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a15      	ldr	r2, [pc, #84]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
}
 800267a:	e018      	b.n	80026ae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_TIM_Base_MspInit+0x94>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d113      	bne.n	80026ae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_TIM_Base_MspInit+0x90>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201d      	movs	r0, #29
 80026a4:	f001 fd75 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a8:	201d      	movs	r0, #29
 80026aa:	f001 fd8e 	bl	80041ca <HAL_NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_UART_MspInit+0x8c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d131      	bne.n	8002748 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_UART_MspInit+0x90>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_UART_MspInit+0x90>)
 80026ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_UART_MspInit+0x90>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_UART_MspInit+0x90>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <HAL_UART_MspInit+0x90>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6193      	str	r3, [r2, #24]
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_UART_MspInit+0x90>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <HAL_UART_MspInit+0x94>)
 800272a:	f001 ff57 	bl	80045dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800272e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	4619      	mov	r1, r3
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_UART_MspInit+0x94>)
 8002744:	f001 ff4a 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40013800 	.word	0x40013800
 8002754:	40021000 	.word	0x40021000
 8002758:	40010800 	.word	0x40010800

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a2:	f000 f8c9 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA1_Channel1_IRQHandler+0x10>)
 80027b2:	f001 fddf 	bl	8004374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200000f8 	.word	0x200000f8

080027c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80027c6:	f001 f9fc 	bl	8003bc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000013c 	.word	0x2000013c

080027d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <TIM3_IRQHandler+0x10>)
 80027da:	f002 ff1b 	bl	8005614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200001f4 	.word	0x200001f4

080027e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <_sbrk+0x5c>)
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_sbrk+0x60>)
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <_sbrk+0x64>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <_sbrk+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d207      	bcs.n	8002828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002818:	f003 fb5e 	bl	8005ed8 <__errno>
 800281c:	4603      	mov	r3, r0
 800281e:	220c      	movs	r2, #12
 8002820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002822:	f04f 33ff 	mov.w	r3, #4294967295
 8002826:	e009      	b.n	800283c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <_sbrk+0x64>)
 8002838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20005000 	.word	0x20005000
 8002848:	00000400 	.word	0x00000400
 800284c:	20001394 	.word	0x20001394
 8002850:	200014e8 	.word	0x200014e8

08002854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <Reset_Handler>:
 8002860:	f7ff fff8 	bl	8002854 <SystemInit>
 8002864:	480b      	ldr	r0, [pc, #44]	; (8002894 <LoopFillZerobss+0xe>)
 8002866:	490c      	ldr	r1, [pc, #48]	; (8002898 <LoopFillZerobss+0x12>)
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <LoopFillZerobss+0x16>)
 800286a:	2300      	movs	r3, #0
 800286c:	e002      	b.n	8002874 <LoopCopyDataInit>

0800286e <CopyDataInit>:
 800286e:	58d4      	ldr	r4, [r2, r3]
 8002870:	50c4      	str	r4, [r0, r3]
 8002872:	3304      	adds	r3, #4

08002874 <LoopCopyDataInit>:
 8002874:	18c4      	adds	r4, r0, r3
 8002876:	428c      	cmp	r4, r1
 8002878:	d3f9      	bcc.n	800286e <CopyDataInit>
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <LoopFillZerobss+0x1a>)
 800287c:	4c09      	ldr	r4, [pc, #36]	; (80028a4 <LoopFillZerobss+0x1e>)
 800287e:	2300      	movs	r3, #0
 8002880:	e001      	b.n	8002886 <LoopFillZerobss>

08002882 <FillZerobss>:
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	3204      	adds	r2, #4

08002886 <LoopFillZerobss>:
 8002886:	42a2      	cmp	r2, r4
 8002888:	d3fb      	bcc.n	8002882 <FillZerobss>
 800288a:	f003 fb2b 	bl	8005ee4 <__libc_init_array>
 800288e:	f7ff fa93 	bl	8001db8 <main>
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000
 8002898:	20000068 	.word	0x20000068
 800289c:	0800693c 	.word	0x0800693c
 80028a0:	20000068 	.word	0x20000068
 80028a4:	200014e4 	.word	0x200014e4

080028a8 <ADC1_2_IRQHandler>:
 80028a8:	e7fe      	b.n	80028a8 <ADC1_2_IRQHandler>
	...

080028ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_Init+0x28>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_Init+0x28>)
 80028b6:	f043 0310 	orr.w	r3, r3, #16
 80028ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f001 fc5d 	bl	800417c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	200f      	movs	r0, #15
 80028c4:	f000 f808 	bl	80028d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff fdc2 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_InitTick+0x54>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_InitTick+0x58>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 fc75 	bl	80041e6 <HAL_SYSTICK_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d80a      	bhi.n	8002922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f001 fc3d 	bl	8004192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_InitTick+0x5c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	2000000c 	.word	0x2000000c
 8002930:	20000014 	.word	0x20000014
 8002934:	20000010 	.word	0x20000010

08002938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_IncTick+0x1c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x20>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <HAL_IncTick+0x20>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	20000014 	.word	0x20000014
 8002958:	20001398 	.word	0x20001398

0800295c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <HAL_GetTick+0x10>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20001398 	.word	0x20001398

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fff0 	bl	800295c <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffe0 	bl	800295c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000014 	.word	0x20000014

080029b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0be      	b.n	8002b58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fd5c 	bl	80024b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 faf5 	bl	8002fec <ADC_ConversionStop_Disable>
 8002a02:	4603      	mov	r3, r0
 8002a04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8099 	bne.w	8002b46 <HAL_ADC_Init+0x18e>
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 8095 	bne.w	8002b46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a24:	f023 0302 	bic.w	r3, r3, #2
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7b1b      	ldrb	r3, [r3, #12]
 8002a3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_Init+0xa2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d102      	bne.n	8002a60 <HAL_ADC_Init+0xa8>
 8002a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5e:	e000      	b.n	8002a62 <HAL_ADC_Init+0xaa>
 8002a60:	2300      	movs	r3, #0
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7d1b      	ldrb	r3, [r3, #20]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d119      	bne.n	8002aa4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7b1b      	ldrb	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	035a      	lsls	r2, r3, #13
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_ADC_Init+0x1a8>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad4:	d003      	beq.n	8002ade <HAL_ADC_Init+0x126>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d104      	bne.n	8002ae8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	051b      	lsls	r3, r3, #20
 8002ae6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_ADC_Init+0x1ac>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b22:	e018      	b.n	8002b56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f023 0312 	bic.w	r3, r3, #18
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b44:	e007      	b.n	8002b56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	ffe1f7fd 	.word	0xffe1f7fd
 8002b64:	ff1f0efe 	.word	0xff1f0efe

08002b68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a64      	ldr	r2, [pc, #400]	; (8002d10 <HAL_ADC_Start_DMA+0x1a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_Start_DMA+0x24>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a63      	ldr	r2, [pc, #396]	; (8002d14 <HAL_ADC_Start_DMA+0x1ac>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d106      	bne.n	8002b9a <HAL_ADC_Start_DMA+0x32>
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <HAL_ADC_Start_DMA+0x1a8>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 80b3 	bne.w	8002d00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_Start_DMA+0x40>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e0ae      	b.n	8002d06 <HAL_ADC_Start_DMA+0x19e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f9c1 	bl	8002f38 <ADC_Enable>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 809a 	bne.w	8002cf6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_ADC_Start_DMA+0x1ac>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_Start_DMA+0x84>
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_ADC_Start_DMA+0x1a8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d115      	bne.n	8002c18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d026      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c16:	e01d      	b.n	8002c54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a39      	ldr	r2, [pc, #228]	; (8002d10 <HAL_ADC_Start_DMA+0x1a8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_Start_DMA+0xd0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <HAL_ADC_Start_DMA+0x1ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10d      	bne.n	8002c54 <HAL_ADC_Start_DMA+0xec>
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_ADC_Start_DMA+0x1a8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d006      	beq.n	8002c6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f023 0206 	bic.w	r2, r3, #6
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_ADC_Start_DMA+0x1b0>)
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <HAL_ADC_Start_DMA+0x1b4>)
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <HAL_ADC_Start_DMA+0x1b8>)
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0202 	mvn.w	r2, #2
 8002c9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a18      	ldr	r0, [r3, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	334c      	adds	r3, #76	; 0x4c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f001 faf9 	bl	80042b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ccc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ce0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ce2:	e00f      	b.n	8002d04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cf2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cf4:	e006      	b.n	8002d04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002cfe:	e001      	b.n	8002d04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40012400 	.word	0x40012400
 8002d14:	40012800 	.word	0x40012800
 8002d18:	0800306f 	.word	0x0800306f
 8002d1c:	080030eb 	.word	0x080030eb
 8002d20:	08003107 	.word	0x08003107

08002d24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x20>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0dc      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x1da>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b06      	cmp	r3, #6
 8002d76:	d81c      	bhi.n	8002db2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b05      	subs	r3, #5
 8002d8a:	221f      	movs	r2, #31
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4019      	ands	r1, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b05      	subs	r3, #5
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	635a      	str	r2, [r3, #52]	; 0x34
 8002db0:	e03c      	b.n	8002e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d81c      	bhi.n	8002df4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b23      	subs	r3, #35	; 0x23
 8002dcc:	221f      	movs	r2, #31
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4019      	ands	r1, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b23      	subs	r3, #35	; 0x23
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
 8002df2:	e01b      	b.n	8002e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b41      	subs	r3, #65	; 0x41
 8002e06:	221f      	movs	r2, #31
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4019      	ands	r1, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b41      	subs	r3, #65	; 0x41
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d91c      	bls.n	8002e6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68d9      	ldr	r1, [r3, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	3b1e      	subs	r3, #30
 8002e46:	2207      	movs	r2, #7
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	4019      	ands	r1, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6898      	ldr	r0, [r3, #8]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b1e      	subs	r3, #30
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	e019      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	2207      	movs	r2, #7
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4019      	ands	r1, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6898      	ldr	r0, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eae:	2b11      	cmp	r3, #17
 8002eb0:	d132      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADC_ConfigChannel+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d125      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d126      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ed8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d11a      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	0c9a      	lsrs	r2, r3, #18
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef8:	e002      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f9      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x1b2>
 8002f06:	e007      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40012400 	.word	0x40012400
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	431bde83 	.word	0x431bde83

08002f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d040      	beq.n	8002fd8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <ADC_Enable+0xac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <ADC_Enable+0xb0>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	0c9b      	lsrs	r3, r3, #18
 8002f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f74:	e002      	b.n	8002f7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f9      	bne.n	8002f76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f82:	f7ff fceb 	bl	800295c <HAL_GetTick>
 8002f86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f88:	e01f      	b.n	8002fca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f8a:	f7ff fce7 	bl	800295c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d918      	bls.n	8002fca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d011      	beq.n	8002fca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f043 0210 	orr.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d1d8      	bne.n	8002f8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12e      	bne.n	8003064 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003016:	f7ff fca1 	bl	800295c <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800301c:	e01b      	b.n	8003056 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800301e:	f7ff fc9d 	bl	800295c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d914      	bls.n	8003056 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10d      	bne.n	8003056 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f043 0210 	orr.w	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e007      	b.n	8003066 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d0dc      	beq.n	800301e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d127      	bne.n	80030d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800309e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030a2:	d115      	bne.n	80030d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff fe27 	bl	8002d24 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030d6:	e004      	b.n	80030e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7fe fbdb 	bl	80018b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff fe02 	bl	8002d36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_ADCEx_Calibration_Start+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e097      	b.n	800328a <HAL_ADCEx_Calibration_Start+0x14e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff42 	bl	8002fec <ADC_ConversionStop_Disable>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fee3 	bl	8002f38 <ADC_Enable>
 8003172:	4603      	mov	r3, r0
 8003174:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f040 8081 	bne.w	8003280 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003186:	f023 0302 	bic.w	r3, r3, #2
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_ADCEx_Calibration_Start+0x158>)
 8003194:	681c      	ldr	r4, [r3, #0]
 8003196:	2002      	movs	r0, #2
 8003198:	f002 f89a 	bl	80052d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800319c:	4603      	mov	r3, r0
 800319e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80031a2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80031a4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80031a6:	e002      	b.n	80031ae <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031c4:	f7ff fbca 	bl	800295c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031ca:	e01b      	b.n	8003204 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031cc:	f7ff fbc6 	bl	800295c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b0a      	cmp	r3, #10
 80031d8:	d914      	bls.n	8003204 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00d      	beq.n	8003204 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f023 0312 	bic.w	r3, r3, #18
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e042      	b.n	800328a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1dc      	bne.n	80031cc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0204 	orr.w	r2, r2, #4
 8003220:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003222:	f7ff fb9b 	bl	800295c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003228:	e01b      	b.n	8003262 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800322a:	f7ff fb97 	bl	800295c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b0a      	cmp	r3, #10
 8003236:	d914      	bls.n	8003262 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	f023 0312 	bic.w	r3, r3, #18
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e013      	b.n	800328a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1dc      	bne.n	800322a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f023 0303 	bic.w	r3, r3, #3
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003288:	7dfb      	ldrb	r3, [r7, #23]
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	2000000c 	.word	0x2000000c

08003298 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0ed      	b.n	8003486 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff f964 	bl	8002584 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7ff fb46 	bl	800295c <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032d2:	e012      	b.n	80032fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032d4:	f7ff fb42 	bl	800295c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b0a      	cmp	r3, #10
 80032e0:	d90b      	bls.n	80032fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0c5      	b.n	8003486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0e5      	beq.n	80032d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0202 	bic.w	r2, r2, #2
 8003316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003318:	f7ff fb20 	bl	800295c <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800331e:	e012      	b.n	8003346 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003320:	f7ff fb1c 	bl	800295c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d90b      	bls.n	8003346 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09f      	b.n	8003486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e5      	bne.n	8003320 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7e1b      	ldrb	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e007      	b.n	800337e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7e5b      	ldrb	r3, [r3, #25]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d108      	bne.n	8003398 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7e9b      	ldrb	r3, [r3, #26]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d108      	bne.n	80033c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e007      	b.n	80033d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0220 	bic.w	r2, r2, #32
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7edb      	ldrb	r3, [r3, #27]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0210 	bic.w	r2, r2, #16
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	e007      	b.n	80033fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0210 	orr.w	r2, r2, #16
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7f1b      	ldrb	r3, [r3, #28]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d108      	bne.n	8003416 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0208 	orr.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f5b      	ldrb	r3, [r3, #29]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0204 	orr.w	r2, r2, #4
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e007      	b.n	8003450 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800348e:	b480      	push	{r7}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d003      	beq.n	80034b4 <HAL_CAN_ConfigFilter+0x26>
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	f040 80aa 	bne.w	8003608 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2201      	movs	r2, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d123      	bne.n	8003536 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	401a      	ands	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003510:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	3248      	adds	r2, #72	; 0x48
 8003516:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800352a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800352c:	6979      	ldr	r1, [r7, #20]
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	440b      	add	r3, r1
 8003534:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d122      	bne.n	8003584 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	431a      	orrs	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800355e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3248      	adds	r2, #72	; 0x48
 8003564:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003578:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	3348      	adds	r3, #72	; 0x48
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800359e:	e007      	b.n	80035b0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035ca:	e007      	b.n	80035dc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d107      	bne.n	80035f4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e006      	b.n	8003616 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d12e      	bne.n	8003692 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800364c:	f7ff f986 	bl	800295c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003652:	e012      	b.n	800367a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003654:	f7ff f982 	bl	800295c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b0a      	cmp	r3, #10
 8003660:	d90b      	bls.n	800367a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2205      	movs	r2, #5
 8003672:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e012      	b.n	80036a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e006      	b.n	80036a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d003      	beq.n	80036d4 <HAL_CAN_AddTxMessage+0x2c>
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f040 80ad 	bne.w	800382e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8095 	beq.w	800381e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036fe:	2201      	movs	r2, #1
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	409a      	lsls	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	6809      	ldr	r1, [r1, #0]
 800371e:	431a      	orrs	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3318      	adds	r3, #24
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	440b      	add	r3, r1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e00f      	b.n	800374c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003736:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800373c:	68f9      	ldr	r1, [r7, #12]
 800373e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003740:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3318      	adds	r3, #24
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	440b      	add	r3, r1
 800374a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3318      	adds	r3, #24
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	440b      	add	r3, r1
 800375c:	3304      	adds	r3, #4
 800375e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	7d1b      	ldrb	r3, [r3, #20]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d111      	bne.n	800378c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3318      	adds	r3, #24
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	6811      	ldr	r1, [r2, #0]
 800377c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3318      	adds	r3, #24
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	440b      	add	r3, r1
 8003788:	3304      	adds	r3, #4
 800378a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3307      	adds	r3, #7
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	061a      	lsls	r2, r3, #24
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3306      	adds	r3, #6
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3305      	adds	r3, #5
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	4313      	orrs	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	3204      	adds	r2, #4
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	4610      	mov	r0, r2
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	6811      	ldr	r1, [r2, #0]
 80037b4:	ea43 0200 	orr.w	r2, r3, r0
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	440b      	add	r3, r1
 80037be:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3303      	adds	r3, #3
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	061a      	lsls	r2, r3, #24
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3302      	adds	r3, #2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3301      	adds	r3, #1
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	4313      	orrs	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	4610      	mov	r0, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6811      	ldr	r1, [r2, #0]
 80037ea:	ea43 0200 	orr.w	r2, r3, r0
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	440b      	add	r3, r1
 80037f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3318      	adds	r3, #24
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4413      	add	r3, r2
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	6811      	ldr	r1, [r2, #0]
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3318      	adds	r3, #24
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	440b      	add	r3, r1
 8003818:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e00e      	b.n	800383c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e006      	b.n	800383c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3724      	adds	r7, #36	; 0x24
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003856:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d002      	beq.n	8003864 <HAL_CAN_AbortTxRequest+0x1e>
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d128      	bne.n	80038b6 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800387c:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003896:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038b0:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e006      	b.n	80038c4 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d002      	beq.n	80038ee <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d11d      	bne.n	800392a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800394a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d003      	beq.n	800395a <HAL_CAN_GetRxMessage+0x24>
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 8103 	bne.w	8003b60 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0f7      	b.n	8003b6e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0e8      	b.n	8003b6e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	331b      	adds	r3, #27
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4413      	add	r3, r2
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0204 	and.w	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	331b      	adds	r3, #27
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4413      	add	r3, r2
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0d5b      	lsrs	r3, r3, #21
 80039ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	331b      	adds	r3, #27
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4413      	add	r3, r2
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	331b      	adds	r3, #27
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0202 	and.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	331b      	adds	r3, #27
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	e00b      	b.n	8003a3a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	331b      	adds	r3, #27
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	331b      	adds	r3, #27
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	331b      	adds	r3, #27
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0c1b      	lsrs	r3, r3, #16
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0a1a      	lsrs	r2, r3, #8
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0c1a      	lsrs	r2, r3, #16
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	3302      	adds	r3, #2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0e1a      	lsrs	r2, r3, #24
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	3303      	adds	r3, #3
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0a1a      	lsrs	r2, r3, #8
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	3305      	adds	r3, #5
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0c1a      	lsrs	r2, r3, #16
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3306      	adds	r3, #6
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e1a      	lsrs	r2, r3, #24
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3307      	adds	r3, #7
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0220 	orr.w	r2, r2, #32
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	e007      	b.n	8003b5c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0220 	orr.w	r2, r2, #32
 8003b5a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e006      	b.n	8003b6e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b88:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <HAL_CAN_ActivateNotification+0x1e>
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d109      	bne.n	8003baa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6959      	ldr	r1, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e006      	b.n	8003bb8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07c      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f983 	bl	8003f30 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c2a:	e016      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	e00c      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
 8003c52:	e002      	b.n	8003c5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f986 	bl	8003f66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d024      	beq.n	8003cae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f962 	bl	8003f42 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c7e:	e016      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	e00c      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca6:	e002      	b.n	8003cae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f965 	bl	8003f78 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d024      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f941 	bl	8003f54 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cd2:	e016      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e00c      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	e002      	b.n	8003d02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f944 	bl	8003f8a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2210      	movs	r2, #16
 8003d24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2208      	movs	r2, #8
 8003d40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f92a 	bl	8003f9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fd7d 	bl	8001860 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2210      	movs	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2208      	movs	r2, #8
 8003da4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f901 	bl	8003fae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fd fd57 	bl	8001878 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2210      	movs	r2, #16
 8003de4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8ea 	bl	8003fc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2208      	movs	r2, #8
 8003e06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8e2 	bl	8003fd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d07b      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d072      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f043 0302 	orr.w	r3, r3, #2
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d043      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03e      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d02b      	beq.n	8003eec <HAL_CAN_IRQHandler+0x32a>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d82e      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003e98:	2b50      	cmp	r3, #80	; 0x50
 8003e9a:	d022      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x320>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d82a      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d019      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x316>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d826      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003ea8:	2b30      	cmp	r3, #48	; 0x30
 8003eaa:	d010      	beq.n	8003ece <HAL_CAN_IRQHandler+0x30c>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d822      	bhi.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d002      	beq.n	8003eba <HAL_CAN_IRQHandler+0x2f8>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d005      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003eb8:	e01d      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f043 0308 	orr.w	r3, r3, #8
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec2:	e019      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f043 0310 	orr.w	r3, r3, #16
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ecc:	e014      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ed6:	e00f      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee0:	e00a      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eea:	e005      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ef4:	e000      	b.n	8003ef8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ef6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fcb4 	bl	8001890 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr

08003f8a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <__NVIC_SetPriorityGrouping>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800400c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	60d3      	str	r3, [r2, #12]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_GetPriorityGrouping>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__NVIC_GetPriorityGrouping+0x18>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	f003 0307 	and.w	r3, r3, #7
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_EnableIRQ>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	2b00      	cmp	r3, #0
 8004058:	db0b      	blt.n	8004072 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	4906      	ldr	r1, [pc, #24]	; (800407c <__NVIC_EnableIRQ+0x34>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2001      	movs	r0, #1
 800406a:	fa00 f202 	lsl.w	r2, r0, r2
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	e000e100 	.word	0xe000e100

08004080 <__NVIC_SetPriority>:
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800408c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db0a      	blt.n	80040aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	490c      	ldr	r1, [pc, #48]	; (80040cc <__NVIC_SetPriority+0x4c>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	440b      	add	r3, r1
 80040a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040a8:	e00a      	b.n	80040c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4908      	ldr	r1, [pc, #32]	; (80040d0 <__NVIC_SetPriority+0x50>)
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	3b04      	subs	r3, #4
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	440b      	add	r3, r1
 80040be:	761a      	strb	r2, [r3, #24]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000e100 	.word	0xe000e100
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <NVIC_EncodePriority>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f1c3 0307 	rsb	r3, r3, #7
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	bf28      	it	cs
 80040f2:	2304      	movcs	r3, #4
 80040f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d902      	bls.n	8004104 <NVIC_EncodePriority+0x30>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3b03      	subs	r3, #3
 8004102:	e000      	b.n	8004106 <NVIC_EncodePriority+0x32>
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	f04f 32ff 	mov.w	r2, #4294967295
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800411c:	f04f 31ff 	mov.w	r1, #4294967295
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43d9      	mvns	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	4313      	orrs	r3, r2
}
 800412e:	4618      	mov	r0, r3
 8004130:	3724      	adds	r7, #36	; 0x24
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004148:	d301      	bcc.n	800414e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800414a:	2301      	movs	r3, #1
 800414c:	e00f      	b.n	800416e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <SysTick_Config+0x40>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004156:	210f      	movs	r1, #15
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	f7ff ff90 	bl	8004080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <SysTick_Config+0x40>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <SysTick_Config+0x40>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	e000e010 	.word	0xe000e010

0800417c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff2d 	bl	8003fe4 <__NVIC_SetPriorityGrouping>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	4603      	mov	r3, r0
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041a4:	f7ff ff42 	bl	800402c <__NVIC_GetPriorityGrouping>
 80041a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff ff90 	bl	80040d4 <NVIC_EncodePriority>
 80041b4:	4602      	mov	r2, r0
 80041b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff5f 	bl	8004080 <__NVIC_SetPriority>
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff35 	bl	8004048 <__NVIC_EnableIRQ>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffa2 	bl	8004138 <SysTick_Config>
 80041f4:	4603      	mov	r3, r0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e043      	b.n	800429e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_DMA_Init+0xa8>)
 800421e:	4413      	add	r3, r2
 8004220:	4a22      	ldr	r2, [pc, #136]	; (80042ac <HAL_DMA_Init+0xac>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	009a      	lsls	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_DMA_Init+0xb0>)
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800424a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800424e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	bffdfff8 	.word	0xbffdfff8
 80042ac:	cccccccd 	.word	0xcccccccd
 80042b0:	40020000 	.word	0x40020000

080042b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_DMA_Start_IT+0x20>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e04b      	b.n	800436c <HAL_DMA_Start_IT+0xb8>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d13a      	bne.n	800435e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f937 	bl	8004580 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 020e 	orr.w	r2, r2, #14
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e00f      	b.n	800434c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 020a 	orr.w	r2, r2, #10
 800434a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e005      	b.n	800436a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004366:	2302      	movs	r3, #2
 8004368:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	2204      	movs	r2, #4
 8004392:	409a      	lsls	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04f      	beq.n	800443c <HAL_DMA_IRQHandler+0xc8>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04a      	beq.n	800443c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a66      	ldr	r2, [pc, #408]	; (8004564 <HAL_DMA_IRQHandler+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d029      	beq.n	8004422 <HAL_DMA_IRQHandler+0xae>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a65      	ldr	r2, [pc, #404]	; (8004568 <HAL_DMA_IRQHandler+0x1f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <HAL_DMA_IRQHandler+0xaa>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a63      	ldr	r2, [pc, #396]	; (800456c <HAL_DMA_IRQHandler+0x1f8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01a      	beq.n	8004418 <HAL_DMA_IRQHandler+0xa4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a62      	ldr	r2, [pc, #392]	; (8004570 <HAL_DMA_IRQHandler+0x1fc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d012      	beq.n	8004412 <HAL_DMA_IRQHandler+0x9e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a60      	ldr	r2, [pc, #384]	; (8004574 <HAL_DMA_IRQHandler+0x200>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00a      	beq.n	800440c <HAL_DMA_IRQHandler+0x98>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5f      	ldr	r2, [pc, #380]	; (8004578 <HAL_DMA_IRQHandler+0x204>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d102      	bne.n	8004406 <HAL_DMA_IRQHandler+0x92>
 8004400:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004404:	e00e      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 8004406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800440a:	e00b      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 800440c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004410:	e008      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 8004412:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004416:	e005      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 8004418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441c:	e002      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 800441e:	2340      	movs	r3, #64	; 0x40
 8004420:	e000      	b.n	8004424 <HAL_DMA_IRQHandler+0xb0>
 8004422:	2304      	movs	r3, #4
 8004424:	4a55      	ldr	r2, [pc, #340]	; (800457c <HAL_DMA_IRQHandler+0x208>)
 8004426:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8094 	beq.w	800455a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800443a:	e08e      	b.n	800455a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2202      	movs	r2, #2
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d056      	beq.n	80044fa <HAL_DMA_IRQHandler+0x186>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d051      	beq.n	80044fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 020a 	bic.w	r2, r2, #10
 8004472:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_DMA_IRQHandler+0x1f0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d029      	beq.n	80044da <HAL_DMA_IRQHandler+0x166>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a37      	ldr	r2, [pc, #220]	; (8004568 <HAL_DMA_IRQHandler+0x1f4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d022      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x162>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <HAL_DMA_IRQHandler+0x1f8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x15c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a34      	ldr	r2, [pc, #208]	; (8004570 <HAL_DMA_IRQHandler+0x1fc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d012      	beq.n	80044ca <HAL_DMA_IRQHandler+0x156>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_DMA_IRQHandler+0x200>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x150>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_DMA_IRQHandler+0x204>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d102      	bne.n	80044be <HAL_DMA_IRQHandler+0x14a>
 80044b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044bc:	e00e      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c2:	e00b      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c8:	e008      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ce:	e005      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d4:	e002      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044d6:	2320      	movs	r3, #32
 80044d8:	e000      	b.n	80044dc <HAL_DMA_IRQHandler+0x168>
 80044da:	2302      	movs	r3, #2
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <HAL_DMA_IRQHandler+0x208>)
 80044de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d034      	beq.n	800455a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80044f8:	e02f      	b.n	800455a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2208      	movs	r2, #8
 8004500:	409a      	lsls	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d028      	beq.n	800455c <HAL_DMA_IRQHandler+0x1e8>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d023      	beq.n	800455c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 020e 	bic.w	r2, r2, #14
 8004522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
    }
  }
  return;
 800455a:	bf00      	nop
 800455c:	bf00      	nop
}
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40020008 	.word	0x40020008
 8004568:	4002001c 	.word	0x4002001c
 800456c:	40020030 	.word	0x40020030
 8004570:	40020044 	.word	0x40020044
 8004574:	40020058 	.word	0x40020058
 8004578:	4002006c 	.word	0x4002006c
 800457c:	40020000 	.word	0x40020000

08004580 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d108      	bne.n	80045c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045be:	e007      	b.n	80045d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b480      	push	{r7}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045ea:	2300      	movs	r3, #0
 80045ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ee:	e169      	b.n	80048c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045f0:	2201      	movs	r2, #1
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	f040 8158 	bne.w	80048be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4a9a      	ldr	r2, [pc, #616]	; (800487c <HAL_GPIO_Init+0x2a0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d05e      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
 8004618:	4a98      	ldr	r2, [pc, #608]	; (800487c <HAL_GPIO_Init+0x2a0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d875      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 800461e:	4a98      	ldr	r2, [pc, #608]	; (8004880 <HAL_GPIO_Init+0x2a4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d058      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
 8004624:	4a96      	ldr	r2, [pc, #600]	; (8004880 <HAL_GPIO_Init+0x2a4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d86f      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 800462a:	4a96      	ldr	r2, [pc, #600]	; (8004884 <HAL_GPIO_Init+0x2a8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d052      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
 8004630:	4a94      	ldr	r2, [pc, #592]	; (8004884 <HAL_GPIO_Init+0x2a8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d869      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 8004636:	4a94      	ldr	r2, [pc, #592]	; (8004888 <HAL_GPIO_Init+0x2ac>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04c      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
 800463c:	4a92      	ldr	r2, [pc, #584]	; (8004888 <HAL_GPIO_Init+0x2ac>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d863      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 8004642:	4a92      	ldr	r2, [pc, #584]	; (800488c <HAL_GPIO_Init+0x2b0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d046      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
 8004648:	4a90      	ldr	r2, [pc, #576]	; (800488c <HAL_GPIO_Init+0x2b0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d85d      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 800464e:	2b12      	cmp	r3, #18
 8004650:	d82a      	bhi.n	80046a8 <HAL_GPIO_Init+0xcc>
 8004652:	2b12      	cmp	r3, #18
 8004654:	d859      	bhi.n	800470a <HAL_GPIO_Init+0x12e>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <HAL_GPIO_Init+0x80>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	080046d7 	.word	0x080046d7
 8004660:	080046b1 	.word	0x080046b1
 8004664:	080046c3 	.word	0x080046c3
 8004668:	08004705 	.word	0x08004705
 800466c:	0800470b 	.word	0x0800470b
 8004670:	0800470b 	.word	0x0800470b
 8004674:	0800470b 	.word	0x0800470b
 8004678:	0800470b 	.word	0x0800470b
 800467c:	0800470b 	.word	0x0800470b
 8004680:	0800470b 	.word	0x0800470b
 8004684:	0800470b 	.word	0x0800470b
 8004688:	0800470b 	.word	0x0800470b
 800468c:	0800470b 	.word	0x0800470b
 8004690:	0800470b 	.word	0x0800470b
 8004694:	0800470b 	.word	0x0800470b
 8004698:	0800470b 	.word	0x0800470b
 800469c:	0800470b 	.word	0x0800470b
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	4a79      	ldr	r2, [pc, #484]	; (8004890 <HAL_GPIO_Init+0x2b4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046ae:	e02c      	b.n	800470a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	623b      	str	r3, [r7, #32]
          break;
 80046b6:	e029      	b.n	800470c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	3304      	adds	r3, #4
 80046be:	623b      	str	r3, [r7, #32]
          break;
 80046c0:	e024      	b.n	800470c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	3308      	adds	r3, #8
 80046c8:	623b      	str	r3, [r7, #32]
          break;
 80046ca:	e01f      	b.n	800470c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	330c      	adds	r3, #12
 80046d2:	623b      	str	r3, [r7, #32]
          break;
 80046d4:	e01a      	b.n	800470c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046de:	2304      	movs	r3, #4
 80046e0:	623b      	str	r3, [r7, #32]
          break;
 80046e2:	e013      	b.n	800470c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046ec:	2308      	movs	r3, #8
 80046ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	611a      	str	r2, [r3, #16]
          break;
 80046f6:	e009      	b.n	800470c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046f8:	2308      	movs	r3, #8
 80046fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	615a      	str	r2, [r3, #20]
          break;
 8004702:	e003      	b.n	800470c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004704:	2300      	movs	r3, #0
 8004706:	623b      	str	r3, [r7, #32]
          break;
 8004708:	e000      	b.n	800470c <HAL_GPIO_Init+0x130>
          break;
 800470a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2bff      	cmp	r3, #255	; 0xff
 8004710:	d801      	bhi.n	8004716 <HAL_GPIO_Init+0x13a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	e001      	b.n	800471a <HAL_GPIO_Init+0x13e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2bff      	cmp	r3, #255	; 0xff
 8004720:	d802      	bhi.n	8004728 <HAL_GPIO_Init+0x14c>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	e002      	b.n	800472e <HAL_GPIO_Init+0x152>
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	3b08      	subs	r3, #8
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	210f      	movs	r1, #15
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	fa01 f303 	lsl.w	r3, r1, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	401a      	ands	r2, r3
 8004740:	6a39      	ldr	r1, [r7, #32]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	431a      	orrs	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80b1 	beq.w	80048be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800475c:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_GPIO_Init+0x2b8>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	4a4c      	ldr	r2, [pc, #304]	; (8004894 <HAL_GPIO_Init+0x2b8>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6193      	str	r3, [r2, #24]
 8004768:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_GPIO_Init+0x2b8>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_GPIO_Init+0x2bc>)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	220f      	movs	r2, #15
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a40      	ldr	r2, [pc, #256]	; (800489c <HAL_GPIO_Init+0x2c0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_GPIO_Init+0x1ec>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a3f      	ldr	r2, [pc, #252]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00d      	beq.n	80047c4 <HAL_GPIO_Init+0x1e8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <HAL_GPIO_Init+0x2c8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <HAL_GPIO_Init+0x1e4>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3d      	ldr	r2, [pc, #244]	; (80048a8 <HAL_GPIO_Init+0x2cc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <HAL_GPIO_Init+0x1e0>
 80047b8:	2303      	movs	r3, #3
 80047ba:	e006      	b.n	80047ca <HAL_GPIO_Init+0x1ee>
 80047bc:	2304      	movs	r3, #4
 80047be:	e004      	b.n	80047ca <HAL_GPIO_Init+0x1ee>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e002      	b.n	80047ca <HAL_GPIO_Init+0x1ee>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_GPIO_Init+0x1ee>
 80047c8:	2300      	movs	r3, #0
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	f002 0203 	and.w	r2, r2, #3
 80047d0:	0092      	lsls	r2, r2, #2
 80047d2:	4093      	lsls	r3, r2
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047da:	492f      	ldr	r1, [pc, #188]	; (8004898 <HAL_GPIO_Init+0x2bc>)
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	492c      	ldr	r1, [pc, #176]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004802:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	43db      	mvns	r3, r3
 800480a:	4928      	ldr	r1, [pc, #160]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800480c:	4013      	ands	r3, r2
 800480e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800481c:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	4922      	ldr	r1, [pc, #136]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	60cb      	str	r3, [r1, #12]
 8004828:	e006      	b.n	8004838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	43db      	mvns	r3, r3
 8004832:	491e      	ldr	r1, [pc, #120]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004834:	4013      	ands	r3, r2
 8004836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4918      	ldr	r1, [pc, #96]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004852:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	43db      	mvns	r3, r3
 800485a:	4914      	ldr	r1, [pc, #80]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800485c:	4013      	ands	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d021      	beq.n	80048b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e021      	b.n	80048be <HAL_GPIO_Init+0x2e2>
 800487a:	bf00      	nop
 800487c:	10320000 	.word	0x10320000
 8004880:	10310000 	.word	0x10310000
 8004884:	10220000 	.word	0x10220000
 8004888:	10210000 	.word	0x10210000
 800488c:	10120000 	.word	0x10120000
 8004890:	10110000 	.word	0x10110000
 8004894:	40021000 	.word	0x40021000
 8004898:	40010000 	.word	0x40010000
 800489c:	40010800 	.word	0x40010800
 80048a0:	40010c00 	.word	0x40010c00
 80048a4:	40011000 	.word	0x40011000
 80048a8:	40011400 	.word	0x40011400
 80048ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_GPIO_Init+0x304>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	4909      	ldr	r1, [pc, #36]	; (80048e0 <HAL_GPIO_Init+0x304>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	3301      	adds	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	fa22 f303 	lsr.w	r3, r2, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f47f ae8e 	bne.w	80045f0 <HAL_GPIO_Init+0x14>
  }
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	372c      	adds	r7, #44	; 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e001      	b.n	8004906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800492e:	e003      	b.n	8004938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
	...

08004944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e272      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8087 	beq.w	8004a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004964:	4b92      	ldr	r3, [pc, #584]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 030c 	and.w	r3, r3, #12
 800496c:	2b04      	cmp	r3, #4
 800496e:	d00c      	beq.n	800498a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004970:	4b8f      	ldr	r3, [pc, #572]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d112      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
 800497c:	4b8c      	ldr	r3, [pc, #560]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d10b      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498a:	4b89      	ldr	r3, [pc, #548]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06c      	beq.n	8004a70 <HAL_RCC_OscConfig+0x12c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d168      	bne.n	8004a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e24c      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x76>
 80049ac:	4b80      	ldr	r3, [pc, #512]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a7f      	ldr	r2, [pc, #508]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e02e      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x98>
 80049c2:	4b7b      	ldr	r3, [pc, #492]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7a      	ldr	r2, [pc, #488]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b78      	ldr	r3, [pc, #480]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a77      	ldr	r2, [pc, #476]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e01d      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0xbc>
 80049e6:	4b72      	ldr	r3, [pc, #456]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a71      	ldr	r2, [pc, #452]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0xd4>
 8004a00:	4b6b      	ldr	r3, [pc, #428]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a6a      	ldr	r2, [pc, #424]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b68      	ldr	r3, [pc, #416]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a67      	ldr	r2, [pc, #412]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fd ff9c 	bl	800295c <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fd ff98 	bl	800295c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e200      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3a:	4b5d      	ldr	r3, [pc, #372]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0xe4>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd ff88 	bl	800295c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fd ff84 	bl	800295c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e1ec      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a62:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x10c>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d063      	beq.n	8004b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a8a:	4b49      	ldr	r3, [pc, #292]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d11c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x18c>
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d116      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RCC_OscConfig+0x176>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e1c0      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4939      	ldr	r1, [pc, #228]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ace:	e03a      	b.n	8004b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad8:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <HAL_RCC_OscConfig+0x270>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fd ff3d 	bl	800295c <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae6:	f7fd ff39 	bl	800295c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1a1      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af8:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b04:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4927      	ldr	r1, [pc, #156]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]
 8004b18:	e015      	b.n	8004b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd ff1c 	bl	800295c <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b28:	f7fd ff18 	bl	800295c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e180      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03a      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d019      	beq.n	8004b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b60:	f7fd fefc 	bl	800295c <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fd fef8 	bl	800295c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e160      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b86:	2001      	movs	r0, #1
 8004b88:	f000 face 	bl	8005128 <RCC_Delay>
 8004b8c:	e01c      	b.n	8004bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fd fee2 	bl	800295c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9a:	e00f      	b.n	8004bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fd fede 	bl	800295c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d908      	bls.n	8004bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e146      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	42420000 	.word	0x42420000
 8004bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	4b92      	ldr	r3, [pc, #584]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e9      	bne.n	8004b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a6 	beq.w	8004d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b8b      	ldr	r3, [pc, #556]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10d      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	4b88      	ldr	r3, [pc, #544]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	4a87      	ldr	r2, [pc, #540]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	61d3      	str	r3, [r2, #28]
 8004bf2:	4b85      	ldr	r3, [pc, #532]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	4b82      	ldr	r3, [pc, #520]	; (8004e0c <HAL_RCC_OscConfig+0x4c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d118      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0e:	4b7f      	ldr	r3, [pc, #508]	; (8004e0c <HAL_RCC_OscConfig+0x4c8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7e      	ldr	r2, [pc, #504]	; (8004e0c <HAL_RCC_OscConfig+0x4c8>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fe9f 	bl	800295c <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fd fe9b 	bl	800295c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	; 0x64
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e103      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	4b75      	ldr	r3, [pc, #468]	; (8004e0c <HAL_RCC_OscConfig+0x4c8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x312>
 8004c48:	4b6f      	ldr	r3, [pc, #444]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4a6e      	ldr	r2, [pc, #440]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6213      	str	r3, [r2, #32]
 8004c54:	e02d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x36e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x334>
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4a69      	ldr	r2, [pc, #420]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6213      	str	r3, [r2, #32]
 8004c6a:	4b67      	ldr	r3, [pc, #412]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4a66      	ldr	r2, [pc, #408]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	6213      	str	r3, [r2, #32]
 8004c76:	e01c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x36e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCC_OscConfig+0x356>
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	4a60      	ldr	r2, [pc, #384]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	6213      	str	r3, [r2, #32]
 8004c8c:	4b5e      	ldr	r3, [pc, #376]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4a5d      	ldr	r2, [pc, #372]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6213      	str	r3, [r2, #32]
 8004c98:	e00b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x36e>
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4a5a      	ldr	r2, [pc, #360]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6213      	str	r3, [r2, #32]
 8004ca6:	4b58      	ldr	r3, [pc, #352]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	4a57      	ldr	r2, [pc, #348]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d015      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fd fe4f 	bl	800295c <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fe4b 	bl	800295c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0b1      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	4b4b      	ldr	r3, [pc, #300]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ee      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x37e>
 8004ce4:	e014      	b.n	8004d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fe39 	bl	800295c <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fe35 	bl	800295c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e09b      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d04:	4b40      	ldr	r3, [pc, #256]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4b3c      	ldr	r3, [pc, #240]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8087 	beq.w	8004e3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d2c:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d061      	beq.n	8004dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d146      	bne.n	8004dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b33      	ldr	r3, [pc, #204]	; (8004e10 <HAL_RCC_OscConfig+0x4cc>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fd fe09 	bl	800295c <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd fe05 	bl	800295c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e06d      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d60:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d108      	bne.n	8004d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d76:	4b24      	ldr	r3, [pc, #144]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4921      	ldr	r1, [pc, #132]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d88:	4b1f      	ldr	r3, [pc, #124]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a19      	ldr	r1, [r3, #32]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	491b      	ldr	r1, [pc, #108]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fd fdd9 	bl	800295c <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fd fdd5 	bl	800295c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e03d      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x46a>
 8004dcc:	e035      	b.n	8004e3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fd fdc2 	bl	800295c <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd fdbe 	bl	800295c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e026      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x498>
 8004dfa:	e01e      	b.n	8004e3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d107      	bne.n	8004e14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e019      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d106      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0d0      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d910      	bls.n	8004e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b67      	ldr	r3, [pc, #412]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 0207 	bic.w	r2, r3, #7
 8004e72:	4965      	ldr	r1, [pc, #404]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b63      	ldr	r3, [pc, #396]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0b8      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d020      	beq.n	8004eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea4:	4b59      	ldr	r3, [pc, #356]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a58      	ldr	r2, [pc, #352]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b50      	ldr	r3, [pc, #320]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	494d      	ldr	r1, [pc, #308]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d040      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d115      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e07f      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e073      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	4b3d      	ldr	r3, [pc, #244]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06b      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4936      	ldr	r1, [pc, #216]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f38:	f7fd fd10 	bl	800295c <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f40:	f7fd fd0c 	bl	800295c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e053      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 020c 	and.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1eb      	bne.n	8004f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d210      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 0207 	bic.w	r2, r3, #7
 8004f7e:	4922      	ldr	r1, [pc, #136]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e032      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa4:	4b19      	ldr	r3, [pc, #100]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4916      	ldr	r1, [pc, #88]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	490e      	ldr	r1, [pc, #56]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fd6:	f000 f821 	bl	800501c <HAL_RCC_GetSysClockFreq>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	490a      	ldr	r1, [pc, #40]	; (8005010 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe8:	5ccb      	ldrb	r3, [r1, r3]
 8004fea:	fa22 f303 	lsr.w	r3, r2, r3
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCC_ClockConfig+0x1cc>)
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_ClockConfig+0x1d0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fd fc6e 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40022000 	.word	0x40022000
 800500c:	40021000 	.word	0x40021000
 8005010:	080068c0 	.word	0x080068c0
 8005014:	2000000c 	.word	0x2000000c
 8005018:	20000010 	.word	0x20000010

0800501c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d002      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0x30>
 8005046:	2b08      	cmp	r3, #8
 8005048:	d003      	beq.n	8005052 <HAL_RCC_GetSysClockFreq+0x36>
 800504a:	e027      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800504e:	613b      	str	r3, [r7, #16]
      break;
 8005050:	e027      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	0c9b      	lsrs	r3, r3, #18
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800505c:	5cd3      	ldrb	r3, [r2, r3]
 800505e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d010      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	0c5b      	lsrs	r3, r3, #17
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	4a11      	ldr	r2, [pc, #68]	; (80050bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005076:	5cd3      	ldrb	r3, [r2, r3]
 8005078:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800507e:	fb03 f202 	mul.w	r2, r3, r2
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e004      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	613b      	str	r3, [r7, #16]
      break;
 800509a:	e002      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800509e:	613b      	str	r3, [r7, #16]
      break;
 80050a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a2:	693b      	ldr	r3, [r7, #16]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	371c      	adds	r7, #28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	080068d8 	.word	0x080068d8
 80050bc:	080068e8 	.word	0x080068e8
 80050c0:	003d0900 	.word	0x003d0900

080050c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050dc:	f7ff fff2 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	0a1b      	lsrs	r3, r3, #8
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4903      	ldr	r1, [pc, #12]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	080068d0 	.word	0x080068d0

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005104:	f7ff ffde 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4903      	ldr	r1, [pc, #12]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	080068d0 	.word	0x080068d0

08005128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <RCC_Delay+0x34>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <RCC_Delay+0x38>)
 8005136:	fba2 2303 	umull	r2, r3, r2, r3
 800513a:	0a5b      	lsrs	r3, r3, #9
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005144:	bf00      	nop
  }
  while (Delay --);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f9      	bne.n	8005144 <RCC_Delay+0x1c>
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr
 800515c:	2000000c 	.word	0x2000000c
 8005160:	10624dd3 	.word	0x10624dd3

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d07d      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005184:	4b4f      	ldr	r3, [pc, #316]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	4a4b      	ldr	r2, [pc, #300]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	61d3      	str	r3, [r2, #28]
 800519c:	4b49      	ldr	r3, [pc, #292]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4b46      	ldr	r3, [pc, #280]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d118      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a42      	ldr	r2, [pc, #264]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c4:	f7fd fbca 	bl	800295c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ca:	e008      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051cc:	f7fd fbc6 	bl	800295c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e06d      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051de:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02e      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	429a      	cmp	r2, r3
 8005206:	d027      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005208:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005210:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005212:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800521e:	4a29      	ldr	r2, [pc, #164]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d014      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fd fb95 	bl	800295c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	e00a      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fd fb91 	bl	800295c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e036      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ee      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4917      	ldr	r1, [pc, #92]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005266:	4313      	orrs	r3, r2
 8005268:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800527a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	490b      	ldr	r1, [pc, #44]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0310 	and.w	r3, r3, #16
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4904      	ldr	r1, [pc, #16]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40007000 	.word	0x40007000
 80052cc:	42420440 	.word	0x42420440

080052d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	f200 808a 	bhi.w	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d045      	beq.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d075      	beq.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005306:	e082      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005308:	4b46      	ldr	r3, [pc, #280]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800530e:	4b45      	ldr	r3, [pc, #276]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d07b      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	0c9b      	lsrs	r3, r3, #18
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	4a41      	ldr	r2, [pc, #260]	; (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005332:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	0c5b      	lsrs	r3, r3, #17
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800534c:	4a38      	ldr	r2, [pc, #224]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	fbb2 f2f3 	udiv	r2, r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e004      	b.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4a34      	ldr	r2, [pc, #208]	; (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005368:	4b2e      	ldr	r3, [pc, #184]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005374:	d102      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	61bb      	str	r3, [r7, #24]
      break;
 800537a:	e04a      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	61bb      	str	r3, [r7, #24]
      break;
 800538a:	e042      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d108      	bne.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80053a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e01f      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ba:	d109      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80053bc:	4b19      	ldr	r3, [pc, #100]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80053c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e00f      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d11c      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d016      	beq.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80053e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053ec:	61bb      	str	r3, [r7, #24]
      break;
 80053ee:	e012      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80053f0:	e011      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80053f2:	f7ff fe85 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0b9b      	lsrs	r3, r3, #14
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	61bb      	str	r3, [r7, #24]
      break;
 800540c:	e004      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800540e:	bf00      	nop
 8005410:	e002      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005412:	bf00      	nop
 8005414:	e000      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005416:	bf00      	nop
    }
  }
  return (frequency);
 8005418:	69bb      	ldr	r3, [r7, #24]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	080068ec 	.word	0x080068ec
 800542c:	080068fc 	.word	0x080068fc
 8005430:	007a1200 	.word	0x007a1200
 8005434:	003d0900 	.word	0x003d0900
 8005438:	aaaaaaab 	.word	0xaaaaaaab

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e041      	b.n	80054d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fd f8e2 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 fabe 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e032      	b.n	800555a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIM_Base_Start+0x88>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_Base_Start+0x48>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d009      	beq.n	8005524 <HAL_TIM_Base_Start+0x48>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a14      	ldr	r2, [pc, #80]	; (8005568 <HAL_TIM_Base_Start+0x8c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_Base_Start+0x48>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_TIM_Base_Start+0x90>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d111      	bne.n	8005548 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b06      	cmp	r3, #6
 8005534:	d010      	beq.n	8005558 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	e007      	b.n	8005558 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e03a      	b.n	80055fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_TIM_Base_Start_IT+0x98>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x58>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b2:	d009      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x58>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a14      	ldr	r2, [pc, #80]	; (800560c <HAL_TIM_Base_Start_IT+0x9c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x58>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a13      	ldr	r2, [pc, #76]	; (8005610 <HAL_TIM_Base_Start_IT+0xa0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d111      	bne.n	80055ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d010      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e007      	b.n	80055fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800

08005614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0202 	mvn.w	r2, #2
 8005640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9b4 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9a7 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9b6 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b04      	cmp	r3, #4
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0204 	mvn.w	r2, #4
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f98a 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f97d 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f98c 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0208 	mvn.w	r2, #8
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f960 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f953 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f962 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b10      	cmp	r3, #16
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b10      	cmp	r3, #16
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0210 	mvn.w	r2, #16
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2208      	movs	r2, #8
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f936 	bl	80059c4 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f929 	bl	80059b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f938 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0201 	mvn.w	r2, #1
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc fe3e 	bl	8002414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b80      	cmp	r3, #128	; 0x80
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa7b 	bl	8005cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8fc 	bl	80059e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b20      	cmp	r3, #32
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0220 	mvn.w	r2, #32
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa46 	bl	8005ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e0b4      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x186>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xd4>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	f000 8086 	beq.w	8005996 <HAL_TIM_ConfigClockSource+0x172>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xa6>
 8005894:	2b70      	cmp	r3, #112	; 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x11a>
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xfa>
 80058a4:	2b50      	cmp	r3, #80	; 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x13a>
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058da:	f000 f968 	bl	8005bae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005908:	f000 f951 	bl	8005bae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	461a      	mov	r2, r3
 800592c:	f000 f8c8 	bl	8005ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f91f 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 800593c:	e02c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800594a:	461a      	mov	r2, r3
 800594c:	f000 f8e6 	bl	8005b1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f90f 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 800595c:	e01c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596a:	461a      	mov	r2, r3
 800596c:	f000 f8a8 	bl	8005ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f8ff 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 800597c:	e00c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 f8f6 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 800598e:	e003      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
	...

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <TIM_Base_SetConfig+0xb8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x30>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x30>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a26      	ldr	r2, [pc, #152]	; (8005ab8 <TIM_Base_SetConfig+0xbc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x30>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a25      	ldr	r2, [pc, #148]	; (8005abc <TIM_Base_SetConfig+0xc0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <TIM_Base_SetConfig+0xb8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <TIM_Base_SetConfig+0xbc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x62>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <TIM_Base_SetConfig+0xc0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a07      	ldr	r2, [pc, #28]	; (8005ab4 <TIM_Base_SetConfig+0xb8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800

08005ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 030a 	bic.w	r3, r3, #10
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0210 	bic.w	r2, r3, #16
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	031b      	lsls	r3, r3, #12
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f043 0307 	orr.w	r3, r3, #7
 8005b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	609a      	str	r2, [r3, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	021a      	lsls	r2, r3, #8
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	609a      	str	r2, [r3, #8]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e046      	b.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00e      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c50:	d009      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d10c      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800

08005ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e042      	b.n	8005d64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc fce6 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f82b 	bl	8005d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005da6:	f023 030c 	bic.w	r3, r3, #12
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <UART_SetConfig+0x114>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d103      	bne.n	8005ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7ff f994 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	e002      	b.n	8005de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7ff f97c 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8005de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009a      	lsls	r2, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <UART_SetConfig+0x118>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	0119      	lsls	r1, r3, #4
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009a      	lsls	r2, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <UART_SetConfig+0x118>)
 8005e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2064      	movs	r0, #100	; 0x64
 8005e22:	fb00 f303 	mul.w	r3, r0, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	3332      	adds	r3, #50	; 0x32
 8005e2c:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <UART_SetConfig+0x118>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e38:	4419      	add	r1, r3
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009a      	lsls	r2, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <UART_SetConfig+0x118>)
 8005e52:	fba3 0302 	umull	r0, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2064      	movs	r0, #100	; 0x64
 8005e5a:	fb00 f303 	mul.w	r3, r0, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	; 0x32
 8005e64:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <UART_SetConfig+0x118>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	440a      	add	r2, r1
 8005e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40013800 	.word	0x40013800
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <_vsiprintf_r>:
 8005e88:	b500      	push	{lr}
 8005e8a:	b09b      	sub	sp, #108	; 0x6c
 8005e8c:	9100      	str	r1, [sp, #0]
 8005e8e:	9104      	str	r1, [sp, #16]
 8005e90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	9102      	str	r1, [sp, #8]
 8005e98:	4905      	ldr	r1, [pc, #20]	; (8005eb0 <_vsiprintf_r+0x28>)
 8005e9a:	9103      	str	r1, [sp, #12]
 8005e9c:	4669      	mov	r1, sp
 8005e9e:	f000 f995 	bl	80061cc <_svfiprintf_r>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	b01b      	add	sp, #108	; 0x6c
 8005eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eae:	bf00      	nop
 8005eb0:	ffff0208 	.word	0xffff0208

08005eb4 <vsiprintf>:
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <vsiprintf+0x10>)
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f7ff bfe3 	b.w	8005e88 <_vsiprintf_r>
 8005ec2:	bf00      	nop
 8005ec4:	20000064 	.word	0x20000064

08005ec8 <memset>:
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4402      	add	r2, r0
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d100      	bne.n	8005ed2 <memset+0xa>
 8005ed0:	4770      	bx	lr
 8005ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed6:	e7f9      	b.n	8005ecc <memset+0x4>

08005ed8 <__errno>:
 8005ed8:	4b01      	ldr	r3, [pc, #4]	; (8005ee0 <__errno+0x8>)
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000064 	.word	0x20000064

08005ee4 <__libc_init_array>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	4d0c      	ldr	r5, [pc, #48]	; (8005f1c <__libc_init_array+0x38>)
 8005eea:	4c0d      	ldr	r4, [pc, #52]	; (8005f20 <__libc_init_array+0x3c>)
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	42a6      	cmp	r6, r4
 8005ef2:	d109      	bne.n	8005f08 <__libc_init_array+0x24>
 8005ef4:	f000 fcc0 	bl	8006878 <_init>
 8005ef8:	2600      	movs	r6, #0
 8005efa:	4d0a      	ldr	r5, [pc, #40]	; (8005f24 <__libc_init_array+0x40>)
 8005efc:	4c0a      	ldr	r4, [pc, #40]	; (8005f28 <__libc_init_array+0x44>)
 8005efe:	1b64      	subs	r4, r4, r5
 8005f00:	10a4      	asrs	r4, r4, #2
 8005f02:	42a6      	cmp	r6, r4
 8005f04:	d105      	bne.n	8005f12 <__libc_init_array+0x2e>
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0c:	4798      	blx	r3
 8005f0e:	3601      	adds	r6, #1
 8005f10:	e7ee      	b.n	8005ef0 <__libc_init_array+0xc>
 8005f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f16:	4798      	blx	r3
 8005f18:	3601      	adds	r6, #1
 8005f1a:	e7f2      	b.n	8005f02 <__libc_init_array+0x1e>
 8005f1c:	08006934 	.word	0x08006934
 8005f20:	08006934 	.word	0x08006934
 8005f24:	08006934 	.word	0x08006934
 8005f28:	08006938 	.word	0x08006938

08005f2c <__retarget_lock_acquire_recursive>:
 8005f2c:	4770      	bx	lr

08005f2e <__retarget_lock_release_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <_free_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4605      	mov	r5, r0
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d040      	beq.n	8005fba <_free_r+0x8a>
 8005f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f3c:	1f0c      	subs	r4, r1, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfb8      	it	lt
 8005f42:	18e4      	addlt	r4, r4, r3
 8005f44:	f000 f8dc 	bl	8006100 <__malloc_lock>
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <_free_r+0x8c>)
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	b933      	cbnz	r3, 8005f5c <_free_r+0x2c>
 8005f4e:	6063      	str	r3, [r4, #4]
 8005f50:	6014      	str	r4, [r2, #0]
 8005f52:	4628      	mov	r0, r5
 8005f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f58:	f000 b8d8 	b.w	800610c <__malloc_unlock>
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d908      	bls.n	8005f72 <_free_r+0x42>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	1821      	adds	r1, r4, r0
 8005f64:	428b      	cmp	r3, r1
 8005f66:	bf01      	itttt	eq
 8005f68:	6819      	ldreq	r1, [r3, #0]
 8005f6a:	685b      	ldreq	r3, [r3, #4]
 8005f6c:	1809      	addeq	r1, r1, r0
 8005f6e:	6021      	streq	r1, [r4, #0]
 8005f70:	e7ed      	b.n	8005f4e <_free_r+0x1e>
 8005f72:	461a      	mov	r2, r3
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	b10b      	cbz	r3, 8005f7c <_free_r+0x4c>
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d9fa      	bls.n	8005f72 <_free_r+0x42>
 8005f7c:	6811      	ldr	r1, [r2, #0]
 8005f7e:	1850      	adds	r0, r2, r1
 8005f80:	42a0      	cmp	r0, r4
 8005f82:	d10b      	bne.n	8005f9c <_free_r+0x6c>
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	4401      	add	r1, r0
 8005f88:	1850      	adds	r0, r2, r1
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	6011      	str	r1, [r2, #0]
 8005f8e:	d1e0      	bne.n	8005f52 <_free_r+0x22>
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4408      	add	r0, r1
 8005f96:	6010      	str	r0, [r2, #0]
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	e7da      	b.n	8005f52 <_free_r+0x22>
 8005f9c:	d902      	bls.n	8005fa4 <_free_r+0x74>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	e7d6      	b.n	8005f52 <_free_r+0x22>
 8005fa4:	6820      	ldr	r0, [r4, #0]
 8005fa6:	1821      	adds	r1, r4, r0
 8005fa8:	428b      	cmp	r3, r1
 8005faa:	bf01      	itttt	eq
 8005fac:	6819      	ldreq	r1, [r3, #0]
 8005fae:	685b      	ldreq	r3, [r3, #4]
 8005fb0:	1809      	addeq	r1, r1, r0
 8005fb2:	6021      	streq	r1, [r4, #0]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6054      	str	r4, [r2, #4]
 8005fb8:	e7cb      	b.n	8005f52 <_free_r+0x22>
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200014dc 	.word	0x200014dc

08005fc0 <sbrk_aligned>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4e0e      	ldr	r6, [pc, #56]	; (8005ffc <sbrk_aligned+0x3c>)
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	b911      	cbnz	r1, 8005fd2 <sbrk_aligned+0x12>
 8005fcc:	f000 fbaa 	bl	8006724 <_sbrk_r>
 8005fd0:	6030      	str	r0, [r6, #0]
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 fba5 	bl	8006724 <_sbrk_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d00a      	beq.n	8005ff4 <sbrk_aligned+0x34>
 8005fde:	1cc4      	adds	r4, r0, #3
 8005fe0:	f024 0403 	bic.w	r4, r4, #3
 8005fe4:	42a0      	cmp	r0, r4
 8005fe6:	d007      	beq.n	8005ff8 <sbrk_aligned+0x38>
 8005fe8:	1a21      	subs	r1, r4, r0
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 fb9a 	bl	8006724 <_sbrk_r>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d101      	bne.n	8005ff8 <sbrk_aligned+0x38>
 8005ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	200014e0 	.word	0x200014e0

08006000 <_malloc_r>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	1ccd      	adds	r5, r1, #3
 8006006:	f025 0503 	bic.w	r5, r5, #3
 800600a:	3508      	adds	r5, #8
 800600c:	2d0c      	cmp	r5, #12
 800600e:	bf38      	it	cc
 8006010:	250c      	movcc	r5, #12
 8006012:	2d00      	cmp	r5, #0
 8006014:	4607      	mov	r7, r0
 8006016:	db01      	blt.n	800601c <_malloc_r+0x1c>
 8006018:	42a9      	cmp	r1, r5
 800601a:	d905      	bls.n	8006028 <_malloc_r+0x28>
 800601c:	230c      	movs	r3, #12
 800601e:	2600      	movs	r6, #0
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4630      	mov	r0, r6
 8006024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006028:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060fc <_malloc_r+0xfc>
 800602c:	f000 f868 	bl	8006100 <__malloc_lock>
 8006030:	f8d8 3000 	ldr.w	r3, [r8]
 8006034:	461c      	mov	r4, r3
 8006036:	bb5c      	cbnz	r4, 8006090 <_malloc_r+0x90>
 8006038:	4629      	mov	r1, r5
 800603a:	4638      	mov	r0, r7
 800603c:	f7ff ffc0 	bl	8005fc0 <sbrk_aligned>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	4604      	mov	r4, r0
 8006044:	d155      	bne.n	80060f2 <_malloc_r+0xf2>
 8006046:	f8d8 4000 	ldr.w	r4, [r8]
 800604a:	4626      	mov	r6, r4
 800604c:	2e00      	cmp	r6, #0
 800604e:	d145      	bne.n	80060dc <_malloc_r+0xdc>
 8006050:	2c00      	cmp	r4, #0
 8006052:	d048      	beq.n	80060e6 <_malloc_r+0xe6>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	4631      	mov	r1, r6
 8006058:	4638      	mov	r0, r7
 800605a:	eb04 0903 	add.w	r9, r4, r3
 800605e:	f000 fb61 	bl	8006724 <_sbrk_r>
 8006062:	4581      	cmp	r9, r0
 8006064:	d13f      	bne.n	80060e6 <_malloc_r+0xe6>
 8006066:	6821      	ldr	r1, [r4, #0]
 8006068:	4638      	mov	r0, r7
 800606a:	1a6d      	subs	r5, r5, r1
 800606c:	4629      	mov	r1, r5
 800606e:	f7ff ffa7 	bl	8005fc0 <sbrk_aligned>
 8006072:	3001      	adds	r0, #1
 8006074:	d037      	beq.n	80060e6 <_malloc_r+0xe6>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	442b      	add	r3, r5
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	f8d8 3000 	ldr.w	r3, [r8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d038      	beq.n	80060f6 <_malloc_r+0xf6>
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	42a2      	cmp	r2, r4
 8006088:	d12b      	bne.n	80060e2 <_malloc_r+0xe2>
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	e00f      	b.n	80060b0 <_malloc_r+0xb0>
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	1b52      	subs	r2, r2, r5
 8006094:	d41f      	bmi.n	80060d6 <_malloc_r+0xd6>
 8006096:	2a0b      	cmp	r2, #11
 8006098:	d917      	bls.n	80060ca <_malloc_r+0xca>
 800609a:	1961      	adds	r1, r4, r5
 800609c:	42a3      	cmp	r3, r4
 800609e:	6025      	str	r5, [r4, #0]
 80060a0:	bf18      	it	ne
 80060a2:	6059      	strne	r1, [r3, #4]
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	bf08      	it	eq
 80060a8:	f8c8 1000 	streq.w	r1, [r8]
 80060ac:	5162      	str	r2, [r4, r5]
 80060ae:	604b      	str	r3, [r1, #4]
 80060b0:	4638      	mov	r0, r7
 80060b2:	f104 060b 	add.w	r6, r4, #11
 80060b6:	f000 f829 	bl	800610c <__malloc_unlock>
 80060ba:	f026 0607 	bic.w	r6, r6, #7
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	1af2      	subs	r2, r6, r3
 80060c2:	d0ae      	beq.n	8006022 <_malloc_r+0x22>
 80060c4:	1b9b      	subs	r3, r3, r6
 80060c6:	50a3      	str	r3, [r4, r2]
 80060c8:	e7ab      	b.n	8006022 <_malloc_r+0x22>
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	6862      	ldr	r2, [r4, #4]
 80060ce:	d1dd      	bne.n	800608c <_malloc_r+0x8c>
 80060d0:	f8c8 2000 	str.w	r2, [r8]
 80060d4:	e7ec      	b.n	80060b0 <_malloc_r+0xb0>
 80060d6:	4623      	mov	r3, r4
 80060d8:	6864      	ldr	r4, [r4, #4]
 80060da:	e7ac      	b.n	8006036 <_malloc_r+0x36>
 80060dc:	4634      	mov	r4, r6
 80060de:	6876      	ldr	r6, [r6, #4]
 80060e0:	e7b4      	b.n	800604c <_malloc_r+0x4c>
 80060e2:	4613      	mov	r3, r2
 80060e4:	e7cc      	b.n	8006080 <_malloc_r+0x80>
 80060e6:	230c      	movs	r3, #12
 80060e8:	4638      	mov	r0, r7
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	f000 f80e 	bl	800610c <__malloc_unlock>
 80060f0:	e797      	b.n	8006022 <_malloc_r+0x22>
 80060f2:	6025      	str	r5, [r4, #0]
 80060f4:	e7dc      	b.n	80060b0 <_malloc_r+0xb0>
 80060f6:	605b      	str	r3, [r3, #4]
 80060f8:	deff      	udf	#255	; 0xff
 80060fa:	bf00      	nop
 80060fc:	200014dc 	.word	0x200014dc

08006100 <__malloc_lock>:
 8006100:	4801      	ldr	r0, [pc, #4]	; (8006108 <__malloc_lock+0x8>)
 8006102:	f7ff bf13 	b.w	8005f2c <__retarget_lock_acquire_recursive>
 8006106:	bf00      	nop
 8006108:	200014d8 	.word	0x200014d8

0800610c <__malloc_unlock>:
 800610c:	4801      	ldr	r0, [pc, #4]	; (8006114 <__malloc_unlock+0x8>)
 800610e:	f7ff bf0e 	b.w	8005f2e <__retarget_lock_release_recursive>
 8006112:	bf00      	nop
 8006114:	200014d8 	.word	0x200014d8

08006118 <__ssputs_r>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	461f      	mov	r7, r3
 800611e:	688e      	ldr	r6, [r1, #8]
 8006120:	4682      	mov	sl, r0
 8006122:	42be      	cmp	r6, r7
 8006124:	460c      	mov	r4, r1
 8006126:	4690      	mov	r8, r2
 8006128:	680b      	ldr	r3, [r1, #0]
 800612a:	d82c      	bhi.n	8006186 <__ssputs_r+0x6e>
 800612c:	898a      	ldrh	r2, [r1, #12]
 800612e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006132:	d026      	beq.n	8006182 <__ssputs_r+0x6a>
 8006134:	6965      	ldr	r5, [r4, #20]
 8006136:	6909      	ldr	r1, [r1, #16]
 8006138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800613c:	eba3 0901 	sub.w	r9, r3, r1
 8006140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006144:	1c7b      	adds	r3, r7, #1
 8006146:	444b      	add	r3, r9
 8006148:	106d      	asrs	r5, r5, #1
 800614a:	429d      	cmp	r5, r3
 800614c:	bf38      	it	cc
 800614e:	461d      	movcc	r5, r3
 8006150:	0553      	lsls	r3, r2, #21
 8006152:	d527      	bpl.n	80061a4 <__ssputs_r+0x8c>
 8006154:	4629      	mov	r1, r5
 8006156:	f7ff ff53 	bl	8006000 <_malloc_r>
 800615a:	4606      	mov	r6, r0
 800615c:	b360      	cbz	r0, 80061b8 <__ssputs_r+0xa0>
 800615e:	464a      	mov	r2, r9
 8006160:	6921      	ldr	r1, [r4, #16]
 8006162:	f000 fafd 	bl	8006760 <memcpy>
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	6126      	str	r6, [r4, #16]
 8006174:	444e      	add	r6, r9
 8006176:	6026      	str	r6, [r4, #0]
 8006178:	463e      	mov	r6, r7
 800617a:	6165      	str	r5, [r4, #20]
 800617c:	eba5 0509 	sub.w	r5, r5, r9
 8006180:	60a5      	str	r5, [r4, #8]
 8006182:	42be      	cmp	r6, r7
 8006184:	d900      	bls.n	8006188 <__ssputs_r+0x70>
 8006186:	463e      	mov	r6, r7
 8006188:	4632      	mov	r2, r6
 800618a:	4641      	mov	r1, r8
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	f000 faaf 	bl	80066f0 <memmove>
 8006192:	2000      	movs	r0, #0
 8006194:	68a3      	ldr	r3, [r4, #8]
 8006196:	1b9b      	subs	r3, r3, r6
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	4433      	add	r3, r6
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a4:	462a      	mov	r2, r5
 80061a6:	f000 fae9 	bl	800677c <_realloc_r>
 80061aa:	4606      	mov	r6, r0
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d1e0      	bne.n	8006172 <__ssputs_r+0x5a>
 80061b0:	4650      	mov	r0, sl
 80061b2:	6921      	ldr	r1, [r4, #16]
 80061b4:	f7ff febc 	bl	8005f30 <_free_r>
 80061b8:	230c      	movs	r3, #12
 80061ba:	f8ca 3000 	str.w	r3, [sl]
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	e7e9      	b.n	80061a0 <__ssputs_r+0x88>

080061cc <_svfiprintf_r>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	4698      	mov	r8, r3
 80061d2:	898b      	ldrh	r3, [r1, #12]
 80061d4:	4607      	mov	r7, r0
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	460d      	mov	r5, r1
 80061da:	4614      	mov	r4, r2
 80061dc:	b09d      	sub	sp, #116	; 0x74
 80061de:	d50e      	bpl.n	80061fe <_svfiprintf_r+0x32>
 80061e0:	690b      	ldr	r3, [r1, #16]
 80061e2:	b963      	cbnz	r3, 80061fe <_svfiprintf_r+0x32>
 80061e4:	2140      	movs	r1, #64	; 0x40
 80061e6:	f7ff ff0b 	bl	8006000 <_malloc_r>
 80061ea:	6028      	str	r0, [r5, #0]
 80061ec:	6128      	str	r0, [r5, #16]
 80061ee:	b920      	cbnz	r0, 80061fa <_svfiprintf_r+0x2e>
 80061f0:	230c      	movs	r3, #12
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	e0d0      	b.n	800639c <_svfiprintf_r+0x1d0>
 80061fa:	2340      	movs	r3, #64	; 0x40
 80061fc:	616b      	str	r3, [r5, #20]
 80061fe:	2300      	movs	r3, #0
 8006200:	9309      	str	r3, [sp, #36]	; 0x24
 8006202:	2320      	movs	r3, #32
 8006204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006208:	2330      	movs	r3, #48	; 0x30
 800620a:	f04f 0901 	mov.w	r9, #1
 800620e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006212:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80063b4 <_svfiprintf_r+0x1e8>
 8006216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800621a:	4623      	mov	r3, r4
 800621c:	469a      	mov	sl, r3
 800621e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006222:	b10a      	cbz	r2, 8006228 <_svfiprintf_r+0x5c>
 8006224:	2a25      	cmp	r2, #37	; 0x25
 8006226:	d1f9      	bne.n	800621c <_svfiprintf_r+0x50>
 8006228:	ebba 0b04 	subs.w	fp, sl, r4
 800622c:	d00b      	beq.n	8006246 <_svfiprintf_r+0x7a>
 800622e:	465b      	mov	r3, fp
 8006230:	4622      	mov	r2, r4
 8006232:	4629      	mov	r1, r5
 8006234:	4638      	mov	r0, r7
 8006236:	f7ff ff6f 	bl	8006118 <__ssputs_r>
 800623a:	3001      	adds	r0, #1
 800623c:	f000 80a9 	beq.w	8006392 <_svfiprintf_r+0x1c6>
 8006240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006242:	445a      	add	r2, fp
 8006244:	9209      	str	r2, [sp, #36]	; 0x24
 8006246:	f89a 3000 	ldrb.w	r3, [sl]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 80a1 	beq.w	8006392 <_svfiprintf_r+0x1c6>
 8006250:	2300      	movs	r3, #0
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800625a:	f10a 0a01 	add.w	sl, sl, #1
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	9307      	str	r3, [sp, #28]
 8006262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006266:	931a      	str	r3, [sp, #104]	; 0x68
 8006268:	4654      	mov	r4, sl
 800626a:	2205      	movs	r2, #5
 800626c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006270:	4850      	ldr	r0, [pc, #320]	; (80063b4 <_svfiprintf_r+0x1e8>)
 8006272:	f000 fa67 	bl	8006744 <memchr>
 8006276:	9a04      	ldr	r2, [sp, #16]
 8006278:	b9d8      	cbnz	r0, 80062b2 <_svfiprintf_r+0xe6>
 800627a:	06d0      	lsls	r0, r2, #27
 800627c:	bf44      	itt	mi
 800627e:	2320      	movmi	r3, #32
 8006280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006284:	0711      	lsls	r1, r2, #28
 8006286:	bf44      	itt	mi
 8006288:	232b      	movmi	r3, #43	; 0x2b
 800628a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800628e:	f89a 3000 	ldrb.w	r3, [sl]
 8006292:	2b2a      	cmp	r3, #42	; 0x2a
 8006294:	d015      	beq.n	80062c2 <_svfiprintf_r+0xf6>
 8006296:	4654      	mov	r4, sl
 8006298:	2000      	movs	r0, #0
 800629a:	f04f 0c0a 	mov.w	ip, #10
 800629e:	9a07      	ldr	r2, [sp, #28]
 80062a0:	4621      	mov	r1, r4
 80062a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062a6:	3b30      	subs	r3, #48	; 0x30
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	d94d      	bls.n	8006348 <_svfiprintf_r+0x17c>
 80062ac:	b1b0      	cbz	r0, 80062dc <_svfiprintf_r+0x110>
 80062ae:	9207      	str	r2, [sp, #28]
 80062b0:	e014      	b.n	80062dc <_svfiprintf_r+0x110>
 80062b2:	eba0 0308 	sub.w	r3, r0, r8
 80062b6:	fa09 f303 	lsl.w	r3, r9, r3
 80062ba:	4313      	orrs	r3, r2
 80062bc:	46a2      	mov	sl, r4
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	e7d2      	b.n	8006268 <_svfiprintf_r+0x9c>
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	1d19      	adds	r1, r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	9103      	str	r1, [sp, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bfbb      	ittet	lt
 80062ce:	425b      	neglt	r3, r3
 80062d0:	f042 0202 	orrlt.w	r2, r2, #2
 80062d4:	9307      	strge	r3, [sp, #28]
 80062d6:	9307      	strlt	r3, [sp, #28]
 80062d8:	bfb8      	it	lt
 80062da:	9204      	strlt	r2, [sp, #16]
 80062dc:	7823      	ldrb	r3, [r4, #0]
 80062de:	2b2e      	cmp	r3, #46	; 0x2e
 80062e0:	d10c      	bne.n	80062fc <_svfiprintf_r+0x130>
 80062e2:	7863      	ldrb	r3, [r4, #1]
 80062e4:	2b2a      	cmp	r3, #42	; 0x2a
 80062e6:	d134      	bne.n	8006352 <_svfiprintf_r+0x186>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	3402      	adds	r4, #2
 80062ec:	1d1a      	adds	r2, r3, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	9203      	str	r2, [sp, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bfb8      	it	lt
 80062f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80063b8 <_svfiprintf_r+0x1ec>
 8006300:	2203      	movs	r2, #3
 8006302:	4650      	mov	r0, sl
 8006304:	7821      	ldrb	r1, [r4, #0]
 8006306:	f000 fa1d 	bl	8006744 <memchr>
 800630a:	b138      	cbz	r0, 800631c <_svfiprintf_r+0x150>
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	eba0 000a 	sub.w	r0, r0, sl
 8006314:	4082      	lsls	r2, r0
 8006316:	4313      	orrs	r3, r2
 8006318:	3401      	adds	r4, #1
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	2206      	movs	r2, #6
 8006322:	4826      	ldr	r0, [pc, #152]	; (80063bc <_svfiprintf_r+0x1f0>)
 8006324:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006328:	f000 fa0c 	bl	8006744 <memchr>
 800632c:	2800      	cmp	r0, #0
 800632e:	d038      	beq.n	80063a2 <_svfiprintf_r+0x1d6>
 8006330:	4b23      	ldr	r3, [pc, #140]	; (80063c0 <_svfiprintf_r+0x1f4>)
 8006332:	bb1b      	cbnz	r3, 800637c <_svfiprintf_r+0x1b0>
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	3307      	adds	r3, #7
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	3308      	adds	r3, #8
 800633e:	9303      	str	r3, [sp, #12]
 8006340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006342:	4433      	add	r3, r6
 8006344:	9309      	str	r3, [sp, #36]	; 0x24
 8006346:	e768      	b.n	800621a <_svfiprintf_r+0x4e>
 8006348:	460c      	mov	r4, r1
 800634a:	2001      	movs	r0, #1
 800634c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006350:	e7a6      	b.n	80062a0 <_svfiprintf_r+0xd4>
 8006352:	2300      	movs	r3, #0
 8006354:	f04f 0c0a 	mov.w	ip, #10
 8006358:	4619      	mov	r1, r3
 800635a:	3401      	adds	r4, #1
 800635c:	9305      	str	r3, [sp, #20]
 800635e:	4620      	mov	r0, r4
 8006360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006364:	3a30      	subs	r2, #48	; 0x30
 8006366:	2a09      	cmp	r2, #9
 8006368:	d903      	bls.n	8006372 <_svfiprintf_r+0x1a6>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c6      	beq.n	80062fc <_svfiprintf_r+0x130>
 800636e:	9105      	str	r1, [sp, #20]
 8006370:	e7c4      	b.n	80062fc <_svfiprintf_r+0x130>
 8006372:	4604      	mov	r4, r0
 8006374:	2301      	movs	r3, #1
 8006376:	fb0c 2101 	mla	r1, ip, r1, r2
 800637a:	e7f0      	b.n	800635e <_svfiprintf_r+0x192>
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	462a      	mov	r2, r5
 8006382:	4638      	mov	r0, r7
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <_svfiprintf_r+0x1f8>)
 8006386:	a904      	add	r1, sp, #16
 8006388:	f3af 8000 	nop.w
 800638c:	1c42      	adds	r2, r0, #1
 800638e:	4606      	mov	r6, r0
 8006390:	d1d6      	bne.n	8006340 <_svfiprintf_r+0x174>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	065b      	lsls	r3, r3, #25
 8006396:	f53f af2d 	bmi.w	80061f4 <_svfiprintf_r+0x28>
 800639a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800639c:	b01d      	add	sp, #116	; 0x74
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4638      	mov	r0, r7
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <_svfiprintf_r+0x1f8>)
 80063ac:	a904      	add	r1, sp, #16
 80063ae:	f000 f87d 	bl	80064ac <_printf_i>
 80063b2:	e7eb      	b.n	800638c <_svfiprintf_r+0x1c0>
 80063b4:	080068fe 	.word	0x080068fe
 80063b8:	08006904 	.word	0x08006904
 80063bc:	08006908 	.word	0x08006908
 80063c0:	00000000 	.word	0x00000000
 80063c4:	08006119 	.word	0x08006119

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4616      	mov	r6, r2
 80063ce:	4699      	mov	r9, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	4607      	mov	r7, r0
 80063d6:	4293      	cmp	r3, r2
 80063d8:	bfb8      	it	lt
 80063da:	4613      	movlt	r3, r2
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e2:	460c      	mov	r4, r1
 80063e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063e8:	b10a      	cbz	r2, 80063ee <_printf_common+0x26>
 80063ea:	3301      	adds	r3, #1
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	0699      	lsls	r1, r3, #26
 80063f2:	bf42      	ittt	mi
 80063f4:	6833      	ldrmi	r3, [r6, #0]
 80063f6:	3302      	addmi	r3, #2
 80063f8:	6033      	strmi	r3, [r6, #0]
 80063fa:	6825      	ldr	r5, [r4, #0]
 80063fc:	f015 0506 	ands.w	r5, r5, #6
 8006400:	d106      	bne.n	8006410 <_printf_common+0x48>
 8006402:	f104 0a19 	add.w	sl, r4, #25
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	6832      	ldr	r2, [r6, #0]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	42ab      	cmp	r3, r5
 800640e:	dc2b      	bgt.n	8006468 <_printf_common+0xa0>
 8006410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006414:	1e13      	subs	r3, r2, #0
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	2301      	movne	r3, #1
 800641c:	0692      	lsls	r2, r2, #26
 800641e:	d430      	bmi.n	8006482 <_printf_common+0xba>
 8006420:	4649      	mov	r1, r9
 8006422:	4638      	mov	r0, r7
 8006424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006428:	47c0      	blx	r8
 800642a:	3001      	adds	r0, #1
 800642c:	d023      	beq.n	8006476 <_printf_common+0xae>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	2b04      	cmp	r3, #4
 8006438:	bf14      	ite	ne
 800643a:	2500      	movne	r5, #0
 800643c:	6833      	ldreq	r3, [r6, #0]
 800643e:	f04f 0600 	mov.w	r6, #0
 8006442:	bf08      	it	eq
 8006444:	68e5      	ldreq	r5, [r4, #12]
 8006446:	f104 041a 	add.w	r4, r4, #26
 800644a:	bf08      	it	eq
 800644c:	1aed      	subeq	r5, r5, r3
 800644e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006452:	bf08      	it	eq
 8006454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006458:	4293      	cmp	r3, r2
 800645a:	bfc4      	itt	gt
 800645c:	1a9b      	subgt	r3, r3, r2
 800645e:	18ed      	addgt	r5, r5, r3
 8006460:	42b5      	cmp	r5, r6
 8006462:	d11a      	bne.n	800649a <_printf_common+0xd2>
 8006464:	2000      	movs	r0, #0
 8006466:	e008      	b.n	800647a <_printf_common+0xb2>
 8006468:	2301      	movs	r3, #1
 800646a:	4652      	mov	r2, sl
 800646c:	4649      	mov	r1, r9
 800646e:	4638      	mov	r0, r7
 8006470:	47c0      	blx	r8
 8006472:	3001      	adds	r0, #1
 8006474:	d103      	bne.n	800647e <_printf_common+0xb6>
 8006476:	f04f 30ff 	mov.w	r0, #4294967295
 800647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647e:	3501      	adds	r5, #1
 8006480:	e7c1      	b.n	8006406 <_printf_common+0x3e>
 8006482:	2030      	movs	r0, #48	; 0x30
 8006484:	18e1      	adds	r1, r4, r3
 8006486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006490:	4422      	add	r2, r4
 8006492:	3302      	adds	r3, #2
 8006494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006498:	e7c2      	b.n	8006420 <_printf_common+0x58>
 800649a:	2301      	movs	r3, #1
 800649c:	4622      	mov	r2, r4
 800649e:	4649      	mov	r1, r9
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c0      	blx	r8
 80064a4:	3001      	adds	r0, #1
 80064a6:	d0e6      	beq.n	8006476 <_printf_common+0xae>
 80064a8:	3601      	adds	r6, #1
 80064aa:	e7d9      	b.n	8006460 <_printf_common+0x98>

080064ac <_printf_i>:
 80064ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	7e0f      	ldrb	r7, [r1, #24]
 80064b2:	4691      	mov	r9, r2
 80064b4:	2f78      	cmp	r7, #120	; 0x78
 80064b6:	4680      	mov	r8, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	469a      	mov	sl, r3
 80064bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064c2:	d807      	bhi.n	80064d4 <_printf_i+0x28>
 80064c4:	2f62      	cmp	r7, #98	; 0x62
 80064c6:	d80a      	bhi.n	80064de <_printf_i+0x32>
 80064c8:	2f00      	cmp	r7, #0
 80064ca:	f000 80d5 	beq.w	8006678 <_printf_i+0x1cc>
 80064ce:	2f58      	cmp	r7, #88	; 0x58
 80064d0:	f000 80c1 	beq.w	8006656 <_printf_i+0x1aa>
 80064d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064dc:	e03a      	b.n	8006554 <_printf_i+0xa8>
 80064de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064e2:	2b15      	cmp	r3, #21
 80064e4:	d8f6      	bhi.n	80064d4 <_printf_i+0x28>
 80064e6:	a101      	add	r1, pc, #4	; (adr r1, 80064ec <_printf_i+0x40>)
 80064e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ec:	08006545 	.word	0x08006545
 80064f0:	08006559 	.word	0x08006559
 80064f4:	080064d5 	.word	0x080064d5
 80064f8:	080064d5 	.word	0x080064d5
 80064fc:	080064d5 	.word	0x080064d5
 8006500:	080064d5 	.word	0x080064d5
 8006504:	08006559 	.word	0x08006559
 8006508:	080064d5 	.word	0x080064d5
 800650c:	080064d5 	.word	0x080064d5
 8006510:	080064d5 	.word	0x080064d5
 8006514:	080064d5 	.word	0x080064d5
 8006518:	0800665f 	.word	0x0800665f
 800651c:	08006585 	.word	0x08006585
 8006520:	08006619 	.word	0x08006619
 8006524:	080064d5 	.word	0x080064d5
 8006528:	080064d5 	.word	0x080064d5
 800652c:	08006681 	.word	0x08006681
 8006530:	080064d5 	.word	0x080064d5
 8006534:	08006585 	.word	0x08006585
 8006538:	080064d5 	.word	0x080064d5
 800653c:	080064d5 	.word	0x080064d5
 8006540:	08006621 	.word	0x08006621
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	602a      	str	r2, [r5, #0]
 800654c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006554:	2301      	movs	r3, #1
 8006556:	e0a0      	b.n	800669a <_printf_i+0x1ee>
 8006558:	6820      	ldr	r0, [r4, #0]
 800655a:	682b      	ldr	r3, [r5, #0]
 800655c:	0607      	lsls	r7, r0, #24
 800655e:	f103 0104 	add.w	r1, r3, #4
 8006562:	6029      	str	r1, [r5, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0xbe>
 8006566:	681e      	ldr	r6, [r3, #0]
 8006568:	e003      	b.n	8006572 <_printf_i+0xc6>
 800656a:	0646      	lsls	r6, r0, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0xba>
 800656e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006572:	2e00      	cmp	r6, #0
 8006574:	da03      	bge.n	800657e <_printf_i+0xd2>
 8006576:	232d      	movs	r3, #45	; 0x2d
 8006578:	4276      	negs	r6, r6
 800657a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657e:	230a      	movs	r3, #10
 8006580:	4859      	ldr	r0, [pc, #356]	; (80066e8 <_printf_i+0x23c>)
 8006582:	e012      	b.n	80065aa <_printf_i+0xfe>
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	1d19      	adds	r1, r3, #4
 800658a:	6029      	str	r1, [r5, #0]
 800658c:	0605      	lsls	r5, r0, #24
 800658e:	d501      	bpl.n	8006594 <_printf_i+0xe8>
 8006590:	681e      	ldr	r6, [r3, #0]
 8006592:	e002      	b.n	800659a <_printf_i+0xee>
 8006594:	0641      	lsls	r1, r0, #25
 8006596:	d5fb      	bpl.n	8006590 <_printf_i+0xe4>
 8006598:	881e      	ldrh	r6, [r3, #0]
 800659a:	2f6f      	cmp	r7, #111	; 0x6f
 800659c:	bf0c      	ite	eq
 800659e:	2308      	moveq	r3, #8
 80065a0:	230a      	movne	r3, #10
 80065a2:	4851      	ldr	r0, [pc, #324]	; (80066e8 <_printf_i+0x23c>)
 80065a4:	2100      	movs	r1, #0
 80065a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065aa:	6865      	ldr	r5, [r4, #4]
 80065ac:	2d00      	cmp	r5, #0
 80065ae:	bfa8      	it	ge
 80065b0:	6821      	ldrge	r1, [r4, #0]
 80065b2:	60a5      	str	r5, [r4, #8]
 80065b4:	bfa4      	itt	ge
 80065b6:	f021 0104 	bicge.w	r1, r1, #4
 80065ba:	6021      	strge	r1, [r4, #0]
 80065bc:	b90e      	cbnz	r6, 80065c2 <_printf_i+0x116>
 80065be:	2d00      	cmp	r5, #0
 80065c0:	d04b      	beq.n	800665a <_printf_i+0x1ae>
 80065c2:	4615      	mov	r5, r2
 80065c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80065c8:	fb03 6711 	mls	r7, r3, r1, r6
 80065cc:	5dc7      	ldrb	r7, [r0, r7]
 80065ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065d2:	4637      	mov	r7, r6
 80065d4:	42bb      	cmp	r3, r7
 80065d6:	460e      	mov	r6, r1
 80065d8:	d9f4      	bls.n	80065c4 <_printf_i+0x118>
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d10b      	bne.n	80065f6 <_printf_i+0x14a>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	07de      	lsls	r6, r3, #31
 80065e2:	d508      	bpl.n	80065f6 <_printf_i+0x14a>
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	6861      	ldr	r1, [r4, #4]
 80065e8:	4299      	cmp	r1, r3
 80065ea:	bfde      	ittt	le
 80065ec:	2330      	movle	r3, #48	; 0x30
 80065ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065f6:	1b52      	subs	r2, r2, r5
 80065f8:	6122      	str	r2, [r4, #16]
 80065fa:	464b      	mov	r3, r9
 80065fc:	4621      	mov	r1, r4
 80065fe:	4640      	mov	r0, r8
 8006600:	f8cd a000 	str.w	sl, [sp]
 8006604:	aa03      	add	r2, sp, #12
 8006606:	f7ff fedf 	bl	80063c8 <_printf_common>
 800660a:	3001      	adds	r0, #1
 800660c:	d14a      	bne.n	80066a4 <_printf_i+0x1f8>
 800660e:	f04f 30ff 	mov.w	r0, #4294967295
 8006612:	b004      	add	sp, #16
 8006614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	f043 0320 	orr.w	r3, r3, #32
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	2778      	movs	r7, #120	; 0x78
 8006622:	4832      	ldr	r0, [pc, #200]	; (80066ec <_printf_i+0x240>)
 8006624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	6829      	ldr	r1, [r5, #0]
 800662c:	061f      	lsls	r7, r3, #24
 800662e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006632:	d402      	bmi.n	800663a <_printf_i+0x18e>
 8006634:	065f      	lsls	r7, r3, #25
 8006636:	bf48      	it	mi
 8006638:	b2b6      	uxthmi	r6, r6
 800663a:	07df      	lsls	r7, r3, #31
 800663c:	bf48      	it	mi
 800663e:	f043 0320 	orrmi.w	r3, r3, #32
 8006642:	6029      	str	r1, [r5, #0]
 8006644:	bf48      	it	mi
 8006646:	6023      	strmi	r3, [r4, #0]
 8006648:	b91e      	cbnz	r6, 8006652 <_printf_i+0x1a6>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	f023 0320 	bic.w	r3, r3, #32
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	2310      	movs	r3, #16
 8006654:	e7a6      	b.n	80065a4 <_printf_i+0xf8>
 8006656:	4824      	ldr	r0, [pc, #144]	; (80066e8 <_printf_i+0x23c>)
 8006658:	e7e4      	b.n	8006624 <_printf_i+0x178>
 800665a:	4615      	mov	r5, r2
 800665c:	e7bd      	b.n	80065da <_printf_i+0x12e>
 800665e:	682b      	ldr	r3, [r5, #0]
 8006660:	6826      	ldr	r6, [r4, #0]
 8006662:	1d18      	adds	r0, r3, #4
 8006664:	6961      	ldr	r1, [r4, #20]
 8006666:	6028      	str	r0, [r5, #0]
 8006668:	0635      	lsls	r5, r6, #24
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	d501      	bpl.n	8006672 <_printf_i+0x1c6>
 800666e:	6019      	str	r1, [r3, #0]
 8006670:	e002      	b.n	8006678 <_printf_i+0x1cc>
 8006672:	0670      	lsls	r0, r6, #25
 8006674:	d5fb      	bpl.n	800666e <_printf_i+0x1c2>
 8006676:	8019      	strh	r1, [r3, #0]
 8006678:	2300      	movs	r3, #0
 800667a:	4615      	mov	r5, r2
 800667c:	6123      	str	r3, [r4, #16]
 800667e:	e7bc      	b.n	80065fa <_printf_i+0x14e>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	2100      	movs	r1, #0
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	602a      	str	r2, [r5, #0]
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	6862      	ldr	r2, [r4, #4]
 800668c:	4628      	mov	r0, r5
 800668e:	f000 f859 	bl	8006744 <memchr>
 8006692:	b108      	cbz	r0, 8006698 <_printf_i+0x1ec>
 8006694:	1b40      	subs	r0, r0, r5
 8006696:	6060      	str	r0, [r4, #4]
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	6123      	str	r3, [r4, #16]
 800669c:	2300      	movs	r3, #0
 800669e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a2:	e7aa      	b.n	80065fa <_printf_i+0x14e>
 80066a4:	462a      	mov	r2, r5
 80066a6:	4649      	mov	r1, r9
 80066a8:	4640      	mov	r0, r8
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	47d0      	blx	sl
 80066ae:	3001      	adds	r0, #1
 80066b0:	d0ad      	beq.n	800660e <_printf_i+0x162>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	079b      	lsls	r3, r3, #30
 80066b6:	d413      	bmi.n	80066e0 <_printf_i+0x234>
 80066b8:	68e0      	ldr	r0, [r4, #12]
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	4298      	cmp	r0, r3
 80066be:	bfb8      	it	lt
 80066c0:	4618      	movlt	r0, r3
 80066c2:	e7a6      	b.n	8006612 <_printf_i+0x166>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4632      	mov	r2, r6
 80066c8:	4649      	mov	r1, r9
 80066ca:	4640      	mov	r0, r8
 80066cc:	47d0      	blx	sl
 80066ce:	3001      	adds	r0, #1
 80066d0:	d09d      	beq.n	800660e <_printf_i+0x162>
 80066d2:	3501      	adds	r5, #1
 80066d4:	68e3      	ldr	r3, [r4, #12]
 80066d6:	9903      	ldr	r1, [sp, #12]
 80066d8:	1a5b      	subs	r3, r3, r1
 80066da:	42ab      	cmp	r3, r5
 80066dc:	dcf2      	bgt.n	80066c4 <_printf_i+0x218>
 80066de:	e7eb      	b.n	80066b8 <_printf_i+0x20c>
 80066e0:	2500      	movs	r5, #0
 80066e2:	f104 0619 	add.w	r6, r4, #25
 80066e6:	e7f5      	b.n	80066d4 <_printf_i+0x228>
 80066e8:	0800690f 	.word	0x0800690f
 80066ec:	08006920 	.word	0x08006920

080066f0 <memmove>:
 80066f0:	4288      	cmp	r0, r1
 80066f2:	b510      	push	{r4, lr}
 80066f4:	eb01 0402 	add.w	r4, r1, r2
 80066f8:	d902      	bls.n	8006700 <memmove+0x10>
 80066fa:	4284      	cmp	r4, r0
 80066fc:	4623      	mov	r3, r4
 80066fe:	d807      	bhi.n	8006710 <memmove+0x20>
 8006700:	1e43      	subs	r3, r0, #1
 8006702:	42a1      	cmp	r1, r4
 8006704:	d008      	beq.n	8006718 <memmove+0x28>
 8006706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800670a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800670e:	e7f8      	b.n	8006702 <memmove+0x12>
 8006710:	4601      	mov	r1, r0
 8006712:	4402      	add	r2, r0
 8006714:	428a      	cmp	r2, r1
 8006716:	d100      	bne.n	800671a <memmove+0x2a>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800671e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006722:	e7f7      	b.n	8006714 <memmove+0x24>

08006724 <_sbrk_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	2300      	movs	r3, #0
 8006728:	4d05      	ldr	r5, [pc, #20]	; (8006740 <_sbrk_r+0x1c>)
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	f7fc f85a 	bl	80027e8 <_sbrk>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_sbrk_r+0x1a>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_sbrk_r+0x1a>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	200014d4 	.word	0x200014d4

08006744 <memchr>:
 8006744:	4603      	mov	r3, r0
 8006746:	b510      	push	{r4, lr}
 8006748:	b2c9      	uxtb	r1, r1
 800674a:	4402      	add	r2, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	4618      	mov	r0, r3
 8006750:	d101      	bne.n	8006756 <memchr+0x12>
 8006752:	2000      	movs	r0, #0
 8006754:	e003      	b.n	800675e <memchr+0x1a>
 8006756:	7804      	ldrb	r4, [r0, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	428c      	cmp	r4, r1
 800675c:	d1f6      	bne.n	800674c <memchr+0x8>
 800675e:	bd10      	pop	{r4, pc}

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	4291      	cmp	r1, r2
 8006774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <_realloc_r>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	4680      	mov	r8, r0
 8006782:	4614      	mov	r4, r2
 8006784:	460e      	mov	r6, r1
 8006786:	b921      	cbnz	r1, 8006792 <_realloc_r+0x16>
 8006788:	4611      	mov	r1, r2
 800678a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	f7ff bc37 	b.w	8006000 <_malloc_r>
 8006792:	b92a      	cbnz	r2, 80067a0 <_realloc_r+0x24>
 8006794:	f7ff fbcc 	bl	8005f30 <_free_r>
 8006798:	4625      	mov	r5, r4
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	f000 f81b 	bl	80067da <_malloc_usable_size_r>
 80067a4:	4284      	cmp	r4, r0
 80067a6:	4607      	mov	r7, r0
 80067a8:	d802      	bhi.n	80067b0 <_realloc_r+0x34>
 80067aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067ae:	d812      	bhi.n	80067d6 <_realloc_r+0x5a>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4640      	mov	r0, r8
 80067b4:	f7ff fc24 	bl	8006000 <_malloc_r>
 80067b8:	4605      	mov	r5, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0ed      	beq.n	800679a <_realloc_r+0x1e>
 80067be:	42bc      	cmp	r4, r7
 80067c0:	4622      	mov	r2, r4
 80067c2:	4631      	mov	r1, r6
 80067c4:	bf28      	it	cs
 80067c6:	463a      	movcs	r2, r7
 80067c8:	f7ff ffca 	bl	8006760 <memcpy>
 80067cc:	4631      	mov	r1, r6
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7ff fbae 	bl	8005f30 <_free_r>
 80067d4:	e7e1      	b.n	800679a <_realloc_r+0x1e>
 80067d6:	4635      	mov	r5, r6
 80067d8:	e7df      	b.n	800679a <_realloc_r+0x1e>

080067da <_malloc_usable_size_r>:
 80067da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067de:	1f18      	subs	r0, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfbc      	itt	lt
 80067e4:	580b      	ldrlt	r3, [r1, r0]
 80067e6:	18c0      	addlt	r0, r0, r3
 80067e8:	4770      	bx	lr
	...

080067ec <round>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80067f2:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 80067f6:	2a13      	cmp	r2, #19
 80067f8:	460b      	mov	r3, r1
 80067fa:	4605      	mov	r5, r0
 80067fc:	460c      	mov	r4, r1
 80067fe:	dc18      	bgt.n	8006832 <round+0x46>
 8006800:	2a00      	cmp	r2, #0
 8006802:	da09      	bge.n	8006818 <round+0x2c>
 8006804:	3201      	adds	r2, #1
 8006806:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800680a:	d103      	bne.n	8006814 <round+0x28>
 800680c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006814:	2200      	movs	r2, #0
 8006816:	e029      	b.n	800686c <round+0x80>
 8006818:	4816      	ldr	r0, [pc, #88]	; (8006874 <round+0x88>)
 800681a:	4110      	asrs	r0, r2
 800681c:	4001      	ands	r1, r0
 800681e:	4329      	orrs	r1, r5
 8006820:	d011      	beq.n	8006846 <round+0x5a>
 8006822:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006826:	fa41 f202 	asr.w	r2, r1, r2
 800682a:	4413      	add	r3, r2
 800682c:	ea23 0300 	bic.w	r3, r3, r0
 8006830:	e7f0      	b.n	8006814 <round+0x28>
 8006832:	2a33      	cmp	r2, #51	; 0x33
 8006834:	dd0a      	ble.n	800684c <round+0x60>
 8006836:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800683a:	d104      	bne.n	8006846 <round+0x5a>
 800683c:	4602      	mov	r2, r0
 800683e:	f7f9 fc8d 	bl	800015c <__adddf3>
 8006842:	4605      	mov	r5, r0
 8006844:	460c      	mov	r4, r1
 8006846:	4628      	mov	r0, r5
 8006848:	4621      	mov	r1, r4
 800684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006854:	40f8      	lsrs	r0, r7
 8006856:	4228      	tst	r0, r5
 8006858:	d0f5      	beq.n	8006846 <round+0x5a>
 800685a:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800685e:	2201      	movs	r2, #1
 8006860:	408a      	lsls	r2, r1
 8006862:	1952      	adds	r2, r2, r5
 8006864:	bf28      	it	cs
 8006866:	3301      	addcs	r3, #1
 8006868:	ea22 0200 	bic.w	r2, r2, r0
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	e7e7      	b.n	8006842 <round+0x56>
 8006872:	bf00      	nop
 8006874:	000fffff 	.word	0x000fffff

08006878 <_init>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	bf00      	nop
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr

08006884 <_fini>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr
